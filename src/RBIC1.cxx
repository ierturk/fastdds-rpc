// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file RBIC1.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "RBIC1.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace RBIC1 {



OutLinRequest::OutLinRequest()
{
}

OutLinRequest::~OutLinRequest()
{
}

OutLinRequest::OutLinRequest(
        const OutLinRequest& x)
{
    m_zp1m = x.m_zp1m;
    m_zp2m = x.m_zp2m;
    m_a = x.m_a;
    m_b = x.m_b;
}

OutLinRequest::OutLinRequest(
        OutLinRequest&& x) noexcept
{
    m_zp1m = x.m_zp1m;
    m_zp2m = x.m_zp2m;
    m_a = x.m_a;
    m_b = x.m_b;
}

OutLinRequest& OutLinRequest::operator =(
        const OutLinRequest& x)
{

    m_zp1m = x.m_zp1m;
    m_zp2m = x.m_zp2m;
    m_a = x.m_a;
    m_b = x.m_b;
    return *this;
}

OutLinRequest& OutLinRequest::operator =(
        OutLinRequest&& x) noexcept
{

    m_zp1m = x.m_zp1m;
    m_zp2m = x.m_zp2m;
    m_a = x.m_a;
    m_b = x.m_b;
    return *this;
}

bool OutLinRequest::operator ==(
        const OutLinRequest& x) const
{
    return (m_zp1m == x.m_zp1m &&
           m_zp2m == x.m_zp2m &&
           m_a == x.m_a &&
           m_b == x.m_b);
}

bool OutLinRequest::operator !=(
        const OutLinRequest& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member zp1m
 * @param _zp1m New value for member zp1m
 */
void OutLinRequest::zp1m(
        float _zp1m)
{
    m_zp1m = _zp1m;
}

/*!
 * @brief This function returns the value of member zp1m
 * @return Value of member zp1m
 */
float OutLinRequest::zp1m() const
{
    return m_zp1m;
}

/*!
 * @brief This function returns a reference to member zp1m
 * @return Reference to member zp1m
 */
float& OutLinRequest::zp1m()
{
    return m_zp1m;
}


/*!
 * @brief This function sets a value in member zp2m
 * @param _zp2m New value for member zp2m
 */
void OutLinRequest::zp2m(
        float _zp2m)
{
    m_zp2m = _zp2m;
}

/*!
 * @brief This function returns the value of member zp2m
 * @return Value of member zp2m
 */
float OutLinRequest::zp2m() const
{
    return m_zp2m;
}

/*!
 * @brief This function returns a reference to member zp2m
 * @return Reference to member zp2m
 */
float& OutLinRequest::zp2m()
{
    return m_zp2m;
}


/*!
 * @brief This function sets a value in member a
 * @param _a New value for member a
 */
void OutLinRequest::a(
        float _a)
{
    m_a = _a;
}

/*!
 * @brief This function returns the value of member a
 * @return Value of member a
 */
float OutLinRequest::a() const
{
    return m_a;
}

/*!
 * @brief This function returns a reference to member a
 * @return Reference to member a
 */
float& OutLinRequest::a()
{
    return m_a;
}


/*!
 * @brief This function sets a value in member b
 * @param _b New value for member b
 */
void OutLinRequest::b(
        float _b)
{
    m_b = _b;
}

/*!
 * @brief This function returns the value of member b
 * @return Value of member b
 */
float OutLinRequest::b() const
{
    return m_b;
}

/*!
 * @brief This function returns a reference to member b
 * @return Reference to member b
 */
float& OutLinRequest::b()
{
    return m_b;
}




OutLinReply::OutLinReply()
{
}

OutLinReply::~OutLinReply()
{
}

OutLinReply::OutLinReply(
        const OutLinReply& x)
{
    m_success = x.m_success;
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
}

OutLinReply::OutLinReply(
        OutLinReply&& x) noexcept
{
    m_success = x.m_success;
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
}

OutLinReply& OutLinReply::operator =(
        const OutLinReply& x)
{

    m_success = x.m_success;
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    return *this;
}

OutLinReply& OutLinReply::operator =(
        OutLinReply&& x) noexcept
{

    m_success = x.m_success;
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    return *this;
}

bool OutLinReply::operator ==(
        const OutLinReply& x) const
{
    return (m_success == x.m_success &&
           m_c0 == x.m_c0 &&
           m_c1 == x.m_c1);
}

bool OutLinReply::operator !=(
        const OutLinReply& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member success
 * @param _success New value for member success
 */
void OutLinReply::success(
        bool _success)
{
    m_success = _success;
}

/*!
 * @brief This function returns the value of member success
 * @return Value of member success
 */
bool OutLinReply::success() const
{
    return m_success;
}

/*!
 * @brief This function returns a reference to member success
 * @return Reference to member success
 */
bool& OutLinReply::success()
{
    return m_success;
}


/*!
 * @brief This function sets a value in member c0
 * @param _c0 New value for member c0
 */
void OutLinReply::c0(
        float _c0)
{
    m_c0 = _c0;
}

/*!
 * @brief This function returns the value of member c0
 * @return Value of member c0
 */
float OutLinReply::c0() const
{
    return m_c0;
}

/*!
 * @brief This function returns a reference to member c0
 * @return Reference to member c0
 */
float& OutLinReply::c0()
{
    return m_c0;
}


/*!
 * @brief This function sets a value in member c1
 * @param _c1 New value for member c1
 */
void OutLinReply::c1(
        float _c1)
{
    m_c1 = _c1;
}

/*!
 * @brief This function returns the value of member c1
 * @return Value of member c1
 */
float OutLinReply::c1() const
{
    return m_c1;
}

/*!
 * @brief This function returns a reference to member c1
 * @return Reference to member c1
 */
float& OutLinReply::c1()
{
    return m_c1;
}




TLinRequest::TLinRequest()
{
}

TLinRequest::~TLinRequest()
{
}

TLinRequest::TLinRequest(
        const TLinRequest& x)
{
    m_ztMed = x.m_ztMed;
    m_ztUpp = x.m_ztUpp;
    m_tMed = x.m_tMed;
    m_tUpp = x.m_tUpp;
}

TLinRequest::TLinRequest(
        TLinRequest&& x) noexcept
{
    m_ztMed = x.m_ztMed;
    m_ztUpp = x.m_ztUpp;
    m_tMed = x.m_tMed;
    m_tUpp = x.m_tUpp;
}

TLinRequest& TLinRequest::operator =(
        const TLinRequest& x)
{

    m_ztMed = x.m_ztMed;
    m_ztUpp = x.m_ztUpp;
    m_tMed = x.m_tMed;
    m_tUpp = x.m_tUpp;
    return *this;
}

TLinRequest& TLinRequest::operator =(
        TLinRequest&& x) noexcept
{

    m_ztMed = x.m_ztMed;
    m_ztUpp = x.m_ztUpp;
    m_tMed = x.m_tMed;
    m_tUpp = x.m_tUpp;
    return *this;
}

bool TLinRequest::operator ==(
        const TLinRequest& x) const
{
    return (m_ztMed == x.m_ztMed &&
           m_ztUpp == x.m_ztUpp &&
           m_tMed == x.m_tMed &&
           m_tUpp == x.m_tUpp);
}

bool TLinRequest::operator !=(
        const TLinRequest& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member ztMed
 * @param _ztMed New value for member ztMed
 */
void TLinRequest::ztMed(
        float _ztMed)
{
    m_ztMed = _ztMed;
}

/*!
 * @brief This function returns the value of member ztMed
 * @return Value of member ztMed
 */
float TLinRequest::ztMed() const
{
    return m_ztMed;
}

/*!
 * @brief This function returns a reference to member ztMed
 * @return Reference to member ztMed
 */
float& TLinRequest::ztMed()
{
    return m_ztMed;
}


/*!
 * @brief This function sets a value in member ztUpp
 * @param _ztUpp New value for member ztUpp
 */
void TLinRequest::ztUpp(
        float _ztUpp)
{
    m_ztUpp = _ztUpp;
}

/*!
 * @brief This function returns the value of member ztUpp
 * @return Value of member ztUpp
 */
float TLinRequest::ztUpp() const
{
    return m_ztUpp;
}

/*!
 * @brief This function returns a reference to member ztUpp
 * @return Reference to member ztUpp
 */
float& TLinRequest::ztUpp()
{
    return m_ztUpp;
}


/*!
 * @brief This function sets a value in member tMed
 * @param _tMed New value for member tMed
 */
void TLinRequest::tMed(
        float _tMed)
{
    m_tMed = _tMed;
}

/*!
 * @brief This function returns the value of member tMed
 * @return Value of member tMed
 */
float TLinRequest::tMed() const
{
    return m_tMed;
}

/*!
 * @brief This function returns a reference to member tMed
 * @return Reference to member tMed
 */
float& TLinRequest::tMed()
{
    return m_tMed;
}


/*!
 * @brief This function sets a value in member tUpp
 * @param _tUpp New value for member tUpp
 */
void TLinRequest::tUpp(
        float _tUpp)
{
    m_tUpp = _tUpp;
}

/*!
 * @brief This function returns the value of member tUpp
 * @return Value of member tUpp
 */
float TLinRequest::tUpp() const
{
    return m_tUpp;
}

/*!
 * @brief This function returns a reference to member tUpp
 * @return Reference to member tUpp
 */
float& TLinRequest::tUpp()
{
    return m_tUpp;
}




TLinReply::TLinReply()
{
}

TLinReply::~TLinReply()
{
}

TLinReply::TLinReply(
        const TLinReply& x)
{
    m_success = x.m_success;
    m_ct0 = x.m_ct0;
    m_ct1 = x.m_ct1;
}

TLinReply::TLinReply(
        TLinReply&& x) noexcept
{
    m_success = x.m_success;
    m_ct0 = x.m_ct0;
    m_ct1 = x.m_ct1;
}

TLinReply& TLinReply::operator =(
        const TLinReply& x)
{

    m_success = x.m_success;
    m_ct0 = x.m_ct0;
    m_ct1 = x.m_ct1;
    return *this;
}

TLinReply& TLinReply::operator =(
        TLinReply&& x) noexcept
{

    m_success = x.m_success;
    m_ct0 = x.m_ct0;
    m_ct1 = x.m_ct1;
    return *this;
}

bool TLinReply::operator ==(
        const TLinReply& x) const
{
    return (m_success == x.m_success &&
           m_ct0 == x.m_ct0 &&
           m_ct1 == x.m_ct1);
}

bool TLinReply::operator !=(
        const TLinReply& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member success
 * @param _success New value for member success
 */
void TLinReply::success(
        bool _success)
{
    m_success = _success;
}

/*!
 * @brief This function returns the value of member success
 * @return Value of member success
 */
bool TLinReply::success() const
{
    return m_success;
}

/*!
 * @brief This function returns a reference to member success
 * @return Reference to member success
 */
bool& TLinReply::success()
{
    return m_success;
}


/*!
 * @brief This function sets a value in member ct0
 * @param _ct0 New value for member ct0
 */
void TLinReply::ct0(
        float _ct0)
{
    m_ct0 = _ct0;
}

/*!
 * @brief This function returns the value of member ct0
 * @return Value of member ct0
 */
float TLinReply::ct0() const
{
    return m_ct0;
}

/*!
 * @brief This function returns a reference to member ct0
 * @return Reference to member ct0
 */
float& TLinReply::ct0()
{
    return m_ct0;
}


/*!
 * @brief This function sets a value in member ct1
 * @param _ct1 New value for member ct1
 */
void TLinReply::ct1(
        float _ct1)
{
    m_ct1 = _ct1;
}

/*!
 * @brief This function returns the value of member ct1
 * @return Value of member ct1
 */
float TLinReply::ct1() const
{
    return m_ct1;
}

/*!
 * @brief This function returns a reference to member ct1
 * @return Reference to member ct1
 */
float& TLinReply::ct1()
{
    return m_ct1;
}




OutQuadRequest::OutQuadRequest()
{
}

OutQuadRequest::~OutQuadRequest()
{
}

OutQuadRequest::OutQuadRequest(
        const OutQuadRequest& x)
{
    m_zp1m = x.m_zp1m;
    m_zp2m = x.m_zp2m;
    m_zp3m = x.m_zp3m;
    m_a = x.m_a;
    m_b = x.m_b;
    m_m = x.m_m;
    m_adcReso = x.m_adcReso;
}

OutQuadRequest::OutQuadRequest(
        OutQuadRequest&& x) noexcept
{
    m_zp1m = x.m_zp1m;
    m_zp2m = x.m_zp2m;
    m_zp3m = x.m_zp3m;
    m_a = x.m_a;
    m_b = x.m_b;
    m_m = x.m_m;
    m_adcReso = x.m_adcReso;
}

OutQuadRequest& OutQuadRequest::operator =(
        const OutQuadRequest& x)
{

    m_zp1m = x.m_zp1m;
    m_zp2m = x.m_zp2m;
    m_zp3m = x.m_zp3m;
    m_a = x.m_a;
    m_b = x.m_b;
    m_m = x.m_m;
    m_adcReso = x.m_adcReso;
    return *this;
}

OutQuadRequest& OutQuadRequest::operator =(
        OutQuadRequest&& x) noexcept
{

    m_zp1m = x.m_zp1m;
    m_zp2m = x.m_zp2m;
    m_zp3m = x.m_zp3m;
    m_a = x.m_a;
    m_b = x.m_b;
    m_m = x.m_m;
    m_adcReso = x.m_adcReso;
    return *this;
}

bool OutQuadRequest::operator ==(
        const OutQuadRequest& x) const
{
    return (m_zp1m == x.m_zp1m &&
           m_zp2m == x.m_zp2m &&
           m_zp3m == x.m_zp3m &&
           m_a == x.m_a &&
           m_b == x.m_b &&
           m_m == x.m_m &&
           m_adcReso == x.m_adcReso);
}

bool OutQuadRequest::operator !=(
        const OutQuadRequest& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member zp1m
 * @param _zp1m New value for member zp1m
 */
void OutQuadRequest::zp1m(
        float _zp1m)
{
    m_zp1m = _zp1m;
}

/*!
 * @brief This function returns the value of member zp1m
 * @return Value of member zp1m
 */
float OutQuadRequest::zp1m() const
{
    return m_zp1m;
}

/*!
 * @brief This function returns a reference to member zp1m
 * @return Reference to member zp1m
 */
float& OutQuadRequest::zp1m()
{
    return m_zp1m;
}


/*!
 * @brief This function sets a value in member zp2m
 * @param _zp2m New value for member zp2m
 */
void OutQuadRequest::zp2m(
        float _zp2m)
{
    m_zp2m = _zp2m;
}

/*!
 * @brief This function returns the value of member zp2m
 * @return Value of member zp2m
 */
float OutQuadRequest::zp2m() const
{
    return m_zp2m;
}

/*!
 * @brief This function returns a reference to member zp2m
 * @return Reference to member zp2m
 */
float& OutQuadRequest::zp2m()
{
    return m_zp2m;
}


/*!
 * @brief This function sets a value in member zp3m
 * @param _zp3m New value for member zp3m
 */
void OutQuadRequest::zp3m(
        float _zp3m)
{
    m_zp3m = _zp3m;
}

/*!
 * @brief This function returns the value of member zp3m
 * @return Value of member zp3m
 */
float OutQuadRequest::zp3m() const
{
    return m_zp3m;
}

/*!
 * @brief This function returns a reference to member zp3m
 * @return Reference to member zp3m
 */
float& OutQuadRequest::zp3m()
{
    return m_zp3m;
}


/*!
 * @brief This function sets a value in member a
 * @param _a New value for member a
 */
void OutQuadRequest::a(
        float _a)
{
    m_a = _a;
}

/*!
 * @brief This function returns the value of member a
 * @return Value of member a
 */
float OutQuadRequest::a() const
{
    return m_a;
}

/*!
 * @brief This function returns a reference to member a
 * @return Reference to member a
 */
float& OutQuadRequest::a()
{
    return m_a;
}


/*!
 * @brief This function sets a value in member b
 * @param _b New value for member b
 */
void OutQuadRequest::b(
        float _b)
{
    m_b = _b;
}

/*!
 * @brief This function returns the value of member b
 * @return Value of member b
 */
float OutQuadRequest::b() const
{
    return m_b;
}

/*!
 * @brief This function returns a reference to member b
 * @return Reference to member b
 */
float& OutQuadRequest::b()
{
    return m_b;
}


/*!
 * @brief This function sets a value in member m
 * @param _m New value for member m
 */
void OutQuadRequest::m(
        float _m)
{
    m_m = _m;
}

/*!
 * @brief This function returns the value of member m
 * @return Value of member m
 */
float OutQuadRequest::m() const
{
    return m_m;
}

/*!
 * @brief This function returns a reference to member m
 * @return Reference to member m
 */
float& OutQuadRequest::m()
{
    return m_m;
}


/*!
 * @brief This function sets a value in member adcReso
 * @param _adcReso New value for member adcReso
 */
void OutQuadRequest::adcReso(
        int32_t _adcReso)
{
    m_adcReso = _adcReso;
}

/*!
 * @brief This function returns the value of member adcReso
 * @return Value of member adcReso
 */
int32_t OutQuadRequest::adcReso() const
{
    return m_adcReso;
}

/*!
 * @brief This function returns a reference to member adcReso
 * @return Reference to member adcReso
 */
int32_t& OutQuadRequest::adcReso()
{
    return m_adcReso;
}




OutQuadReply::OutQuadReply()
{
}

OutQuadReply::~OutQuadReply()
{
}

OutQuadReply::OutQuadReply(
        const OutQuadReply& x)
{
    m_success = x.m_success;
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    m_c2 = x.m_c2;
}

OutQuadReply::OutQuadReply(
        OutQuadReply&& x) noexcept
{
    m_success = x.m_success;
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    m_c2 = x.m_c2;
}

OutQuadReply& OutQuadReply::operator =(
        const OutQuadReply& x)
{

    m_success = x.m_success;
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    m_c2 = x.m_c2;
    return *this;
}

OutQuadReply& OutQuadReply::operator =(
        OutQuadReply&& x) noexcept
{

    m_success = x.m_success;
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    m_c2 = x.m_c2;
    return *this;
}

bool OutQuadReply::operator ==(
        const OutQuadReply& x) const
{
    return (m_success == x.m_success &&
           m_c0 == x.m_c0 &&
           m_c1 == x.m_c1 &&
           m_c2 == x.m_c2);
}

bool OutQuadReply::operator !=(
        const OutQuadReply& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member success
 * @param _success New value for member success
 */
void OutQuadReply::success(
        bool _success)
{
    m_success = _success;
}

/*!
 * @brief This function returns the value of member success
 * @return Value of member success
 */
bool OutQuadReply::success() const
{
    return m_success;
}

/*!
 * @brief This function returns a reference to member success
 * @return Reference to member success
 */
bool& OutQuadReply::success()
{
    return m_success;
}


/*!
 * @brief This function sets a value in member c0
 * @param _c0 New value for member c0
 */
void OutQuadReply::c0(
        float _c0)
{
    m_c0 = _c0;
}

/*!
 * @brief This function returns the value of member c0
 * @return Value of member c0
 */
float OutQuadReply::c0() const
{
    return m_c0;
}

/*!
 * @brief This function returns a reference to member c0
 * @return Reference to member c0
 */
float& OutQuadReply::c0()
{
    return m_c0;
}


/*!
 * @brief This function sets a value in member c1
 * @param _c1 New value for member c1
 */
void OutQuadReply::c1(
        float _c1)
{
    m_c1 = _c1;
}

/*!
 * @brief This function returns the value of member c1
 * @return Value of member c1
 */
float OutQuadReply::c1() const
{
    return m_c1;
}

/*!
 * @brief This function returns a reference to member c1
 * @return Reference to member c1
 */
float& OutQuadReply::c1()
{
    return m_c1;
}


/*!
 * @brief This function sets a value in member c2
 * @param _c2 New value for member c2
 */
void OutQuadReply::c2(
        float _c2)
{
    m_c2 = _c2;
}

/*!
 * @brief This function returns the value of member c2
 * @return Value of member c2
 */
float OutQuadReply::c2() const
{
    return m_c2;
}

/*!
 * @brief This function returns a reference to member c2
 * @return Reference to member c2
 */
float& OutQuadReply::c2()
{
    return m_c2;
}




OutThirdRequest::OutThirdRequest()
{
}

OutThirdRequest::~OutThirdRequest()
{
}

OutThirdRequest::OutThirdRequest(
        const OutThirdRequest& x)
{
    m_zp1m = x.m_zp1m;
    m_zp2m = x.m_zp2m;
    m_zp3m = x.m_zp3m;
    m_zp4m = x.m_zp4m;
    m_a = x.m_a;
    m_b = x.m_b;
    m_m = x.m_m;
    m_m2 = x.m_m2;
    m_adcReso = x.m_adcReso;
}

OutThirdRequest::OutThirdRequest(
        OutThirdRequest&& x) noexcept
{
    m_zp1m = x.m_zp1m;
    m_zp2m = x.m_zp2m;
    m_zp3m = x.m_zp3m;
    m_zp4m = x.m_zp4m;
    m_a = x.m_a;
    m_b = x.m_b;
    m_m = x.m_m;
    m_m2 = x.m_m2;
    m_adcReso = x.m_adcReso;
}

OutThirdRequest& OutThirdRequest::operator =(
        const OutThirdRequest& x)
{

    m_zp1m = x.m_zp1m;
    m_zp2m = x.m_zp2m;
    m_zp3m = x.m_zp3m;
    m_zp4m = x.m_zp4m;
    m_a = x.m_a;
    m_b = x.m_b;
    m_m = x.m_m;
    m_m2 = x.m_m2;
    m_adcReso = x.m_adcReso;
    return *this;
}

OutThirdRequest& OutThirdRequest::operator =(
        OutThirdRequest&& x) noexcept
{

    m_zp1m = x.m_zp1m;
    m_zp2m = x.m_zp2m;
    m_zp3m = x.m_zp3m;
    m_zp4m = x.m_zp4m;
    m_a = x.m_a;
    m_b = x.m_b;
    m_m = x.m_m;
    m_m2 = x.m_m2;
    m_adcReso = x.m_adcReso;
    return *this;
}

bool OutThirdRequest::operator ==(
        const OutThirdRequest& x) const
{
    return (m_zp1m == x.m_zp1m &&
           m_zp2m == x.m_zp2m &&
           m_zp3m == x.m_zp3m &&
           m_zp4m == x.m_zp4m &&
           m_a == x.m_a &&
           m_b == x.m_b &&
           m_m == x.m_m &&
           m_m2 == x.m_m2 &&
           m_adcReso == x.m_adcReso);
}

bool OutThirdRequest::operator !=(
        const OutThirdRequest& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member zp1m
 * @param _zp1m New value for member zp1m
 */
void OutThirdRequest::zp1m(
        float _zp1m)
{
    m_zp1m = _zp1m;
}

/*!
 * @brief This function returns the value of member zp1m
 * @return Value of member zp1m
 */
float OutThirdRequest::zp1m() const
{
    return m_zp1m;
}

/*!
 * @brief This function returns a reference to member zp1m
 * @return Reference to member zp1m
 */
float& OutThirdRequest::zp1m()
{
    return m_zp1m;
}


/*!
 * @brief This function sets a value in member zp2m
 * @param _zp2m New value for member zp2m
 */
void OutThirdRequest::zp2m(
        float _zp2m)
{
    m_zp2m = _zp2m;
}

/*!
 * @brief This function returns the value of member zp2m
 * @return Value of member zp2m
 */
float OutThirdRequest::zp2m() const
{
    return m_zp2m;
}

/*!
 * @brief This function returns a reference to member zp2m
 * @return Reference to member zp2m
 */
float& OutThirdRequest::zp2m()
{
    return m_zp2m;
}


/*!
 * @brief This function sets a value in member zp3m
 * @param _zp3m New value for member zp3m
 */
void OutThirdRequest::zp3m(
        float _zp3m)
{
    m_zp3m = _zp3m;
}

/*!
 * @brief This function returns the value of member zp3m
 * @return Value of member zp3m
 */
float OutThirdRequest::zp3m() const
{
    return m_zp3m;
}

/*!
 * @brief This function returns a reference to member zp3m
 * @return Reference to member zp3m
 */
float& OutThirdRequest::zp3m()
{
    return m_zp3m;
}


/*!
 * @brief This function sets a value in member zp4m
 * @param _zp4m New value for member zp4m
 */
void OutThirdRequest::zp4m(
        float _zp4m)
{
    m_zp4m = _zp4m;
}

/*!
 * @brief This function returns the value of member zp4m
 * @return Value of member zp4m
 */
float OutThirdRequest::zp4m() const
{
    return m_zp4m;
}

/*!
 * @brief This function returns a reference to member zp4m
 * @return Reference to member zp4m
 */
float& OutThirdRequest::zp4m()
{
    return m_zp4m;
}


/*!
 * @brief This function sets a value in member a
 * @param _a New value for member a
 */
void OutThirdRequest::a(
        float _a)
{
    m_a = _a;
}

/*!
 * @brief This function returns the value of member a
 * @return Value of member a
 */
float OutThirdRequest::a() const
{
    return m_a;
}

/*!
 * @brief This function returns a reference to member a
 * @return Reference to member a
 */
float& OutThirdRequest::a()
{
    return m_a;
}


/*!
 * @brief This function sets a value in member b
 * @param _b New value for member b
 */
void OutThirdRequest::b(
        float _b)
{
    m_b = _b;
}

/*!
 * @brief This function returns the value of member b
 * @return Value of member b
 */
float OutThirdRequest::b() const
{
    return m_b;
}

/*!
 * @brief This function returns a reference to member b
 * @return Reference to member b
 */
float& OutThirdRequest::b()
{
    return m_b;
}


/*!
 * @brief This function sets a value in member m
 * @param _m New value for member m
 */
void OutThirdRequest::m(
        float _m)
{
    m_m = _m;
}

/*!
 * @brief This function returns the value of member m
 * @return Value of member m
 */
float OutThirdRequest::m() const
{
    return m_m;
}

/*!
 * @brief This function returns a reference to member m
 * @return Reference to member m
 */
float& OutThirdRequest::m()
{
    return m_m;
}


/*!
 * @brief This function sets a value in member m2
 * @param _m2 New value for member m2
 */
void OutThirdRequest::m2(
        float _m2)
{
    m_m2 = _m2;
}

/*!
 * @brief This function returns the value of member m2
 * @return Value of member m2
 */
float OutThirdRequest::m2() const
{
    return m_m2;
}

/*!
 * @brief This function returns a reference to member m2
 * @return Reference to member m2
 */
float& OutThirdRequest::m2()
{
    return m_m2;
}


/*!
 * @brief This function sets a value in member adcReso
 * @param _adcReso New value for member adcReso
 */
void OutThirdRequest::adcReso(
        int32_t _adcReso)
{
    m_adcReso = _adcReso;
}

/*!
 * @brief This function returns the value of member adcReso
 * @return Value of member adcReso
 */
int32_t OutThirdRequest::adcReso() const
{
    return m_adcReso;
}

/*!
 * @brief This function returns a reference to member adcReso
 * @return Reference to member adcReso
 */
int32_t& OutThirdRequest::adcReso()
{
    return m_adcReso;
}




OutThirdReply::OutThirdReply()
{
}

OutThirdReply::~OutThirdReply()
{
}

OutThirdReply::OutThirdReply(
        const OutThirdReply& x)
{
    m_success = x.m_success;
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    m_c2 = x.m_c2;
    m_c3 = x.m_c3;
}

OutThirdReply::OutThirdReply(
        OutThirdReply&& x) noexcept
{
    m_success = x.m_success;
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    m_c2 = x.m_c2;
    m_c3 = x.m_c3;
}

OutThirdReply& OutThirdReply::operator =(
        const OutThirdReply& x)
{

    m_success = x.m_success;
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    m_c2 = x.m_c2;
    m_c3 = x.m_c3;
    return *this;
}

OutThirdReply& OutThirdReply::operator =(
        OutThirdReply&& x) noexcept
{

    m_success = x.m_success;
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    m_c2 = x.m_c2;
    m_c3 = x.m_c3;
    return *this;
}

bool OutThirdReply::operator ==(
        const OutThirdReply& x) const
{
    return (m_success == x.m_success &&
           m_c0 == x.m_c0 &&
           m_c1 == x.m_c1 &&
           m_c2 == x.m_c2 &&
           m_c3 == x.m_c3);
}

bool OutThirdReply::operator !=(
        const OutThirdReply& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member success
 * @param _success New value for member success
 */
void OutThirdReply::success(
        bool _success)
{
    m_success = _success;
}

/*!
 * @brief This function returns the value of member success
 * @return Value of member success
 */
bool OutThirdReply::success() const
{
    return m_success;
}

/*!
 * @brief This function returns a reference to member success
 * @return Reference to member success
 */
bool& OutThirdReply::success()
{
    return m_success;
}


/*!
 * @brief This function sets a value in member c0
 * @param _c0 New value for member c0
 */
void OutThirdReply::c0(
        float _c0)
{
    m_c0 = _c0;
}

/*!
 * @brief This function returns the value of member c0
 * @return Value of member c0
 */
float OutThirdReply::c0() const
{
    return m_c0;
}

/*!
 * @brief This function returns a reference to member c0
 * @return Reference to member c0
 */
float& OutThirdReply::c0()
{
    return m_c0;
}


/*!
 * @brief This function sets a value in member c1
 * @param _c1 New value for member c1
 */
void OutThirdReply::c1(
        float _c1)
{
    m_c1 = _c1;
}

/*!
 * @brief This function returns the value of member c1
 * @return Value of member c1
 */
float OutThirdReply::c1() const
{
    return m_c1;
}

/*!
 * @brief This function returns a reference to member c1
 * @return Reference to member c1
 */
float& OutThirdReply::c1()
{
    return m_c1;
}


/*!
 * @brief This function sets a value in member c2
 * @param _c2 New value for member c2
 */
void OutThirdReply::c2(
        float _c2)
{
    m_c2 = _c2;
}

/*!
 * @brief This function returns the value of member c2
 * @return Value of member c2
 */
float OutThirdReply::c2() const
{
    return m_c2;
}

/*!
 * @brief This function returns a reference to member c2
 * @return Reference to member c2
 */
float& OutThirdReply::c2()
{
    return m_c2;
}


/*!
 * @brief This function sets a value in member c3
 * @param _c3 New value for member c3
 */
void OutThirdReply::c3(
        float _c3)
{
    m_c3 = _c3;
}

/*!
 * @brief This function returns the value of member c3
 * @return Value of member c3
 */
float OutThirdReply::c3() const
{
    return m_c3;
}

/*!
 * @brief This function returns a reference to member c3
 * @return Reference to member c3
 */
float& OutThirdReply::c3()
{
    return m_c3;
}




TQuadRequest::TQuadRequest()
{
}

TQuadRequest::~TQuadRequest()
{
}

TQuadRequest::TQuadRequest(
        const TQuadRequest& x)
{
    m_ztLow = x.m_ztLow;
    m_ztUpp = x.m_ztUpp;
    m_ztMed = x.m_ztMed;
    m_tLow = x.m_tLow;
    m_tUpp = x.m_tUpp;
    m_tMed = x.m_tMed;
    m_adcReso = x.m_adcReso;
}

TQuadRequest::TQuadRequest(
        TQuadRequest&& x) noexcept
{
    m_ztLow = x.m_ztLow;
    m_ztUpp = x.m_ztUpp;
    m_ztMed = x.m_ztMed;
    m_tLow = x.m_tLow;
    m_tUpp = x.m_tUpp;
    m_tMed = x.m_tMed;
    m_adcReso = x.m_adcReso;
}

TQuadRequest& TQuadRequest::operator =(
        const TQuadRequest& x)
{

    m_ztLow = x.m_ztLow;
    m_ztUpp = x.m_ztUpp;
    m_ztMed = x.m_ztMed;
    m_tLow = x.m_tLow;
    m_tUpp = x.m_tUpp;
    m_tMed = x.m_tMed;
    m_adcReso = x.m_adcReso;
    return *this;
}

TQuadRequest& TQuadRequest::operator =(
        TQuadRequest&& x) noexcept
{

    m_ztLow = x.m_ztLow;
    m_ztUpp = x.m_ztUpp;
    m_ztMed = x.m_ztMed;
    m_tLow = x.m_tLow;
    m_tUpp = x.m_tUpp;
    m_tMed = x.m_tMed;
    m_adcReso = x.m_adcReso;
    return *this;
}

bool TQuadRequest::operator ==(
        const TQuadRequest& x) const
{
    return (m_ztLow == x.m_ztLow &&
           m_ztUpp == x.m_ztUpp &&
           m_ztMed == x.m_ztMed &&
           m_tLow == x.m_tLow &&
           m_tUpp == x.m_tUpp &&
           m_tMed == x.m_tMed &&
           m_adcReso == x.m_adcReso);
}

bool TQuadRequest::operator !=(
        const TQuadRequest& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member ztLow
 * @param _ztLow New value for member ztLow
 */
void TQuadRequest::ztLow(
        float _ztLow)
{
    m_ztLow = _ztLow;
}

/*!
 * @brief This function returns the value of member ztLow
 * @return Value of member ztLow
 */
float TQuadRequest::ztLow() const
{
    return m_ztLow;
}

/*!
 * @brief This function returns a reference to member ztLow
 * @return Reference to member ztLow
 */
float& TQuadRequest::ztLow()
{
    return m_ztLow;
}


/*!
 * @brief This function sets a value in member ztUpp
 * @param _ztUpp New value for member ztUpp
 */
void TQuadRequest::ztUpp(
        float _ztUpp)
{
    m_ztUpp = _ztUpp;
}

/*!
 * @brief This function returns the value of member ztUpp
 * @return Value of member ztUpp
 */
float TQuadRequest::ztUpp() const
{
    return m_ztUpp;
}

/*!
 * @brief This function returns a reference to member ztUpp
 * @return Reference to member ztUpp
 */
float& TQuadRequest::ztUpp()
{
    return m_ztUpp;
}


/*!
 * @brief This function sets a value in member ztMed
 * @param _ztMed New value for member ztMed
 */
void TQuadRequest::ztMed(
        float _ztMed)
{
    m_ztMed = _ztMed;
}

/*!
 * @brief This function returns the value of member ztMed
 * @return Value of member ztMed
 */
float TQuadRequest::ztMed() const
{
    return m_ztMed;
}

/*!
 * @brief This function returns a reference to member ztMed
 * @return Reference to member ztMed
 */
float& TQuadRequest::ztMed()
{
    return m_ztMed;
}


/*!
 * @brief This function sets a value in member tLow
 * @param _tLow New value for member tLow
 */
void TQuadRequest::tLow(
        float _tLow)
{
    m_tLow = _tLow;
}

/*!
 * @brief This function returns the value of member tLow
 * @return Value of member tLow
 */
float TQuadRequest::tLow() const
{
    return m_tLow;
}

/*!
 * @brief This function returns a reference to member tLow
 * @return Reference to member tLow
 */
float& TQuadRequest::tLow()
{
    return m_tLow;
}


/*!
 * @brief This function sets a value in member tUpp
 * @param _tUpp New value for member tUpp
 */
void TQuadRequest::tUpp(
        float _tUpp)
{
    m_tUpp = _tUpp;
}

/*!
 * @brief This function returns the value of member tUpp
 * @return Value of member tUpp
 */
float TQuadRequest::tUpp() const
{
    return m_tUpp;
}

/*!
 * @brief This function returns a reference to member tUpp
 * @return Reference to member tUpp
 */
float& TQuadRequest::tUpp()
{
    return m_tUpp;
}


/*!
 * @brief This function sets a value in member tMed
 * @param _tMed New value for member tMed
 */
void TQuadRequest::tMed(
        float _tMed)
{
    m_tMed = _tMed;
}

/*!
 * @brief This function returns the value of member tMed
 * @return Value of member tMed
 */
float TQuadRequest::tMed() const
{
    return m_tMed;
}

/*!
 * @brief This function returns a reference to member tMed
 * @return Reference to member tMed
 */
float& TQuadRequest::tMed()
{
    return m_tMed;
}


/*!
 * @brief This function sets a value in member adcReso
 * @param _adcReso New value for member adcReso
 */
void TQuadRequest::adcReso(
        int32_t _adcReso)
{
    m_adcReso = _adcReso;
}

/*!
 * @brief This function returns the value of member adcReso
 * @return Value of member adcReso
 */
int32_t TQuadRequest::adcReso() const
{
    return m_adcReso;
}

/*!
 * @brief This function returns a reference to member adcReso
 * @return Reference to member adcReso
 */
int32_t& TQuadRequest::adcReso()
{
    return m_adcReso;
}




TQuadReply::TQuadReply()
{
}

TQuadReply::~TQuadReply()
{
}

TQuadReply::TQuadReply(
        const TQuadReply& x)
{
    m_success = x.m_success;
    m_ct0 = x.m_ct0;
    m_ct1 = x.m_ct1;
    m_ct2 = x.m_ct2;
}

TQuadReply::TQuadReply(
        TQuadReply&& x) noexcept
{
    m_success = x.m_success;
    m_ct0 = x.m_ct0;
    m_ct1 = x.m_ct1;
    m_ct2 = x.m_ct2;
}

TQuadReply& TQuadReply::operator =(
        const TQuadReply& x)
{

    m_success = x.m_success;
    m_ct0 = x.m_ct0;
    m_ct1 = x.m_ct1;
    m_ct2 = x.m_ct2;
    return *this;
}

TQuadReply& TQuadReply::operator =(
        TQuadReply&& x) noexcept
{

    m_success = x.m_success;
    m_ct0 = x.m_ct0;
    m_ct1 = x.m_ct1;
    m_ct2 = x.m_ct2;
    return *this;
}

bool TQuadReply::operator ==(
        const TQuadReply& x) const
{
    return (m_success == x.m_success &&
           m_ct0 == x.m_ct0 &&
           m_ct1 == x.m_ct1 &&
           m_ct2 == x.m_ct2);
}

bool TQuadReply::operator !=(
        const TQuadReply& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member success
 * @param _success New value for member success
 */
void TQuadReply::success(
        bool _success)
{
    m_success = _success;
}

/*!
 * @brief This function returns the value of member success
 * @return Value of member success
 */
bool TQuadReply::success() const
{
    return m_success;
}

/*!
 * @brief This function returns a reference to member success
 * @return Reference to member success
 */
bool& TQuadReply::success()
{
    return m_success;
}


/*!
 * @brief This function sets a value in member ct0
 * @param _ct0 New value for member ct0
 */
void TQuadReply::ct0(
        float _ct0)
{
    m_ct0 = _ct0;
}

/*!
 * @brief This function returns the value of member ct0
 * @return Value of member ct0
 */
float TQuadReply::ct0() const
{
    return m_ct0;
}

/*!
 * @brief This function returns a reference to member ct0
 * @return Reference to member ct0
 */
float& TQuadReply::ct0()
{
    return m_ct0;
}


/*!
 * @brief This function sets a value in member ct1
 * @param _ct1 New value for member ct1
 */
void TQuadReply::ct1(
        float _ct1)
{
    m_ct1 = _ct1;
}

/*!
 * @brief This function returns the value of member ct1
 * @return Value of member ct1
 */
float TQuadReply::ct1() const
{
    return m_ct1;
}

/*!
 * @brief This function returns a reference to member ct1
 * @return Reference to member ct1
 */
float& TQuadReply::ct1()
{
    return m_ct1;
}


/*!
 * @brief This function sets a value in member ct2
 * @param _ct2 New value for member ct2
 */
void TQuadReply::ct2(
        float _ct2)
{
    m_ct2 = _ct2;
}

/*!
 * @brief This function returns the value of member ct2
 * @return Value of member ct2
 */
float TQuadReply::ct2() const
{
    return m_ct2;
}

/*!
 * @brief This function returns a reference to member ct2
 * @return Reference to member ct2
 */
float& TQuadReply::ct2()
{
    return m_ct2;
}




OutLinTLinRequest::OutLinTLinRequest()
{
}

OutLinTLinRequest::~OutLinTLinRequest()
{
}

OutLinTLinRequest::OutLinTLinRequest(
        const OutLinTLinRequest& x)
{
    m_zp1m = x.m_zp1m;
    m_zp2m = x.m_zp2m;
    m_zp1u = x.m_zp1u;
    m_zp2u = x.m_zp2u;
    m_a = x.m_a;
    m_b = x.m_b;
    m_ztMed = x.m_ztMed;
    m_ztUpp = x.m_ztUpp;
    m_adcReso = x.m_adcReso;
}

OutLinTLinRequest::OutLinTLinRequest(
        OutLinTLinRequest&& x) noexcept
{
    m_zp1m = x.m_zp1m;
    m_zp2m = x.m_zp2m;
    m_zp1u = x.m_zp1u;
    m_zp2u = x.m_zp2u;
    m_a = x.m_a;
    m_b = x.m_b;
    m_ztMed = x.m_ztMed;
    m_ztUpp = x.m_ztUpp;
    m_adcReso = x.m_adcReso;
}

OutLinTLinRequest& OutLinTLinRequest::operator =(
        const OutLinTLinRequest& x)
{

    m_zp1m = x.m_zp1m;
    m_zp2m = x.m_zp2m;
    m_zp1u = x.m_zp1u;
    m_zp2u = x.m_zp2u;
    m_a = x.m_a;
    m_b = x.m_b;
    m_ztMed = x.m_ztMed;
    m_ztUpp = x.m_ztUpp;
    m_adcReso = x.m_adcReso;
    return *this;
}

OutLinTLinRequest& OutLinTLinRequest::operator =(
        OutLinTLinRequest&& x) noexcept
{

    m_zp1m = x.m_zp1m;
    m_zp2m = x.m_zp2m;
    m_zp1u = x.m_zp1u;
    m_zp2u = x.m_zp2u;
    m_a = x.m_a;
    m_b = x.m_b;
    m_ztMed = x.m_ztMed;
    m_ztUpp = x.m_ztUpp;
    m_adcReso = x.m_adcReso;
    return *this;
}

bool OutLinTLinRequest::operator ==(
        const OutLinTLinRequest& x) const
{
    return (m_zp1m == x.m_zp1m &&
           m_zp2m == x.m_zp2m &&
           m_zp1u == x.m_zp1u &&
           m_zp2u == x.m_zp2u &&
           m_a == x.m_a &&
           m_b == x.m_b &&
           m_ztMed == x.m_ztMed &&
           m_ztUpp == x.m_ztUpp &&
           m_adcReso == x.m_adcReso);
}

bool OutLinTLinRequest::operator !=(
        const OutLinTLinRequest& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member zp1m
 * @param _zp1m New value for member zp1m
 */
void OutLinTLinRequest::zp1m(
        float _zp1m)
{
    m_zp1m = _zp1m;
}

/*!
 * @brief This function returns the value of member zp1m
 * @return Value of member zp1m
 */
float OutLinTLinRequest::zp1m() const
{
    return m_zp1m;
}

/*!
 * @brief This function returns a reference to member zp1m
 * @return Reference to member zp1m
 */
float& OutLinTLinRequest::zp1m()
{
    return m_zp1m;
}


/*!
 * @brief This function sets a value in member zp2m
 * @param _zp2m New value for member zp2m
 */
void OutLinTLinRequest::zp2m(
        float _zp2m)
{
    m_zp2m = _zp2m;
}

/*!
 * @brief This function returns the value of member zp2m
 * @return Value of member zp2m
 */
float OutLinTLinRequest::zp2m() const
{
    return m_zp2m;
}

/*!
 * @brief This function returns a reference to member zp2m
 * @return Reference to member zp2m
 */
float& OutLinTLinRequest::zp2m()
{
    return m_zp2m;
}


/*!
 * @brief This function sets a value in member zp1u
 * @param _zp1u New value for member zp1u
 */
void OutLinTLinRequest::zp1u(
        float _zp1u)
{
    m_zp1u = _zp1u;
}

/*!
 * @brief This function returns the value of member zp1u
 * @return Value of member zp1u
 */
float OutLinTLinRequest::zp1u() const
{
    return m_zp1u;
}

/*!
 * @brief This function returns a reference to member zp1u
 * @return Reference to member zp1u
 */
float& OutLinTLinRequest::zp1u()
{
    return m_zp1u;
}


/*!
 * @brief This function sets a value in member zp2u
 * @param _zp2u New value for member zp2u
 */
void OutLinTLinRequest::zp2u(
        float _zp2u)
{
    m_zp2u = _zp2u;
}

/*!
 * @brief This function returns the value of member zp2u
 * @return Value of member zp2u
 */
float OutLinTLinRequest::zp2u() const
{
    return m_zp2u;
}

/*!
 * @brief This function returns a reference to member zp2u
 * @return Reference to member zp2u
 */
float& OutLinTLinRequest::zp2u()
{
    return m_zp2u;
}


/*!
 * @brief This function sets a value in member a
 * @param _a New value for member a
 */
void OutLinTLinRequest::a(
        float _a)
{
    m_a = _a;
}

/*!
 * @brief This function returns the value of member a
 * @return Value of member a
 */
float OutLinTLinRequest::a() const
{
    return m_a;
}

/*!
 * @brief This function returns a reference to member a
 * @return Reference to member a
 */
float& OutLinTLinRequest::a()
{
    return m_a;
}


/*!
 * @brief This function sets a value in member b
 * @param _b New value for member b
 */
void OutLinTLinRequest::b(
        float _b)
{
    m_b = _b;
}

/*!
 * @brief This function returns the value of member b
 * @return Value of member b
 */
float OutLinTLinRequest::b() const
{
    return m_b;
}

/*!
 * @brief This function returns a reference to member b
 * @return Reference to member b
 */
float& OutLinTLinRequest::b()
{
    return m_b;
}


/*!
 * @brief This function sets a value in member ztMed
 * @param _ztMed New value for member ztMed
 */
void OutLinTLinRequest::ztMed(
        float _ztMed)
{
    m_ztMed = _ztMed;
}

/*!
 * @brief This function returns the value of member ztMed
 * @return Value of member ztMed
 */
float OutLinTLinRequest::ztMed() const
{
    return m_ztMed;
}

/*!
 * @brief This function returns a reference to member ztMed
 * @return Reference to member ztMed
 */
float& OutLinTLinRequest::ztMed()
{
    return m_ztMed;
}


/*!
 * @brief This function sets a value in member ztUpp
 * @param _ztUpp New value for member ztUpp
 */
void OutLinTLinRequest::ztUpp(
        float _ztUpp)
{
    m_ztUpp = _ztUpp;
}

/*!
 * @brief This function returns the value of member ztUpp
 * @return Value of member ztUpp
 */
float OutLinTLinRequest::ztUpp() const
{
    return m_ztUpp;
}

/*!
 * @brief This function returns a reference to member ztUpp
 * @return Reference to member ztUpp
 */
float& OutLinTLinRequest::ztUpp()
{
    return m_ztUpp;
}


/*!
 * @brief This function sets a value in member adcReso
 * @param _adcReso New value for member adcReso
 */
void OutLinTLinRequest::adcReso(
        int32_t _adcReso)
{
    m_adcReso = _adcReso;
}

/*!
 * @brief This function returns the value of member adcReso
 * @return Value of member adcReso
 */
int32_t OutLinTLinRequest::adcReso() const
{
    return m_adcReso;
}

/*!
 * @brief This function returns a reference to member adcReso
 * @return Reference to member adcReso
 */
int32_t& OutLinTLinRequest::adcReso()
{
    return m_adcReso;
}




OutLinTLinReply::OutLinTLinReply()
{
}

OutLinTLinReply::~OutLinTLinReply()
{
}

OutLinTLinReply::OutLinTLinReply(
        const OutLinTLinReply& x)
{
    m_success = x.m_success;
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    m_c4 = x.m_c4;
    m_c6 = x.m_c6;
}

OutLinTLinReply::OutLinTLinReply(
        OutLinTLinReply&& x) noexcept
{
    m_success = x.m_success;
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    m_c4 = x.m_c4;
    m_c6 = x.m_c6;
}

OutLinTLinReply& OutLinTLinReply::operator =(
        const OutLinTLinReply& x)
{

    m_success = x.m_success;
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    m_c4 = x.m_c4;
    m_c6 = x.m_c6;
    return *this;
}

OutLinTLinReply& OutLinTLinReply::operator =(
        OutLinTLinReply&& x) noexcept
{

    m_success = x.m_success;
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    m_c4 = x.m_c4;
    m_c6 = x.m_c6;
    return *this;
}

bool OutLinTLinReply::operator ==(
        const OutLinTLinReply& x) const
{
    return (m_success == x.m_success &&
           m_c0 == x.m_c0 &&
           m_c1 == x.m_c1 &&
           m_c4 == x.m_c4 &&
           m_c6 == x.m_c6);
}

bool OutLinTLinReply::operator !=(
        const OutLinTLinReply& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member success
 * @param _success New value for member success
 */
void OutLinTLinReply::success(
        bool _success)
{
    m_success = _success;
}

/*!
 * @brief This function returns the value of member success
 * @return Value of member success
 */
bool OutLinTLinReply::success() const
{
    return m_success;
}

/*!
 * @brief This function returns a reference to member success
 * @return Reference to member success
 */
bool& OutLinTLinReply::success()
{
    return m_success;
}


/*!
 * @brief This function sets a value in member c0
 * @param _c0 New value for member c0
 */
void OutLinTLinReply::c0(
        float _c0)
{
    m_c0 = _c0;
}

/*!
 * @brief This function returns the value of member c0
 * @return Value of member c0
 */
float OutLinTLinReply::c0() const
{
    return m_c0;
}

/*!
 * @brief This function returns a reference to member c0
 * @return Reference to member c0
 */
float& OutLinTLinReply::c0()
{
    return m_c0;
}


/*!
 * @brief This function sets a value in member c1
 * @param _c1 New value for member c1
 */
void OutLinTLinReply::c1(
        float _c1)
{
    m_c1 = _c1;
}

/*!
 * @brief This function returns the value of member c1
 * @return Value of member c1
 */
float OutLinTLinReply::c1() const
{
    return m_c1;
}

/*!
 * @brief This function returns a reference to member c1
 * @return Reference to member c1
 */
float& OutLinTLinReply::c1()
{
    return m_c1;
}


/*!
 * @brief This function sets a value in member c4
 * @param _c4 New value for member c4
 */
void OutLinTLinReply::c4(
        float _c4)
{
    m_c4 = _c4;
}

/*!
 * @brief This function returns the value of member c4
 * @return Value of member c4
 */
float OutLinTLinReply::c4() const
{
    return m_c4;
}

/*!
 * @brief This function returns a reference to member c4
 * @return Reference to member c4
 */
float& OutLinTLinReply::c4()
{
    return m_c4;
}


/*!
 * @brief This function sets a value in member c6
 * @param _c6 New value for member c6
 */
void OutLinTLinReply::c6(
        float _c6)
{
    m_c6 = _c6;
}

/*!
 * @brief This function returns the value of member c6
 * @return Value of member c6
 */
float OutLinTLinReply::c6() const
{
    return m_c6;
}

/*!
 * @brief This function returns a reference to member c6
 * @return Reference to member c6
 */
float& OutLinTLinReply::c6()
{
    return m_c6;
}




OutQuadTLinRequest::OutQuadTLinRequest()
{
}

OutQuadTLinRequest::~OutQuadTLinRequest()
{
}

OutQuadTLinRequest::OutQuadTLinRequest(
        const OutQuadTLinRequest& x)
{
    m_zp1m = x.m_zp1m;
    m_zp2m = x.m_zp2m;
    m_zp3m = x.m_zp3m;
    m_zp1u = x.m_zp1u;
    m_zp2u = x.m_zp2u;
    m_a = x.m_a;
    m_b = x.m_b;
    m_m = x.m_m;
    m_ztMed = x.m_ztMed;
    m_ztUpp = x.m_ztUpp;
    m_adcReso = x.m_adcReso;
}

OutQuadTLinRequest::OutQuadTLinRequest(
        OutQuadTLinRequest&& x) noexcept
{
    m_zp1m = x.m_zp1m;
    m_zp2m = x.m_zp2m;
    m_zp3m = x.m_zp3m;
    m_zp1u = x.m_zp1u;
    m_zp2u = x.m_zp2u;
    m_a = x.m_a;
    m_b = x.m_b;
    m_m = x.m_m;
    m_ztMed = x.m_ztMed;
    m_ztUpp = x.m_ztUpp;
    m_adcReso = x.m_adcReso;
}

OutQuadTLinRequest& OutQuadTLinRequest::operator =(
        const OutQuadTLinRequest& x)
{

    m_zp1m = x.m_zp1m;
    m_zp2m = x.m_zp2m;
    m_zp3m = x.m_zp3m;
    m_zp1u = x.m_zp1u;
    m_zp2u = x.m_zp2u;
    m_a = x.m_a;
    m_b = x.m_b;
    m_m = x.m_m;
    m_ztMed = x.m_ztMed;
    m_ztUpp = x.m_ztUpp;
    m_adcReso = x.m_adcReso;
    return *this;
}

OutQuadTLinRequest& OutQuadTLinRequest::operator =(
        OutQuadTLinRequest&& x) noexcept
{

    m_zp1m = x.m_zp1m;
    m_zp2m = x.m_zp2m;
    m_zp3m = x.m_zp3m;
    m_zp1u = x.m_zp1u;
    m_zp2u = x.m_zp2u;
    m_a = x.m_a;
    m_b = x.m_b;
    m_m = x.m_m;
    m_ztMed = x.m_ztMed;
    m_ztUpp = x.m_ztUpp;
    m_adcReso = x.m_adcReso;
    return *this;
}

bool OutQuadTLinRequest::operator ==(
        const OutQuadTLinRequest& x) const
{
    return (m_zp1m == x.m_zp1m &&
           m_zp2m == x.m_zp2m &&
           m_zp3m == x.m_zp3m &&
           m_zp1u == x.m_zp1u &&
           m_zp2u == x.m_zp2u &&
           m_a == x.m_a &&
           m_b == x.m_b &&
           m_m == x.m_m &&
           m_ztMed == x.m_ztMed &&
           m_ztUpp == x.m_ztUpp &&
           m_adcReso == x.m_adcReso);
}

bool OutQuadTLinRequest::operator !=(
        const OutQuadTLinRequest& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member zp1m
 * @param _zp1m New value for member zp1m
 */
void OutQuadTLinRequest::zp1m(
        float _zp1m)
{
    m_zp1m = _zp1m;
}

/*!
 * @brief This function returns the value of member zp1m
 * @return Value of member zp1m
 */
float OutQuadTLinRequest::zp1m() const
{
    return m_zp1m;
}

/*!
 * @brief This function returns a reference to member zp1m
 * @return Reference to member zp1m
 */
float& OutQuadTLinRequest::zp1m()
{
    return m_zp1m;
}


/*!
 * @brief This function sets a value in member zp2m
 * @param _zp2m New value for member zp2m
 */
void OutQuadTLinRequest::zp2m(
        float _zp2m)
{
    m_zp2m = _zp2m;
}

/*!
 * @brief This function returns the value of member zp2m
 * @return Value of member zp2m
 */
float OutQuadTLinRequest::zp2m() const
{
    return m_zp2m;
}

/*!
 * @brief This function returns a reference to member zp2m
 * @return Reference to member zp2m
 */
float& OutQuadTLinRequest::zp2m()
{
    return m_zp2m;
}


/*!
 * @brief This function sets a value in member zp3m
 * @param _zp3m New value for member zp3m
 */
void OutQuadTLinRequest::zp3m(
        float _zp3m)
{
    m_zp3m = _zp3m;
}

/*!
 * @brief This function returns the value of member zp3m
 * @return Value of member zp3m
 */
float OutQuadTLinRequest::zp3m() const
{
    return m_zp3m;
}

/*!
 * @brief This function returns a reference to member zp3m
 * @return Reference to member zp3m
 */
float& OutQuadTLinRequest::zp3m()
{
    return m_zp3m;
}


/*!
 * @brief This function sets a value in member zp1u
 * @param _zp1u New value for member zp1u
 */
void OutQuadTLinRequest::zp1u(
        float _zp1u)
{
    m_zp1u = _zp1u;
}

/*!
 * @brief This function returns the value of member zp1u
 * @return Value of member zp1u
 */
float OutQuadTLinRequest::zp1u() const
{
    return m_zp1u;
}

/*!
 * @brief This function returns a reference to member zp1u
 * @return Reference to member zp1u
 */
float& OutQuadTLinRequest::zp1u()
{
    return m_zp1u;
}


/*!
 * @brief This function sets a value in member zp2u
 * @param _zp2u New value for member zp2u
 */
void OutQuadTLinRequest::zp2u(
        float _zp2u)
{
    m_zp2u = _zp2u;
}

/*!
 * @brief This function returns the value of member zp2u
 * @return Value of member zp2u
 */
float OutQuadTLinRequest::zp2u() const
{
    return m_zp2u;
}

/*!
 * @brief This function returns a reference to member zp2u
 * @return Reference to member zp2u
 */
float& OutQuadTLinRequest::zp2u()
{
    return m_zp2u;
}


/*!
 * @brief This function sets a value in member a
 * @param _a New value for member a
 */
void OutQuadTLinRequest::a(
        float _a)
{
    m_a = _a;
}

/*!
 * @brief This function returns the value of member a
 * @return Value of member a
 */
float OutQuadTLinRequest::a() const
{
    return m_a;
}

/*!
 * @brief This function returns a reference to member a
 * @return Reference to member a
 */
float& OutQuadTLinRequest::a()
{
    return m_a;
}


/*!
 * @brief This function sets a value in member b
 * @param _b New value for member b
 */
void OutQuadTLinRequest::b(
        float _b)
{
    m_b = _b;
}

/*!
 * @brief This function returns the value of member b
 * @return Value of member b
 */
float OutQuadTLinRequest::b() const
{
    return m_b;
}

/*!
 * @brief This function returns a reference to member b
 * @return Reference to member b
 */
float& OutQuadTLinRequest::b()
{
    return m_b;
}


/*!
 * @brief This function sets a value in member m
 * @param _m New value for member m
 */
void OutQuadTLinRequest::m(
        float _m)
{
    m_m = _m;
}

/*!
 * @brief This function returns the value of member m
 * @return Value of member m
 */
float OutQuadTLinRequest::m() const
{
    return m_m;
}

/*!
 * @brief This function returns a reference to member m
 * @return Reference to member m
 */
float& OutQuadTLinRequest::m()
{
    return m_m;
}


/*!
 * @brief This function sets a value in member ztMed
 * @param _ztMed New value for member ztMed
 */
void OutQuadTLinRequest::ztMed(
        float _ztMed)
{
    m_ztMed = _ztMed;
}

/*!
 * @brief This function returns the value of member ztMed
 * @return Value of member ztMed
 */
float OutQuadTLinRequest::ztMed() const
{
    return m_ztMed;
}

/*!
 * @brief This function returns a reference to member ztMed
 * @return Reference to member ztMed
 */
float& OutQuadTLinRequest::ztMed()
{
    return m_ztMed;
}


/*!
 * @brief This function sets a value in member ztUpp
 * @param _ztUpp New value for member ztUpp
 */
void OutQuadTLinRequest::ztUpp(
        float _ztUpp)
{
    m_ztUpp = _ztUpp;
}

/*!
 * @brief This function returns the value of member ztUpp
 * @return Value of member ztUpp
 */
float OutQuadTLinRequest::ztUpp() const
{
    return m_ztUpp;
}

/*!
 * @brief This function returns a reference to member ztUpp
 * @return Reference to member ztUpp
 */
float& OutQuadTLinRequest::ztUpp()
{
    return m_ztUpp;
}


/*!
 * @brief This function sets a value in member adcReso
 * @param _adcReso New value for member adcReso
 */
void OutQuadTLinRequest::adcReso(
        int32_t _adcReso)
{
    m_adcReso = _adcReso;
}

/*!
 * @brief This function returns the value of member adcReso
 * @return Value of member adcReso
 */
int32_t OutQuadTLinRequest::adcReso() const
{
    return m_adcReso;
}

/*!
 * @brief This function returns a reference to member adcReso
 * @return Reference to member adcReso
 */
int32_t& OutQuadTLinRequest::adcReso()
{
    return m_adcReso;
}




OutQuadTLinReply::OutQuadTLinReply()
{
}

OutQuadTLinReply::~OutQuadTLinReply()
{
}

OutQuadTLinReply::OutQuadTLinReply(
        const OutQuadTLinReply& x)
{
    m_success = x.m_success;
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    m_c2 = x.m_c2;
    m_c4 = x.m_c4;
    m_c6 = x.m_c6;
}

OutQuadTLinReply::OutQuadTLinReply(
        OutQuadTLinReply&& x) noexcept
{
    m_success = x.m_success;
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    m_c2 = x.m_c2;
    m_c4 = x.m_c4;
    m_c6 = x.m_c6;
}

OutQuadTLinReply& OutQuadTLinReply::operator =(
        const OutQuadTLinReply& x)
{

    m_success = x.m_success;
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    m_c2 = x.m_c2;
    m_c4 = x.m_c4;
    m_c6 = x.m_c6;
    return *this;
}

OutQuadTLinReply& OutQuadTLinReply::operator =(
        OutQuadTLinReply&& x) noexcept
{

    m_success = x.m_success;
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    m_c2 = x.m_c2;
    m_c4 = x.m_c4;
    m_c6 = x.m_c6;
    return *this;
}

bool OutQuadTLinReply::operator ==(
        const OutQuadTLinReply& x) const
{
    return (m_success == x.m_success &&
           m_c0 == x.m_c0 &&
           m_c1 == x.m_c1 &&
           m_c2 == x.m_c2 &&
           m_c4 == x.m_c4 &&
           m_c6 == x.m_c6);
}

bool OutQuadTLinReply::operator !=(
        const OutQuadTLinReply& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member success
 * @param _success New value for member success
 */
void OutQuadTLinReply::success(
        bool _success)
{
    m_success = _success;
}

/*!
 * @brief This function returns the value of member success
 * @return Value of member success
 */
bool OutQuadTLinReply::success() const
{
    return m_success;
}

/*!
 * @brief This function returns a reference to member success
 * @return Reference to member success
 */
bool& OutQuadTLinReply::success()
{
    return m_success;
}


/*!
 * @brief This function sets a value in member c0
 * @param _c0 New value for member c0
 */
void OutQuadTLinReply::c0(
        float _c0)
{
    m_c0 = _c0;
}

/*!
 * @brief This function returns the value of member c0
 * @return Value of member c0
 */
float OutQuadTLinReply::c0() const
{
    return m_c0;
}

/*!
 * @brief This function returns a reference to member c0
 * @return Reference to member c0
 */
float& OutQuadTLinReply::c0()
{
    return m_c0;
}


/*!
 * @brief This function sets a value in member c1
 * @param _c1 New value for member c1
 */
void OutQuadTLinReply::c1(
        float _c1)
{
    m_c1 = _c1;
}

/*!
 * @brief This function returns the value of member c1
 * @return Value of member c1
 */
float OutQuadTLinReply::c1() const
{
    return m_c1;
}

/*!
 * @brief This function returns a reference to member c1
 * @return Reference to member c1
 */
float& OutQuadTLinReply::c1()
{
    return m_c1;
}


/*!
 * @brief This function sets a value in member c2
 * @param _c2 New value for member c2
 */
void OutQuadTLinReply::c2(
        float _c2)
{
    m_c2 = _c2;
}

/*!
 * @brief This function returns the value of member c2
 * @return Value of member c2
 */
float OutQuadTLinReply::c2() const
{
    return m_c2;
}

/*!
 * @brief This function returns a reference to member c2
 * @return Reference to member c2
 */
float& OutQuadTLinReply::c2()
{
    return m_c2;
}


/*!
 * @brief This function sets a value in member c4
 * @param _c4 New value for member c4
 */
void OutQuadTLinReply::c4(
        float _c4)
{
    m_c4 = _c4;
}

/*!
 * @brief This function returns the value of member c4
 * @return Value of member c4
 */
float OutQuadTLinReply::c4() const
{
    return m_c4;
}

/*!
 * @brief This function returns a reference to member c4
 * @return Reference to member c4
 */
float& OutQuadTLinReply::c4()
{
    return m_c4;
}


/*!
 * @brief This function sets a value in member c6
 * @param _c6 New value for member c6
 */
void OutQuadTLinReply::c6(
        float _c6)
{
    m_c6 = _c6;
}

/*!
 * @brief This function returns the value of member c6
 * @return Value of member c6
 */
float OutQuadTLinReply::c6() const
{
    return m_c6;
}

/*!
 * @brief This function returns a reference to member c6
 * @return Reference to member c6
 */
float& OutQuadTLinReply::c6()
{
    return m_c6;
}




OutLinTQuadRequest::OutLinTQuadRequest()
{
}

OutLinTQuadRequest::~OutLinTQuadRequest()
{
}

OutLinTQuadRequest::OutLinTQuadRequest(
        const OutLinTQuadRequest& x)
{
    m_zp1m = x.m_zp1m;
    m_zp2m = x.m_zp2m;
    m_zp1u = x.m_zp1u;
    m_zp2u = x.m_zp2u;
    m_zp1l = x.m_zp1l;
    m_zp2l = x.m_zp2l;
    m_a = x.m_a;
    m_b = x.m_b;
    m_ztMed = x.m_ztMed;
    m_ztUpp = x.m_ztUpp;
    m_ztLow = x.m_ztLow;
    m_adcReso = x.m_adcReso;
}

OutLinTQuadRequest::OutLinTQuadRequest(
        OutLinTQuadRequest&& x) noexcept
{
    m_zp1m = x.m_zp1m;
    m_zp2m = x.m_zp2m;
    m_zp1u = x.m_zp1u;
    m_zp2u = x.m_zp2u;
    m_zp1l = x.m_zp1l;
    m_zp2l = x.m_zp2l;
    m_a = x.m_a;
    m_b = x.m_b;
    m_ztMed = x.m_ztMed;
    m_ztUpp = x.m_ztUpp;
    m_ztLow = x.m_ztLow;
    m_adcReso = x.m_adcReso;
}

OutLinTQuadRequest& OutLinTQuadRequest::operator =(
        const OutLinTQuadRequest& x)
{

    m_zp1m = x.m_zp1m;
    m_zp2m = x.m_zp2m;
    m_zp1u = x.m_zp1u;
    m_zp2u = x.m_zp2u;
    m_zp1l = x.m_zp1l;
    m_zp2l = x.m_zp2l;
    m_a = x.m_a;
    m_b = x.m_b;
    m_ztMed = x.m_ztMed;
    m_ztUpp = x.m_ztUpp;
    m_ztLow = x.m_ztLow;
    m_adcReso = x.m_adcReso;
    return *this;
}

OutLinTQuadRequest& OutLinTQuadRequest::operator =(
        OutLinTQuadRequest&& x) noexcept
{

    m_zp1m = x.m_zp1m;
    m_zp2m = x.m_zp2m;
    m_zp1u = x.m_zp1u;
    m_zp2u = x.m_zp2u;
    m_zp1l = x.m_zp1l;
    m_zp2l = x.m_zp2l;
    m_a = x.m_a;
    m_b = x.m_b;
    m_ztMed = x.m_ztMed;
    m_ztUpp = x.m_ztUpp;
    m_ztLow = x.m_ztLow;
    m_adcReso = x.m_adcReso;
    return *this;
}

bool OutLinTQuadRequest::operator ==(
        const OutLinTQuadRequest& x) const
{
    return (m_zp1m == x.m_zp1m &&
           m_zp2m == x.m_zp2m &&
           m_zp1u == x.m_zp1u &&
           m_zp2u == x.m_zp2u &&
           m_zp1l == x.m_zp1l &&
           m_zp2l == x.m_zp2l &&
           m_a == x.m_a &&
           m_b == x.m_b &&
           m_ztMed == x.m_ztMed &&
           m_ztUpp == x.m_ztUpp &&
           m_ztLow == x.m_ztLow &&
           m_adcReso == x.m_adcReso);
}

bool OutLinTQuadRequest::operator !=(
        const OutLinTQuadRequest& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member zp1m
 * @param _zp1m New value for member zp1m
 */
void OutLinTQuadRequest::zp1m(
        float _zp1m)
{
    m_zp1m = _zp1m;
}

/*!
 * @brief This function returns the value of member zp1m
 * @return Value of member zp1m
 */
float OutLinTQuadRequest::zp1m() const
{
    return m_zp1m;
}

/*!
 * @brief This function returns a reference to member zp1m
 * @return Reference to member zp1m
 */
float& OutLinTQuadRequest::zp1m()
{
    return m_zp1m;
}


/*!
 * @brief This function sets a value in member zp2m
 * @param _zp2m New value for member zp2m
 */
void OutLinTQuadRequest::zp2m(
        float _zp2m)
{
    m_zp2m = _zp2m;
}

/*!
 * @brief This function returns the value of member zp2m
 * @return Value of member zp2m
 */
float OutLinTQuadRequest::zp2m() const
{
    return m_zp2m;
}

/*!
 * @brief This function returns a reference to member zp2m
 * @return Reference to member zp2m
 */
float& OutLinTQuadRequest::zp2m()
{
    return m_zp2m;
}


/*!
 * @brief This function sets a value in member zp1u
 * @param _zp1u New value for member zp1u
 */
void OutLinTQuadRequest::zp1u(
        float _zp1u)
{
    m_zp1u = _zp1u;
}

/*!
 * @brief This function returns the value of member zp1u
 * @return Value of member zp1u
 */
float OutLinTQuadRequest::zp1u() const
{
    return m_zp1u;
}

/*!
 * @brief This function returns a reference to member zp1u
 * @return Reference to member zp1u
 */
float& OutLinTQuadRequest::zp1u()
{
    return m_zp1u;
}


/*!
 * @brief This function sets a value in member zp2u
 * @param _zp2u New value for member zp2u
 */
void OutLinTQuadRequest::zp2u(
        float _zp2u)
{
    m_zp2u = _zp2u;
}

/*!
 * @brief This function returns the value of member zp2u
 * @return Value of member zp2u
 */
float OutLinTQuadRequest::zp2u() const
{
    return m_zp2u;
}

/*!
 * @brief This function returns a reference to member zp2u
 * @return Reference to member zp2u
 */
float& OutLinTQuadRequest::zp2u()
{
    return m_zp2u;
}


/*!
 * @brief This function sets a value in member zp1l
 * @param _zp1l New value for member zp1l
 */
void OutLinTQuadRequest::zp1l(
        float _zp1l)
{
    m_zp1l = _zp1l;
}

/*!
 * @brief This function returns the value of member zp1l
 * @return Value of member zp1l
 */
float OutLinTQuadRequest::zp1l() const
{
    return m_zp1l;
}

/*!
 * @brief This function returns a reference to member zp1l
 * @return Reference to member zp1l
 */
float& OutLinTQuadRequest::zp1l()
{
    return m_zp1l;
}


/*!
 * @brief This function sets a value in member zp2l
 * @param _zp2l New value for member zp2l
 */
void OutLinTQuadRequest::zp2l(
        float _zp2l)
{
    m_zp2l = _zp2l;
}

/*!
 * @brief This function returns the value of member zp2l
 * @return Value of member zp2l
 */
float OutLinTQuadRequest::zp2l() const
{
    return m_zp2l;
}

/*!
 * @brief This function returns a reference to member zp2l
 * @return Reference to member zp2l
 */
float& OutLinTQuadRequest::zp2l()
{
    return m_zp2l;
}


/*!
 * @brief This function sets a value in member a
 * @param _a New value for member a
 */
void OutLinTQuadRequest::a(
        float _a)
{
    m_a = _a;
}

/*!
 * @brief This function returns the value of member a
 * @return Value of member a
 */
float OutLinTQuadRequest::a() const
{
    return m_a;
}

/*!
 * @brief This function returns a reference to member a
 * @return Reference to member a
 */
float& OutLinTQuadRequest::a()
{
    return m_a;
}


/*!
 * @brief This function sets a value in member b
 * @param _b New value for member b
 */
void OutLinTQuadRequest::b(
        float _b)
{
    m_b = _b;
}

/*!
 * @brief This function returns the value of member b
 * @return Value of member b
 */
float OutLinTQuadRequest::b() const
{
    return m_b;
}

/*!
 * @brief This function returns a reference to member b
 * @return Reference to member b
 */
float& OutLinTQuadRequest::b()
{
    return m_b;
}


/*!
 * @brief This function sets a value in member ztMed
 * @param _ztMed New value for member ztMed
 */
void OutLinTQuadRequest::ztMed(
        float _ztMed)
{
    m_ztMed = _ztMed;
}

/*!
 * @brief This function returns the value of member ztMed
 * @return Value of member ztMed
 */
float OutLinTQuadRequest::ztMed() const
{
    return m_ztMed;
}

/*!
 * @brief This function returns a reference to member ztMed
 * @return Reference to member ztMed
 */
float& OutLinTQuadRequest::ztMed()
{
    return m_ztMed;
}


/*!
 * @brief This function sets a value in member ztUpp
 * @param _ztUpp New value for member ztUpp
 */
void OutLinTQuadRequest::ztUpp(
        float _ztUpp)
{
    m_ztUpp = _ztUpp;
}

/*!
 * @brief This function returns the value of member ztUpp
 * @return Value of member ztUpp
 */
float OutLinTQuadRequest::ztUpp() const
{
    return m_ztUpp;
}

/*!
 * @brief This function returns a reference to member ztUpp
 * @return Reference to member ztUpp
 */
float& OutLinTQuadRequest::ztUpp()
{
    return m_ztUpp;
}


/*!
 * @brief This function sets a value in member ztLow
 * @param _ztLow New value for member ztLow
 */
void OutLinTQuadRequest::ztLow(
        float _ztLow)
{
    m_ztLow = _ztLow;
}

/*!
 * @brief This function returns the value of member ztLow
 * @return Value of member ztLow
 */
float OutLinTQuadRequest::ztLow() const
{
    return m_ztLow;
}

/*!
 * @brief This function returns a reference to member ztLow
 * @return Reference to member ztLow
 */
float& OutLinTQuadRequest::ztLow()
{
    return m_ztLow;
}


/*!
 * @brief This function sets a value in member adcReso
 * @param _adcReso New value for member adcReso
 */
void OutLinTQuadRequest::adcReso(
        int32_t _adcReso)
{
    m_adcReso = _adcReso;
}

/*!
 * @brief This function returns the value of member adcReso
 * @return Value of member adcReso
 */
int32_t OutLinTQuadRequest::adcReso() const
{
    return m_adcReso;
}

/*!
 * @brief This function returns a reference to member adcReso
 * @return Reference to member adcReso
 */
int32_t& OutLinTQuadRequest::adcReso()
{
    return m_adcReso;
}




OutLinTQuadReply::OutLinTQuadReply()
{
}

OutLinTQuadReply::~OutLinTQuadReply()
{
}

OutLinTQuadReply::OutLinTQuadReply(
        const OutLinTQuadReply& x)
{
    m_success = x.m_success;
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    m_c4 = x.m_c4;
    m_c6 = x.m_c6;
    m_c5 = x.m_c5;
    m_c7 = x.m_c7;
}

OutLinTQuadReply::OutLinTQuadReply(
        OutLinTQuadReply&& x) noexcept
{
    m_success = x.m_success;
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    m_c4 = x.m_c4;
    m_c6 = x.m_c6;
    m_c5 = x.m_c5;
    m_c7 = x.m_c7;
}

OutLinTQuadReply& OutLinTQuadReply::operator =(
        const OutLinTQuadReply& x)
{

    m_success = x.m_success;
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    m_c4 = x.m_c4;
    m_c6 = x.m_c6;
    m_c5 = x.m_c5;
    m_c7 = x.m_c7;
    return *this;
}

OutLinTQuadReply& OutLinTQuadReply::operator =(
        OutLinTQuadReply&& x) noexcept
{

    m_success = x.m_success;
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    m_c4 = x.m_c4;
    m_c6 = x.m_c6;
    m_c5 = x.m_c5;
    m_c7 = x.m_c7;
    return *this;
}

bool OutLinTQuadReply::operator ==(
        const OutLinTQuadReply& x) const
{
    return (m_success == x.m_success &&
           m_c0 == x.m_c0 &&
           m_c1 == x.m_c1 &&
           m_c4 == x.m_c4 &&
           m_c6 == x.m_c6 &&
           m_c5 == x.m_c5 &&
           m_c7 == x.m_c7);
}

bool OutLinTQuadReply::operator !=(
        const OutLinTQuadReply& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member success
 * @param _success New value for member success
 */
void OutLinTQuadReply::success(
        bool _success)
{
    m_success = _success;
}

/*!
 * @brief This function returns the value of member success
 * @return Value of member success
 */
bool OutLinTQuadReply::success() const
{
    return m_success;
}

/*!
 * @brief This function returns a reference to member success
 * @return Reference to member success
 */
bool& OutLinTQuadReply::success()
{
    return m_success;
}


/*!
 * @brief This function sets a value in member c0
 * @param _c0 New value for member c0
 */
void OutLinTQuadReply::c0(
        float _c0)
{
    m_c0 = _c0;
}

/*!
 * @brief This function returns the value of member c0
 * @return Value of member c0
 */
float OutLinTQuadReply::c0() const
{
    return m_c0;
}

/*!
 * @brief This function returns a reference to member c0
 * @return Reference to member c0
 */
float& OutLinTQuadReply::c0()
{
    return m_c0;
}


/*!
 * @brief This function sets a value in member c1
 * @param _c1 New value for member c1
 */
void OutLinTQuadReply::c1(
        float _c1)
{
    m_c1 = _c1;
}

/*!
 * @brief This function returns the value of member c1
 * @return Value of member c1
 */
float OutLinTQuadReply::c1() const
{
    return m_c1;
}

/*!
 * @brief This function returns a reference to member c1
 * @return Reference to member c1
 */
float& OutLinTQuadReply::c1()
{
    return m_c1;
}


/*!
 * @brief This function sets a value in member c4
 * @param _c4 New value for member c4
 */
void OutLinTQuadReply::c4(
        float _c4)
{
    m_c4 = _c4;
}

/*!
 * @brief This function returns the value of member c4
 * @return Value of member c4
 */
float OutLinTQuadReply::c4() const
{
    return m_c4;
}

/*!
 * @brief This function returns a reference to member c4
 * @return Reference to member c4
 */
float& OutLinTQuadReply::c4()
{
    return m_c4;
}


/*!
 * @brief This function sets a value in member c6
 * @param _c6 New value for member c6
 */
void OutLinTQuadReply::c6(
        float _c6)
{
    m_c6 = _c6;
}

/*!
 * @brief This function returns the value of member c6
 * @return Value of member c6
 */
float OutLinTQuadReply::c6() const
{
    return m_c6;
}

/*!
 * @brief This function returns a reference to member c6
 * @return Reference to member c6
 */
float& OutLinTQuadReply::c6()
{
    return m_c6;
}


/*!
 * @brief This function sets a value in member c5
 * @param _c5 New value for member c5
 */
void OutLinTQuadReply::c5(
        float _c5)
{
    m_c5 = _c5;
}

/*!
 * @brief This function returns the value of member c5
 * @return Value of member c5
 */
float OutLinTQuadReply::c5() const
{
    return m_c5;
}

/*!
 * @brief This function returns a reference to member c5
 * @return Reference to member c5
 */
float& OutLinTQuadReply::c5()
{
    return m_c5;
}


/*!
 * @brief This function sets a value in member c7
 * @param _c7 New value for member c7
 */
void OutLinTQuadReply::c7(
        float _c7)
{
    m_c7 = _c7;
}

/*!
 * @brief This function returns the value of member c7
 * @return Value of member c7
 */
float OutLinTQuadReply::c7() const
{
    return m_c7;
}

/*!
 * @brief This function returns a reference to member c7
 * @return Reference to member c7
 */
float& OutLinTQuadReply::c7()
{
    return m_c7;
}




OutQuadTQuadRequest::OutQuadTQuadRequest()
{
}

OutQuadTQuadRequest::~OutQuadTQuadRequest()
{
}

OutQuadTQuadRequest::OutQuadTQuadRequest(
        const OutQuadTQuadRequest& x)
{
    m_zp1m = x.m_zp1m;
    m_zp2m = x.m_zp2m;
    m_zp3m = x.m_zp3m;
    m_zp1u = x.m_zp1u;
    m_zp2u = x.m_zp2u;
    m_zp1l = x.m_zp1l;
    m_zp2l = x.m_zp2l;
    m_a = x.m_a;
    m_b = x.m_b;
    m_m = x.m_m;
    m_ztMed = x.m_ztMed;
    m_ztUpp = x.m_ztUpp;
    m_ztLow = x.m_ztLow;
    m_adcReso = x.m_adcReso;
}

OutQuadTQuadRequest::OutQuadTQuadRequest(
        OutQuadTQuadRequest&& x) noexcept
{
    m_zp1m = x.m_zp1m;
    m_zp2m = x.m_zp2m;
    m_zp3m = x.m_zp3m;
    m_zp1u = x.m_zp1u;
    m_zp2u = x.m_zp2u;
    m_zp1l = x.m_zp1l;
    m_zp2l = x.m_zp2l;
    m_a = x.m_a;
    m_b = x.m_b;
    m_m = x.m_m;
    m_ztMed = x.m_ztMed;
    m_ztUpp = x.m_ztUpp;
    m_ztLow = x.m_ztLow;
    m_adcReso = x.m_adcReso;
}

OutQuadTQuadRequest& OutQuadTQuadRequest::operator =(
        const OutQuadTQuadRequest& x)
{

    m_zp1m = x.m_zp1m;
    m_zp2m = x.m_zp2m;
    m_zp3m = x.m_zp3m;
    m_zp1u = x.m_zp1u;
    m_zp2u = x.m_zp2u;
    m_zp1l = x.m_zp1l;
    m_zp2l = x.m_zp2l;
    m_a = x.m_a;
    m_b = x.m_b;
    m_m = x.m_m;
    m_ztMed = x.m_ztMed;
    m_ztUpp = x.m_ztUpp;
    m_ztLow = x.m_ztLow;
    m_adcReso = x.m_adcReso;
    return *this;
}

OutQuadTQuadRequest& OutQuadTQuadRequest::operator =(
        OutQuadTQuadRequest&& x) noexcept
{

    m_zp1m = x.m_zp1m;
    m_zp2m = x.m_zp2m;
    m_zp3m = x.m_zp3m;
    m_zp1u = x.m_zp1u;
    m_zp2u = x.m_zp2u;
    m_zp1l = x.m_zp1l;
    m_zp2l = x.m_zp2l;
    m_a = x.m_a;
    m_b = x.m_b;
    m_m = x.m_m;
    m_ztMed = x.m_ztMed;
    m_ztUpp = x.m_ztUpp;
    m_ztLow = x.m_ztLow;
    m_adcReso = x.m_adcReso;
    return *this;
}

bool OutQuadTQuadRequest::operator ==(
        const OutQuadTQuadRequest& x) const
{
    return (m_zp1m == x.m_zp1m &&
           m_zp2m == x.m_zp2m &&
           m_zp3m == x.m_zp3m &&
           m_zp1u == x.m_zp1u &&
           m_zp2u == x.m_zp2u &&
           m_zp1l == x.m_zp1l &&
           m_zp2l == x.m_zp2l &&
           m_a == x.m_a &&
           m_b == x.m_b &&
           m_m == x.m_m &&
           m_ztMed == x.m_ztMed &&
           m_ztUpp == x.m_ztUpp &&
           m_ztLow == x.m_ztLow &&
           m_adcReso == x.m_adcReso);
}

bool OutQuadTQuadRequest::operator !=(
        const OutQuadTQuadRequest& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member zp1m
 * @param _zp1m New value for member zp1m
 */
void OutQuadTQuadRequest::zp1m(
        float _zp1m)
{
    m_zp1m = _zp1m;
}

/*!
 * @brief This function returns the value of member zp1m
 * @return Value of member zp1m
 */
float OutQuadTQuadRequest::zp1m() const
{
    return m_zp1m;
}

/*!
 * @brief This function returns a reference to member zp1m
 * @return Reference to member zp1m
 */
float& OutQuadTQuadRequest::zp1m()
{
    return m_zp1m;
}


/*!
 * @brief This function sets a value in member zp2m
 * @param _zp2m New value for member zp2m
 */
void OutQuadTQuadRequest::zp2m(
        float _zp2m)
{
    m_zp2m = _zp2m;
}

/*!
 * @brief This function returns the value of member zp2m
 * @return Value of member zp2m
 */
float OutQuadTQuadRequest::zp2m() const
{
    return m_zp2m;
}

/*!
 * @brief This function returns a reference to member zp2m
 * @return Reference to member zp2m
 */
float& OutQuadTQuadRequest::zp2m()
{
    return m_zp2m;
}


/*!
 * @brief This function sets a value in member zp3m
 * @param _zp3m New value for member zp3m
 */
void OutQuadTQuadRequest::zp3m(
        float _zp3m)
{
    m_zp3m = _zp3m;
}

/*!
 * @brief This function returns the value of member zp3m
 * @return Value of member zp3m
 */
float OutQuadTQuadRequest::zp3m() const
{
    return m_zp3m;
}

/*!
 * @brief This function returns a reference to member zp3m
 * @return Reference to member zp3m
 */
float& OutQuadTQuadRequest::zp3m()
{
    return m_zp3m;
}


/*!
 * @brief This function sets a value in member zp1u
 * @param _zp1u New value for member zp1u
 */
void OutQuadTQuadRequest::zp1u(
        float _zp1u)
{
    m_zp1u = _zp1u;
}

/*!
 * @brief This function returns the value of member zp1u
 * @return Value of member zp1u
 */
float OutQuadTQuadRequest::zp1u() const
{
    return m_zp1u;
}

/*!
 * @brief This function returns a reference to member zp1u
 * @return Reference to member zp1u
 */
float& OutQuadTQuadRequest::zp1u()
{
    return m_zp1u;
}


/*!
 * @brief This function sets a value in member zp2u
 * @param _zp2u New value for member zp2u
 */
void OutQuadTQuadRequest::zp2u(
        float _zp2u)
{
    m_zp2u = _zp2u;
}

/*!
 * @brief This function returns the value of member zp2u
 * @return Value of member zp2u
 */
float OutQuadTQuadRequest::zp2u() const
{
    return m_zp2u;
}

/*!
 * @brief This function returns a reference to member zp2u
 * @return Reference to member zp2u
 */
float& OutQuadTQuadRequest::zp2u()
{
    return m_zp2u;
}


/*!
 * @brief This function sets a value in member zp1l
 * @param _zp1l New value for member zp1l
 */
void OutQuadTQuadRequest::zp1l(
        float _zp1l)
{
    m_zp1l = _zp1l;
}

/*!
 * @brief This function returns the value of member zp1l
 * @return Value of member zp1l
 */
float OutQuadTQuadRequest::zp1l() const
{
    return m_zp1l;
}

/*!
 * @brief This function returns a reference to member zp1l
 * @return Reference to member zp1l
 */
float& OutQuadTQuadRequest::zp1l()
{
    return m_zp1l;
}


/*!
 * @brief This function sets a value in member zp2l
 * @param _zp2l New value for member zp2l
 */
void OutQuadTQuadRequest::zp2l(
        float _zp2l)
{
    m_zp2l = _zp2l;
}

/*!
 * @brief This function returns the value of member zp2l
 * @return Value of member zp2l
 */
float OutQuadTQuadRequest::zp2l() const
{
    return m_zp2l;
}

/*!
 * @brief This function returns a reference to member zp2l
 * @return Reference to member zp2l
 */
float& OutQuadTQuadRequest::zp2l()
{
    return m_zp2l;
}


/*!
 * @brief This function sets a value in member a
 * @param _a New value for member a
 */
void OutQuadTQuadRequest::a(
        float _a)
{
    m_a = _a;
}

/*!
 * @brief This function returns the value of member a
 * @return Value of member a
 */
float OutQuadTQuadRequest::a() const
{
    return m_a;
}

/*!
 * @brief This function returns a reference to member a
 * @return Reference to member a
 */
float& OutQuadTQuadRequest::a()
{
    return m_a;
}


/*!
 * @brief This function sets a value in member b
 * @param _b New value for member b
 */
void OutQuadTQuadRequest::b(
        float _b)
{
    m_b = _b;
}

/*!
 * @brief This function returns the value of member b
 * @return Value of member b
 */
float OutQuadTQuadRequest::b() const
{
    return m_b;
}

/*!
 * @brief This function returns a reference to member b
 * @return Reference to member b
 */
float& OutQuadTQuadRequest::b()
{
    return m_b;
}


/*!
 * @brief This function sets a value in member m
 * @param _m New value for member m
 */
void OutQuadTQuadRequest::m(
        float _m)
{
    m_m = _m;
}

/*!
 * @brief This function returns the value of member m
 * @return Value of member m
 */
float OutQuadTQuadRequest::m() const
{
    return m_m;
}

/*!
 * @brief This function returns a reference to member m
 * @return Reference to member m
 */
float& OutQuadTQuadRequest::m()
{
    return m_m;
}


/*!
 * @brief This function sets a value in member ztMed
 * @param _ztMed New value for member ztMed
 */
void OutQuadTQuadRequest::ztMed(
        float _ztMed)
{
    m_ztMed = _ztMed;
}

/*!
 * @brief This function returns the value of member ztMed
 * @return Value of member ztMed
 */
float OutQuadTQuadRequest::ztMed() const
{
    return m_ztMed;
}

/*!
 * @brief This function returns a reference to member ztMed
 * @return Reference to member ztMed
 */
float& OutQuadTQuadRequest::ztMed()
{
    return m_ztMed;
}


/*!
 * @brief This function sets a value in member ztUpp
 * @param _ztUpp New value for member ztUpp
 */
void OutQuadTQuadRequest::ztUpp(
        float _ztUpp)
{
    m_ztUpp = _ztUpp;
}

/*!
 * @brief This function returns the value of member ztUpp
 * @return Value of member ztUpp
 */
float OutQuadTQuadRequest::ztUpp() const
{
    return m_ztUpp;
}

/*!
 * @brief This function returns a reference to member ztUpp
 * @return Reference to member ztUpp
 */
float& OutQuadTQuadRequest::ztUpp()
{
    return m_ztUpp;
}


/*!
 * @brief This function sets a value in member ztLow
 * @param _ztLow New value for member ztLow
 */
void OutQuadTQuadRequest::ztLow(
        float _ztLow)
{
    m_ztLow = _ztLow;
}

/*!
 * @brief This function returns the value of member ztLow
 * @return Value of member ztLow
 */
float OutQuadTQuadRequest::ztLow() const
{
    return m_ztLow;
}

/*!
 * @brief This function returns a reference to member ztLow
 * @return Reference to member ztLow
 */
float& OutQuadTQuadRequest::ztLow()
{
    return m_ztLow;
}


/*!
 * @brief This function sets a value in member adcReso
 * @param _adcReso New value for member adcReso
 */
void OutQuadTQuadRequest::adcReso(
        int32_t _adcReso)
{
    m_adcReso = _adcReso;
}

/*!
 * @brief This function returns the value of member adcReso
 * @return Value of member adcReso
 */
int32_t OutQuadTQuadRequest::adcReso() const
{
    return m_adcReso;
}

/*!
 * @brief This function returns a reference to member adcReso
 * @return Reference to member adcReso
 */
int32_t& OutQuadTQuadRequest::adcReso()
{
    return m_adcReso;
}




OutQuadTQuadReply::OutQuadTQuadReply()
{
}

OutQuadTQuadReply::~OutQuadTQuadReply()
{
}

OutQuadTQuadReply::OutQuadTQuadReply(
        const OutQuadTQuadReply& x)
{
    m_success = x.m_success;
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    m_c2 = x.m_c2;
    m_c4 = x.m_c4;
    m_c6 = x.m_c6;
    m_c5 = x.m_c5;
    m_c7 = x.m_c7;
}

OutQuadTQuadReply::OutQuadTQuadReply(
        OutQuadTQuadReply&& x) noexcept
{
    m_success = x.m_success;
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    m_c2 = x.m_c2;
    m_c4 = x.m_c4;
    m_c6 = x.m_c6;
    m_c5 = x.m_c5;
    m_c7 = x.m_c7;
}

OutQuadTQuadReply& OutQuadTQuadReply::operator =(
        const OutQuadTQuadReply& x)
{

    m_success = x.m_success;
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    m_c2 = x.m_c2;
    m_c4 = x.m_c4;
    m_c6 = x.m_c6;
    m_c5 = x.m_c5;
    m_c7 = x.m_c7;
    return *this;
}

OutQuadTQuadReply& OutQuadTQuadReply::operator =(
        OutQuadTQuadReply&& x) noexcept
{

    m_success = x.m_success;
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    m_c2 = x.m_c2;
    m_c4 = x.m_c4;
    m_c6 = x.m_c6;
    m_c5 = x.m_c5;
    m_c7 = x.m_c7;
    return *this;
}

bool OutQuadTQuadReply::operator ==(
        const OutQuadTQuadReply& x) const
{
    return (m_success == x.m_success &&
           m_c0 == x.m_c0 &&
           m_c1 == x.m_c1 &&
           m_c2 == x.m_c2 &&
           m_c4 == x.m_c4 &&
           m_c6 == x.m_c6 &&
           m_c5 == x.m_c5 &&
           m_c7 == x.m_c7);
}

bool OutQuadTQuadReply::operator !=(
        const OutQuadTQuadReply& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member success
 * @param _success New value for member success
 */
void OutQuadTQuadReply::success(
        bool _success)
{
    m_success = _success;
}

/*!
 * @brief This function returns the value of member success
 * @return Value of member success
 */
bool OutQuadTQuadReply::success() const
{
    return m_success;
}

/*!
 * @brief This function returns a reference to member success
 * @return Reference to member success
 */
bool& OutQuadTQuadReply::success()
{
    return m_success;
}


/*!
 * @brief This function sets a value in member c0
 * @param _c0 New value for member c0
 */
void OutQuadTQuadReply::c0(
        float _c0)
{
    m_c0 = _c0;
}

/*!
 * @brief This function returns the value of member c0
 * @return Value of member c0
 */
float OutQuadTQuadReply::c0() const
{
    return m_c0;
}

/*!
 * @brief This function returns a reference to member c0
 * @return Reference to member c0
 */
float& OutQuadTQuadReply::c0()
{
    return m_c0;
}


/*!
 * @brief This function sets a value in member c1
 * @param _c1 New value for member c1
 */
void OutQuadTQuadReply::c1(
        float _c1)
{
    m_c1 = _c1;
}

/*!
 * @brief This function returns the value of member c1
 * @return Value of member c1
 */
float OutQuadTQuadReply::c1() const
{
    return m_c1;
}

/*!
 * @brief This function returns a reference to member c1
 * @return Reference to member c1
 */
float& OutQuadTQuadReply::c1()
{
    return m_c1;
}


/*!
 * @brief This function sets a value in member c2
 * @param _c2 New value for member c2
 */
void OutQuadTQuadReply::c2(
        float _c2)
{
    m_c2 = _c2;
}

/*!
 * @brief This function returns the value of member c2
 * @return Value of member c2
 */
float OutQuadTQuadReply::c2() const
{
    return m_c2;
}

/*!
 * @brief This function returns a reference to member c2
 * @return Reference to member c2
 */
float& OutQuadTQuadReply::c2()
{
    return m_c2;
}


/*!
 * @brief This function sets a value in member c4
 * @param _c4 New value for member c4
 */
void OutQuadTQuadReply::c4(
        float _c4)
{
    m_c4 = _c4;
}

/*!
 * @brief This function returns the value of member c4
 * @return Value of member c4
 */
float OutQuadTQuadReply::c4() const
{
    return m_c4;
}

/*!
 * @brief This function returns a reference to member c4
 * @return Reference to member c4
 */
float& OutQuadTQuadReply::c4()
{
    return m_c4;
}


/*!
 * @brief This function sets a value in member c6
 * @param _c6 New value for member c6
 */
void OutQuadTQuadReply::c6(
        float _c6)
{
    m_c6 = _c6;
}

/*!
 * @brief This function returns the value of member c6
 * @return Value of member c6
 */
float OutQuadTQuadReply::c6() const
{
    return m_c6;
}

/*!
 * @brief This function returns a reference to member c6
 * @return Reference to member c6
 */
float& OutQuadTQuadReply::c6()
{
    return m_c6;
}


/*!
 * @brief This function sets a value in member c5
 * @param _c5 New value for member c5
 */
void OutQuadTQuadReply::c5(
        float _c5)
{
    m_c5 = _c5;
}

/*!
 * @brief This function returns the value of member c5
 * @return Value of member c5
 */
float OutQuadTQuadReply::c5() const
{
    return m_c5;
}

/*!
 * @brief This function returns a reference to member c5
 * @return Reference to member c5
 */
float& OutQuadTQuadReply::c5()
{
    return m_c5;
}


/*!
 * @brief This function sets a value in member c7
 * @param _c7 New value for member c7
 */
void OutQuadTQuadReply::c7(
        float _c7)
{
    m_c7 = _c7;
}

/*!
 * @brief This function returns the value of member c7
 * @return Value of member c7
 */
float OutQuadTQuadReply::c7() const
{
    return m_c7;
}

/*!
 * @brief This function returns a reference to member c7
 * @return Reference to member c7
 */
float& OutQuadTQuadReply::c7()
{
    return m_c7;
}




ZMD31050Cal1Request::ZMD31050Cal1Request()
{
}

ZMD31050Cal1Request::~ZMD31050Cal1Request()
{
}

ZMD31050Cal1Request::ZMD31050Cal1Request(
        const ZMD31050Cal1Request& x)
{
    m_zp1m = x.m_zp1m;
    m_zp2m = x.m_zp2m;
    m_zp3m = x.m_zp3m;
    m_zp4m = x.m_zp4m;
    m_zp1u = x.m_zp1u;
    m_zp2u = x.m_zp2u;
    m_zp1l = x.m_zp1l;
    m_zp2l = x.m_zp2l;
    m_a = x.m_a;
    m_b = x.m_b;
    m_m = x.m_m;
    m_m2 = x.m_m2;
    m_ztMed = x.m_ztMed;
    m_ztUpp = x.m_ztUpp;
    m_ztLow = x.m_ztLow;
    m_adcReso = x.m_adcReso;
}

ZMD31050Cal1Request::ZMD31050Cal1Request(
        ZMD31050Cal1Request&& x) noexcept
{
    m_zp1m = x.m_zp1m;
    m_zp2m = x.m_zp2m;
    m_zp3m = x.m_zp3m;
    m_zp4m = x.m_zp4m;
    m_zp1u = x.m_zp1u;
    m_zp2u = x.m_zp2u;
    m_zp1l = x.m_zp1l;
    m_zp2l = x.m_zp2l;
    m_a = x.m_a;
    m_b = x.m_b;
    m_m = x.m_m;
    m_m2 = x.m_m2;
    m_ztMed = x.m_ztMed;
    m_ztUpp = x.m_ztUpp;
    m_ztLow = x.m_ztLow;
    m_adcReso = x.m_adcReso;
}

ZMD31050Cal1Request& ZMD31050Cal1Request::operator =(
        const ZMD31050Cal1Request& x)
{

    m_zp1m = x.m_zp1m;
    m_zp2m = x.m_zp2m;
    m_zp3m = x.m_zp3m;
    m_zp4m = x.m_zp4m;
    m_zp1u = x.m_zp1u;
    m_zp2u = x.m_zp2u;
    m_zp1l = x.m_zp1l;
    m_zp2l = x.m_zp2l;
    m_a = x.m_a;
    m_b = x.m_b;
    m_m = x.m_m;
    m_m2 = x.m_m2;
    m_ztMed = x.m_ztMed;
    m_ztUpp = x.m_ztUpp;
    m_ztLow = x.m_ztLow;
    m_adcReso = x.m_adcReso;
    return *this;
}

ZMD31050Cal1Request& ZMD31050Cal1Request::operator =(
        ZMD31050Cal1Request&& x) noexcept
{

    m_zp1m = x.m_zp1m;
    m_zp2m = x.m_zp2m;
    m_zp3m = x.m_zp3m;
    m_zp4m = x.m_zp4m;
    m_zp1u = x.m_zp1u;
    m_zp2u = x.m_zp2u;
    m_zp1l = x.m_zp1l;
    m_zp2l = x.m_zp2l;
    m_a = x.m_a;
    m_b = x.m_b;
    m_m = x.m_m;
    m_m2 = x.m_m2;
    m_ztMed = x.m_ztMed;
    m_ztUpp = x.m_ztUpp;
    m_ztLow = x.m_ztLow;
    m_adcReso = x.m_adcReso;
    return *this;
}

bool ZMD31050Cal1Request::operator ==(
        const ZMD31050Cal1Request& x) const
{
    return (m_zp1m == x.m_zp1m &&
           m_zp2m == x.m_zp2m &&
           m_zp3m == x.m_zp3m &&
           m_zp4m == x.m_zp4m &&
           m_zp1u == x.m_zp1u &&
           m_zp2u == x.m_zp2u &&
           m_zp1l == x.m_zp1l &&
           m_zp2l == x.m_zp2l &&
           m_a == x.m_a &&
           m_b == x.m_b &&
           m_m == x.m_m &&
           m_m2 == x.m_m2 &&
           m_ztMed == x.m_ztMed &&
           m_ztUpp == x.m_ztUpp &&
           m_ztLow == x.m_ztLow &&
           m_adcReso == x.m_adcReso);
}

bool ZMD31050Cal1Request::operator !=(
        const ZMD31050Cal1Request& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member zp1m
 * @param _zp1m New value for member zp1m
 */
void ZMD31050Cal1Request::zp1m(
        float _zp1m)
{
    m_zp1m = _zp1m;
}

/*!
 * @brief This function returns the value of member zp1m
 * @return Value of member zp1m
 */
float ZMD31050Cal1Request::zp1m() const
{
    return m_zp1m;
}

/*!
 * @brief This function returns a reference to member zp1m
 * @return Reference to member zp1m
 */
float& ZMD31050Cal1Request::zp1m()
{
    return m_zp1m;
}


/*!
 * @brief This function sets a value in member zp2m
 * @param _zp2m New value for member zp2m
 */
void ZMD31050Cal1Request::zp2m(
        float _zp2m)
{
    m_zp2m = _zp2m;
}

/*!
 * @brief This function returns the value of member zp2m
 * @return Value of member zp2m
 */
float ZMD31050Cal1Request::zp2m() const
{
    return m_zp2m;
}

/*!
 * @brief This function returns a reference to member zp2m
 * @return Reference to member zp2m
 */
float& ZMD31050Cal1Request::zp2m()
{
    return m_zp2m;
}


/*!
 * @brief This function sets a value in member zp3m
 * @param _zp3m New value for member zp3m
 */
void ZMD31050Cal1Request::zp3m(
        float _zp3m)
{
    m_zp3m = _zp3m;
}

/*!
 * @brief This function returns the value of member zp3m
 * @return Value of member zp3m
 */
float ZMD31050Cal1Request::zp3m() const
{
    return m_zp3m;
}

/*!
 * @brief This function returns a reference to member zp3m
 * @return Reference to member zp3m
 */
float& ZMD31050Cal1Request::zp3m()
{
    return m_zp3m;
}


/*!
 * @brief This function sets a value in member zp4m
 * @param _zp4m New value for member zp4m
 */
void ZMD31050Cal1Request::zp4m(
        float _zp4m)
{
    m_zp4m = _zp4m;
}

/*!
 * @brief This function returns the value of member zp4m
 * @return Value of member zp4m
 */
float ZMD31050Cal1Request::zp4m() const
{
    return m_zp4m;
}

/*!
 * @brief This function returns a reference to member zp4m
 * @return Reference to member zp4m
 */
float& ZMD31050Cal1Request::zp4m()
{
    return m_zp4m;
}


/*!
 * @brief This function sets a value in member zp1u
 * @param _zp1u New value for member zp1u
 */
void ZMD31050Cal1Request::zp1u(
        float _zp1u)
{
    m_zp1u = _zp1u;
}

/*!
 * @brief This function returns the value of member zp1u
 * @return Value of member zp1u
 */
float ZMD31050Cal1Request::zp1u() const
{
    return m_zp1u;
}

/*!
 * @brief This function returns a reference to member zp1u
 * @return Reference to member zp1u
 */
float& ZMD31050Cal1Request::zp1u()
{
    return m_zp1u;
}


/*!
 * @brief This function sets a value in member zp2u
 * @param _zp2u New value for member zp2u
 */
void ZMD31050Cal1Request::zp2u(
        float _zp2u)
{
    m_zp2u = _zp2u;
}

/*!
 * @brief This function returns the value of member zp2u
 * @return Value of member zp2u
 */
float ZMD31050Cal1Request::zp2u() const
{
    return m_zp2u;
}

/*!
 * @brief This function returns a reference to member zp2u
 * @return Reference to member zp2u
 */
float& ZMD31050Cal1Request::zp2u()
{
    return m_zp2u;
}


/*!
 * @brief This function sets a value in member zp1l
 * @param _zp1l New value for member zp1l
 */
void ZMD31050Cal1Request::zp1l(
        float _zp1l)
{
    m_zp1l = _zp1l;
}

/*!
 * @brief This function returns the value of member zp1l
 * @return Value of member zp1l
 */
float ZMD31050Cal1Request::zp1l() const
{
    return m_zp1l;
}

/*!
 * @brief This function returns a reference to member zp1l
 * @return Reference to member zp1l
 */
float& ZMD31050Cal1Request::zp1l()
{
    return m_zp1l;
}


/*!
 * @brief This function sets a value in member zp2l
 * @param _zp2l New value for member zp2l
 */
void ZMD31050Cal1Request::zp2l(
        float _zp2l)
{
    m_zp2l = _zp2l;
}

/*!
 * @brief This function returns the value of member zp2l
 * @return Value of member zp2l
 */
float ZMD31050Cal1Request::zp2l() const
{
    return m_zp2l;
}

/*!
 * @brief This function returns a reference to member zp2l
 * @return Reference to member zp2l
 */
float& ZMD31050Cal1Request::zp2l()
{
    return m_zp2l;
}


/*!
 * @brief This function sets a value in member a
 * @param _a New value for member a
 */
void ZMD31050Cal1Request::a(
        float _a)
{
    m_a = _a;
}

/*!
 * @brief This function returns the value of member a
 * @return Value of member a
 */
float ZMD31050Cal1Request::a() const
{
    return m_a;
}

/*!
 * @brief This function returns a reference to member a
 * @return Reference to member a
 */
float& ZMD31050Cal1Request::a()
{
    return m_a;
}


/*!
 * @brief This function sets a value in member b
 * @param _b New value for member b
 */
void ZMD31050Cal1Request::b(
        float _b)
{
    m_b = _b;
}

/*!
 * @brief This function returns the value of member b
 * @return Value of member b
 */
float ZMD31050Cal1Request::b() const
{
    return m_b;
}

/*!
 * @brief This function returns a reference to member b
 * @return Reference to member b
 */
float& ZMD31050Cal1Request::b()
{
    return m_b;
}


/*!
 * @brief This function sets a value in member m
 * @param _m New value for member m
 */
void ZMD31050Cal1Request::m(
        float _m)
{
    m_m = _m;
}

/*!
 * @brief This function returns the value of member m
 * @return Value of member m
 */
float ZMD31050Cal1Request::m() const
{
    return m_m;
}

/*!
 * @brief This function returns a reference to member m
 * @return Reference to member m
 */
float& ZMD31050Cal1Request::m()
{
    return m_m;
}


/*!
 * @brief This function sets a value in member m2
 * @param _m2 New value for member m2
 */
void ZMD31050Cal1Request::m2(
        float _m2)
{
    m_m2 = _m2;
}

/*!
 * @brief This function returns the value of member m2
 * @return Value of member m2
 */
float ZMD31050Cal1Request::m2() const
{
    return m_m2;
}

/*!
 * @brief This function returns a reference to member m2
 * @return Reference to member m2
 */
float& ZMD31050Cal1Request::m2()
{
    return m_m2;
}


/*!
 * @brief This function sets a value in member ztMed
 * @param _ztMed New value for member ztMed
 */
void ZMD31050Cal1Request::ztMed(
        float _ztMed)
{
    m_ztMed = _ztMed;
}

/*!
 * @brief This function returns the value of member ztMed
 * @return Value of member ztMed
 */
float ZMD31050Cal1Request::ztMed() const
{
    return m_ztMed;
}

/*!
 * @brief This function returns a reference to member ztMed
 * @return Reference to member ztMed
 */
float& ZMD31050Cal1Request::ztMed()
{
    return m_ztMed;
}


/*!
 * @brief This function sets a value in member ztUpp
 * @param _ztUpp New value for member ztUpp
 */
void ZMD31050Cal1Request::ztUpp(
        float _ztUpp)
{
    m_ztUpp = _ztUpp;
}

/*!
 * @brief This function returns the value of member ztUpp
 * @return Value of member ztUpp
 */
float ZMD31050Cal1Request::ztUpp() const
{
    return m_ztUpp;
}

/*!
 * @brief This function returns a reference to member ztUpp
 * @return Reference to member ztUpp
 */
float& ZMD31050Cal1Request::ztUpp()
{
    return m_ztUpp;
}


/*!
 * @brief This function sets a value in member ztLow
 * @param _ztLow New value for member ztLow
 */
void ZMD31050Cal1Request::ztLow(
        float _ztLow)
{
    m_ztLow = _ztLow;
}

/*!
 * @brief This function returns the value of member ztLow
 * @return Value of member ztLow
 */
float ZMD31050Cal1Request::ztLow() const
{
    return m_ztLow;
}

/*!
 * @brief This function returns a reference to member ztLow
 * @return Reference to member ztLow
 */
float& ZMD31050Cal1Request::ztLow()
{
    return m_ztLow;
}


/*!
 * @brief This function sets a value in member adcReso
 * @param _adcReso New value for member adcReso
 */
void ZMD31050Cal1Request::adcReso(
        int32_t _adcReso)
{
    m_adcReso = _adcReso;
}

/*!
 * @brief This function returns the value of member adcReso
 * @return Value of member adcReso
 */
int32_t ZMD31050Cal1Request::adcReso() const
{
    return m_adcReso;
}

/*!
 * @brief This function returns a reference to member adcReso
 * @return Reference to member adcReso
 */
int32_t& ZMD31050Cal1Request::adcReso()
{
    return m_adcReso;
}




ZMD31050Cal1Reply::ZMD31050Cal1Reply()
{
}

ZMD31050Cal1Reply::~ZMD31050Cal1Reply()
{
}

ZMD31050Cal1Reply::ZMD31050Cal1Reply(
        const ZMD31050Cal1Reply& x)
{
    m_success = x.m_success;
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    m_c2 = x.m_c2;
    m_c3 = x.m_c3;
    m_c4 = x.m_c4;
    m_c6 = x.m_c6;
    m_c5 = x.m_c5;
    m_c7 = x.m_c7;
}

ZMD31050Cal1Reply::ZMD31050Cal1Reply(
        ZMD31050Cal1Reply&& x) noexcept
{
    m_success = x.m_success;
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    m_c2 = x.m_c2;
    m_c3 = x.m_c3;
    m_c4 = x.m_c4;
    m_c6 = x.m_c6;
    m_c5 = x.m_c5;
    m_c7 = x.m_c7;
}

ZMD31050Cal1Reply& ZMD31050Cal1Reply::operator =(
        const ZMD31050Cal1Reply& x)
{

    m_success = x.m_success;
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    m_c2 = x.m_c2;
    m_c3 = x.m_c3;
    m_c4 = x.m_c4;
    m_c6 = x.m_c6;
    m_c5 = x.m_c5;
    m_c7 = x.m_c7;
    return *this;
}

ZMD31050Cal1Reply& ZMD31050Cal1Reply::operator =(
        ZMD31050Cal1Reply&& x) noexcept
{

    m_success = x.m_success;
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    m_c2 = x.m_c2;
    m_c3 = x.m_c3;
    m_c4 = x.m_c4;
    m_c6 = x.m_c6;
    m_c5 = x.m_c5;
    m_c7 = x.m_c7;
    return *this;
}

bool ZMD31050Cal1Reply::operator ==(
        const ZMD31050Cal1Reply& x) const
{
    return (m_success == x.m_success &&
           m_c0 == x.m_c0 &&
           m_c1 == x.m_c1 &&
           m_c2 == x.m_c2 &&
           m_c3 == x.m_c3 &&
           m_c4 == x.m_c4 &&
           m_c6 == x.m_c6 &&
           m_c5 == x.m_c5 &&
           m_c7 == x.m_c7);
}

bool ZMD31050Cal1Reply::operator !=(
        const ZMD31050Cal1Reply& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member success
 * @param _success New value for member success
 */
void ZMD31050Cal1Reply::success(
        bool _success)
{
    m_success = _success;
}

/*!
 * @brief This function returns the value of member success
 * @return Value of member success
 */
bool ZMD31050Cal1Reply::success() const
{
    return m_success;
}

/*!
 * @brief This function returns a reference to member success
 * @return Reference to member success
 */
bool& ZMD31050Cal1Reply::success()
{
    return m_success;
}


/*!
 * @brief This function sets a value in member c0
 * @param _c0 New value for member c0
 */
void ZMD31050Cal1Reply::c0(
        float _c0)
{
    m_c0 = _c0;
}

/*!
 * @brief This function returns the value of member c0
 * @return Value of member c0
 */
float ZMD31050Cal1Reply::c0() const
{
    return m_c0;
}

/*!
 * @brief This function returns a reference to member c0
 * @return Reference to member c0
 */
float& ZMD31050Cal1Reply::c0()
{
    return m_c0;
}


/*!
 * @brief This function sets a value in member c1
 * @param _c1 New value for member c1
 */
void ZMD31050Cal1Reply::c1(
        float _c1)
{
    m_c1 = _c1;
}

/*!
 * @brief This function returns the value of member c1
 * @return Value of member c1
 */
float ZMD31050Cal1Reply::c1() const
{
    return m_c1;
}

/*!
 * @brief This function returns a reference to member c1
 * @return Reference to member c1
 */
float& ZMD31050Cal1Reply::c1()
{
    return m_c1;
}


/*!
 * @brief This function sets a value in member c2
 * @param _c2 New value for member c2
 */
void ZMD31050Cal1Reply::c2(
        float _c2)
{
    m_c2 = _c2;
}

/*!
 * @brief This function returns the value of member c2
 * @return Value of member c2
 */
float ZMD31050Cal1Reply::c2() const
{
    return m_c2;
}

/*!
 * @brief This function returns a reference to member c2
 * @return Reference to member c2
 */
float& ZMD31050Cal1Reply::c2()
{
    return m_c2;
}


/*!
 * @brief This function sets a value in member c3
 * @param _c3 New value for member c3
 */
void ZMD31050Cal1Reply::c3(
        float _c3)
{
    m_c3 = _c3;
}

/*!
 * @brief This function returns the value of member c3
 * @return Value of member c3
 */
float ZMD31050Cal1Reply::c3() const
{
    return m_c3;
}

/*!
 * @brief This function returns a reference to member c3
 * @return Reference to member c3
 */
float& ZMD31050Cal1Reply::c3()
{
    return m_c3;
}


/*!
 * @brief This function sets a value in member c4
 * @param _c4 New value for member c4
 */
void ZMD31050Cal1Reply::c4(
        float _c4)
{
    m_c4 = _c4;
}

/*!
 * @brief This function returns the value of member c4
 * @return Value of member c4
 */
float ZMD31050Cal1Reply::c4() const
{
    return m_c4;
}

/*!
 * @brief This function returns a reference to member c4
 * @return Reference to member c4
 */
float& ZMD31050Cal1Reply::c4()
{
    return m_c4;
}


/*!
 * @brief This function sets a value in member c6
 * @param _c6 New value for member c6
 */
void ZMD31050Cal1Reply::c6(
        float _c6)
{
    m_c6 = _c6;
}

/*!
 * @brief This function returns the value of member c6
 * @return Value of member c6
 */
float ZMD31050Cal1Reply::c6() const
{
    return m_c6;
}

/*!
 * @brief This function returns a reference to member c6
 * @return Reference to member c6
 */
float& ZMD31050Cal1Reply::c6()
{
    return m_c6;
}


/*!
 * @brief This function sets a value in member c5
 * @param _c5 New value for member c5
 */
void ZMD31050Cal1Reply::c5(
        float _c5)
{
    m_c5 = _c5;
}

/*!
 * @brief This function returns the value of member c5
 * @return Value of member c5
 */
float ZMD31050Cal1Reply::c5() const
{
    return m_c5;
}

/*!
 * @brief This function returns a reference to member c5
 * @return Reference to member c5
 */
float& ZMD31050Cal1Reply::c5()
{
    return m_c5;
}


/*!
 * @brief This function sets a value in member c7
 * @param _c7 New value for member c7
 */
void ZMD31050Cal1Reply::c7(
        float _c7)
{
    m_c7 = _c7;
}

/*!
 * @brief This function returns the value of member c7
 * @return Value of member c7
 */
float ZMD31050Cal1Reply::c7() const
{
    return m_c7;
}

/*!
 * @brief This function returns a reference to member c7
 * @return Reference to member c7
 */
float& ZMD31050Cal1Reply::c7()
{
    return m_c7;
}




ZMD31050Sim1Request::ZMD31050Sim1Request()
{
}

ZMD31050Sim1Request::~ZMD31050Sim1Request()
{
}

ZMD31050Sim1Request::ZMD31050Sim1Request(
        const ZMD31050Sim1Request& x)
{
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    m_c2 = x.m_c2;
    m_c3 = x.m_c3;
    m_c4 = x.m_c4;
    m_c5 = x.m_c5;
    m_c6 = x.m_c6;
    m_c7 = x.m_c7;
    m_adcReso = x.m_adcReso;
    m_rangeShift = x.m_rangeShift;
    m_izMin = x.m_izMin;
    m_izMax = x.m_izMax;
    m_zt = x.m_zt;
    m_ztMin = x.m_ztMin;
    m_ztMax = x.m_ztMax;
}

ZMD31050Sim1Request::ZMD31050Sim1Request(
        ZMD31050Sim1Request&& x) noexcept
{
    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    m_c2 = x.m_c2;
    m_c3 = x.m_c3;
    m_c4 = x.m_c4;
    m_c5 = x.m_c5;
    m_c6 = x.m_c6;
    m_c7 = x.m_c7;
    m_adcReso = x.m_adcReso;
    m_rangeShift = x.m_rangeShift;
    m_izMin = x.m_izMin;
    m_izMax = x.m_izMax;
    m_zt = x.m_zt;
    m_ztMin = x.m_ztMin;
    m_ztMax = x.m_ztMax;
}

ZMD31050Sim1Request& ZMD31050Sim1Request::operator =(
        const ZMD31050Sim1Request& x)
{

    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    m_c2 = x.m_c2;
    m_c3 = x.m_c3;
    m_c4 = x.m_c4;
    m_c5 = x.m_c5;
    m_c6 = x.m_c6;
    m_c7 = x.m_c7;
    m_adcReso = x.m_adcReso;
    m_rangeShift = x.m_rangeShift;
    m_izMin = x.m_izMin;
    m_izMax = x.m_izMax;
    m_zt = x.m_zt;
    m_ztMin = x.m_ztMin;
    m_ztMax = x.m_ztMax;
    return *this;
}

ZMD31050Sim1Request& ZMD31050Sim1Request::operator =(
        ZMD31050Sim1Request&& x) noexcept
{

    m_c0 = x.m_c0;
    m_c1 = x.m_c1;
    m_c2 = x.m_c2;
    m_c3 = x.m_c3;
    m_c4 = x.m_c4;
    m_c5 = x.m_c5;
    m_c6 = x.m_c6;
    m_c7 = x.m_c7;
    m_adcReso = x.m_adcReso;
    m_rangeShift = x.m_rangeShift;
    m_izMin = x.m_izMin;
    m_izMax = x.m_izMax;
    m_zt = x.m_zt;
    m_ztMin = x.m_ztMin;
    m_ztMax = x.m_ztMax;
    return *this;
}

bool ZMD31050Sim1Request::operator ==(
        const ZMD31050Sim1Request& x) const
{
    return (m_c0 == x.m_c0 &&
           m_c1 == x.m_c1 &&
           m_c2 == x.m_c2 &&
           m_c3 == x.m_c3 &&
           m_c4 == x.m_c4 &&
           m_c5 == x.m_c5 &&
           m_c6 == x.m_c6 &&
           m_c7 == x.m_c7 &&
           m_adcReso == x.m_adcReso &&
           m_rangeShift == x.m_rangeShift &&
           m_izMin == x.m_izMin &&
           m_izMax == x.m_izMax &&
           m_zt == x.m_zt &&
           m_ztMin == x.m_ztMin &&
           m_ztMax == x.m_ztMax);
}

bool ZMD31050Sim1Request::operator !=(
        const ZMD31050Sim1Request& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member c0
 * @param _c0 New value for member c0
 */
void ZMD31050Sim1Request::c0(
        int32_t _c0)
{
    m_c0 = _c0;
}

/*!
 * @brief This function returns the value of member c0
 * @return Value of member c0
 */
int32_t ZMD31050Sim1Request::c0() const
{
    return m_c0;
}

/*!
 * @brief This function returns a reference to member c0
 * @return Reference to member c0
 */
int32_t& ZMD31050Sim1Request::c0()
{
    return m_c0;
}


/*!
 * @brief This function sets a value in member c1
 * @param _c1 New value for member c1
 */
void ZMD31050Sim1Request::c1(
        int32_t _c1)
{
    m_c1 = _c1;
}

/*!
 * @brief This function returns the value of member c1
 * @return Value of member c1
 */
int32_t ZMD31050Sim1Request::c1() const
{
    return m_c1;
}

/*!
 * @brief This function returns a reference to member c1
 * @return Reference to member c1
 */
int32_t& ZMD31050Sim1Request::c1()
{
    return m_c1;
}


/*!
 * @brief This function sets a value in member c2
 * @param _c2 New value for member c2
 */
void ZMD31050Sim1Request::c2(
        int32_t _c2)
{
    m_c2 = _c2;
}

/*!
 * @brief This function returns the value of member c2
 * @return Value of member c2
 */
int32_t ZMD31050Sim1Request::c2() const
{
    return m_c2;
}

/*!
 * @brief This function returns a reference to member c2
 * @return Reference to member c2
 */
int32_t& ZMD31050Sim1Request::c2()
{
    return m_c2;
}


/*!
 * @brief This function sets a value in member c3
 * @param _c3 New value for member c3
 */
void ZMD31050Sim1Request::c3(
        int32_t _c3)
{
    m_c3 = _c3;
}

/*!
 * @brief This function returns the value of member c3
 * @return Value of member c3
 */
int32_t ZMD31050Sim1Request::c3() const
{
    return m_c3;
}

/*!
 * @brief This function returns a reference to member c3
 * @return Reference to member c3
 */
int32_t& ZMD31050Sim1Request::c3()
{
    return m_c3;
}


/*!
 * @brief This function sets a value in member c4
 * @param _c4 New value for member c4
 */
void ZMD31050Sim1Request::c4(
        int32_t _c4)
{
    m_c4 = _c4;
}

/*!
 * @brief This function returns the value of member c4
 * @return Value of member c4
 */
int32_t ZMD31050Sim1Request::c4() const
{
    return m_c4;
}

/*!
 * @brief This function returns a reference to member c4
 * @return Reference to member c4
 */
int32_t& ZMD31050Sim1Request::c4()
{
    return m_c4;
}


/*!
 * @brief This function sets a value in member c5
 * @param _c5 New value for member c5
 */
void ZMD31050Sim1Request::c5(
        int32_t _c5)
{
    m_c5 = _c5;
}

/*!
 * @brief This function returns the value of member c5
 * @return Value of member c5
 */
int32_t ZMD31050Sim1Request::c5() const
{
    return m_c5;
}

/*!
 * @brief This function returns a reference to member c5
 * @return Reference to member c5
 */
int32_t& ZMD31050Sim1Request::c5()
{
    return m_c5;
}


/*!
 * @brief This function sets a value in member c6
 * @param _c6 New value for member c6
 */
void ZMD31050Sim1Request::c6(
        int32_t _c6)
{
    m_c6 = _c6;
}

/*!
 * @brief This function returns the value of member c6
 * @return Value of member c6
 */
int32_t ZMD31050Sim1Request::c6() const
{
    return m_c6;
}

/*!
 * @brief This function returns a reference to member c6
 * @return Reference to member c6
 */
int32_t& ZMD31050Sim1Request::c6()
{
    return m_c6;
}


/*!
 * @brief This function sets a value in member c7
 * @param _c7 New value for member c7
 */
void ZMD31050Sim1Request::c7(
        int32_t _c7)
{
    m_c7 = _c7;
}

/*!
 * @brief This function returns the value of member c7
 * @return Value of member c7
 */
int32_t ZMD31050Sim1Request::c7() const
{
    return m_c7;
}

/*!
 * @brief This function returns a reference to member c7
 * @return Reference to member c7
 */
int32_t& ZMD31050Sim1Request::c7()
{
    return m_c7;
}


/*!
 * @brief This function sets a value in member adcReso
 * @param _adcReso New value for member adcReso
 */
void ZMD31050Sim1Request::adcReso(
        int32_t _adcReso)
{
    m_adcReso = _adcReso;
}

/*!
 * @brief This function returns the value of member adcReso
 * @return Value of member adcReso
 */
int32_t ZMD31050Sim1Request::adcReso() const
{
    return m_adcReso;
}

/*!
 * @brief This function returns a reference to member adcReso
 * @return Reference to member adcReso
 */
int32_t& ZMD31050Sim1Request::adcReso()
{
    return m_adcReso;
}


/*!
 * @brief This function sets a value in member rangeShift
 * @param _rangeShift New value for member rangeShift
 */
void ZMD31050Sim1Request::rangeShift(
        float _rangeShift)
{
    m_rangeShift = _rangeShift;
}

/*!
 * @brief This function returns the value of member rangeShift
 * @return Value of member rangeShift
 */
float ZMD31050Sim1Request::rangeShift() const
{
    return m_rangeShift;
}

/*!
 * @brief This function returns a reference to member rangeShift
 * @return Reference to member rangeShift
 */
float& ZMD31050Sim1Request::rangeShift()
{
    return m_rangeShift;
}


/*!
 * @brief This function sets a value in member izMin
 * @param _izMin New value for member izMin
 */
void ZMD31050Sim1Request::izMin(
        int32_t _izMin)
{
    m_izMin = _izMin;
}

/*!
 * @brief This function returns the value of member izMin
 * @return Value of member izMin
 */
int32_t ZMD31050Sim1Request::izMin() const
{
    return m_izMin;
}

/*!
 * @brief This function returns a reference to member izMin
 * @return Reference to member izMin
 */
int32_t& ZMD31050Sim1Request::izMin()
{
    return m_izMin;
}


/*!
 * @brief This function sets a value in member izMax
 * @param _izMax New value for member izMax
 */
void ZMD31050Sim1Request::izMax(
        int32_t _izMax)
{
    m_izMax = _izMax;
}

/*!
 * @brief This function returns the value of member izMax
 * @return Value of member izMax
 */
int32_t ZMD31050Sim1Request::izMax() const
{
    return m_izMax;
}

/*!
 * @brief This function returns a reference to member izMax
 * @return Reference to member izMax
 */
int32_t& ZMD31050Sim1Request::izMax()
{
    return m_izMax;
}


/*!
 * @brief This function sets a value in member zt
 * @param _zt New value for member zt
 */
void ZMD31050Sim1Request::zt(
        int32_t _zt)
{
    m_zt = _zt;
}

/*!
 * @brief This function returns the value of member zt
 * @return Value of member zt
 */
int32_t ZMD31050Sim1Request::zt() const
{
    return m_zt;
}

/*!
 * @brief This function returns a reference to member zt
 * @return Reference to member zt
 */
int32_t& ZMD31050Sim1Request::zt()
{
    return m_zt;
}


/*!
 * @brief This function sets a value in member ztMin
 * @param _ztMin New value for member ztMin
 */
void ZMD31050Sim1Request::ztMin(
        int32_t _ztMin)
{
    m_ztMin = _ztMin;
}

/*!
 * @brief This function returns the value of member ztMin
 * @return Value of member ztMin
 */
int32_t ZMD31050Sim1Request::ztMin() const
{
    return m_ztMin;
}

/*!
 * @brief This function returns a reference to member ztMin
 * @return Reference to member ztMin
 */
int32_t& ZMD31050Sim1Request::ztMin()
{
    return m_ztMin;
}


/*!
 * @brief This function sets a value in member ztMax
 * @param _ztMax New value for member ztMax
 */
void ZMD31050Sim1Request::ztMax(
        int32_t _ztMax)
{
    m_ztMax = _ztMax;
}

/*!
 * @brief This function returns the value of member ztMax
 * @return Value of member ztMax
 */
int32_t ZMD31050Sim1Request::ztMax() const
{
    return m_ztMax;
}

/*!
 * @brief This function returns a reference to member ztMax
 * @return Reference to member ztMax
 */
int32_t& ZMD31050Sim1Request::ztMax()
{
    return m_ztMax;
}




ZMD31050Sim1Reply::ZMD31050Sim1Reply()
{
}

ZMD31050Sim1Reply::~ZMD31050Sim1Reply()
{
}

ZMD31050Sim1Reply::ZMD31050Sim1Reply(
        const ZMD31050Sim1Reply& x)
{
    m_success = x.m_success;
    m_result = x.m_result;
}

ZMD31050Sim1Reply::ZMD31050Sim1Reply(
        ZMD31050Sim1Reply&& x) noexcept
{
    m_success = x.m_success;
    m_result = x.m_result;
}

ZMD31050Sim1Reply& ZMD31050Sim1Reply::operator =(
        const ZMD31050Sim1Reply& x)
{

    m_success = x.m_success;
    m_result = x.m_result;
    return *this;
}

ZMD31050Sim1Reply& ZMD31050Sim1Reply::operator =(
        ZMD31050Sim1Reply&& x) noexcept
{

    m_success = x.m_success;
    m_result = x.m_result;
    return *this;
}

bool ZMD31050Sim1Reply::operator ==(
        const ZMD31050Sim1Reply& x) const
{
    return (m_success == x.m_success &&
           m_result == x.m_result);
}

bool ZMD31050Sim1Reply::operator !=(
        const ZMD31050Sim1Reply& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member success
 * @param _success New value for member success
 */
void ZMD31050Sim1Reply::success(
        bool _success)
{
    m_success = _success;
}

/*!
 * @brief This function returns the value of member success
 * @return Value of member success
 */
bool ZMD31050Sim1Reply::success() const
{
    return m_success;
}

/*!
 * @brief This function returns a reference to member success
 * @return Reference to member success
 */
bool& ZMD31050Sim1Reply::success()
{
    return m_success;
}


/*!
 * @brief This function sets a value in member result
 * @param _result New value for member result
 */
void ZMD31050Sim1Reply::result(
        int32_t _result)
{
    m_result = _result;
}

/*!
 * @brief This function returns the value of member result
 * @return Value of member result
 */
int32_t ZMD31050Sim1Reply::result() const
{
    return m_result;
}

/*!
 * @brief This function returns a reference to member result
 * @return Reference to member result
 */
int32_t& ZMD31050Sim1Reply::result()
{
    return m_result;
}


DLLVersionRequest::DLLVersionRequest()
{
}

DLLVersionRequest::~DLLVersionRequest()
{
}

DLLVersionRequest::DLLVersionRequest(
        const DLLVersionRequest& x)
{
    static_cast<void>(x);
}

DLLVersionRequest::DLLVersionRequest(
        DLLVersionRequest&& x) noexcept
{
    static_cast<void>(x);
}

DLLVersionRequest& DLLVersionRequest::operator =(
        const DLLVersionRequest& x)
{

    static_cast<void>(x);

    return *this;
}

DLLVersionRequest& DLLVersionRequest::operator =(
        DLLVersionRequest&& x) noexcept
{

    static_cast<void>(x);

    return *this;
}

bool DLLVersionRequest::operator ==(
        const DLLVersionRequest& x) const
{
    static_cast<void>(x);
    return true;
}

bool DLLVersionRequest::operator !=(
        const DLLVersionRequest& x) const
{
    return !(*this == x);
}




DLLVersionReply::DLLVersionReply()
{
}

DLLVersionReply::~DLLVersionReply()
{
}

DLLVersionReply::DLLVersionReply(
        const DLLVersionReply& x)
{
    m_success = x.m_success;
    m_version = x.m_version;
}

DLLVersionReply::DLLVersionReply(
        DLLVersionReply&& x) noexcept
{
    m_success = x.m_success;
    m_version = std::move(x.m_version);
}

DLLVersionReply& DLLVersionReply::operator =(
        const DLLVersionReply& x)
{

    m_success = x.m_success;
    m_version = x.m_version;
    return *this;
}

DLLVersionReply& DLLVersionReply::operator =(
        DLLVersionReply&& x) noexcept
{

    m_success = x.m_success;
    m_version = std::move(x.m_version);
    return *this;
}

bool DLLVersionReply::operator ==(
        const DLLVersionReply& x) const
{
    return (m_success == x.m_success &&
           m_version == x.m_version);
}

bool DLLVersionReply::operator !=(
        const DLLVersionReply& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member success
 * @param _success New value for member success
 */
void DLLVersionReply::success(
        bool _success)
{
    m_success = _success;
}

/*!
 * @brief This function returns the value of member success
 * @return Value of member success
 */
bool DLLVersionReply::success() const
{
    return m_success;
}

/*!
 * @brief This function returns a reference to member success
 * @return Reference to member success
 */
bool& DLLVersionReply::success()
{
    return m_success;
}


/*!
 * @brief This function copies the value in member version
 * @param _version New value to be copied in member version
 */
void DLLVersionReply::version(
        const std::string& _version)
{
    m_version = _version;
}

/*!
 * @brief This function moves the value in member version
 * @param _version New value to be moved in member version
 */
void DLLVersionReply::version(
        std::string&& _version)
{
    m_version = std::move(_version);
}

/*!
 * @brief This function returns a constant reference to member version
 * @return Constant reference to member version
 */
const std::string& DLLVersionReply::version() const
{
    return m_version;
}

/*!
 * @brief This function returns a reference to member version
 * @return Reference to member version
 */
std::string& DLLVersionReply::version()
{
    return m_version;
}


GetMessageRequest::GetMessageRequest()
{
}

GetMessageRequest::~GetMessageRequest()
{
}

GetMessageRequest::GetMessageRequest(
        const GetMessageRequest& x)
{
    static_cast<void>(x);
}

GetMessageRequest::GetMessageRequest(
        GetMessageRequest&& x) noexcept
{
    static_cast<void>(x);
}

GetMessageRequest& GetMessageRequest::operator =(
        const GetMessageRequest& x)
{

    static_cast<void>(x);

    return *this;
}

GetMessageRequest& GetMessageRequest::operator =(
        GetMessageRequest&& x) noexcept
{

    static_cast<void>(x);

    return *this;
}

bool GetMessageRequest::operator ==(
        const GetMessageRequest& x) const
{
    static_cast<void>(x);
    return true;
}

bool GetMessageRequest::operator !=(
        const GetMessageRequest& x) const
{
    return !(*this == x);
}




GetMessageReply::GetMessageReply()
{
}

GetMessageReply::~GetMessageReply()
{
}

GetMessageReply::GetMessageReply(
        const GetMessageReply& x)
{
    m_message = x.m_message;
}

GetMessageReply::GetMessageReply(
        GetMessageReply&& x) noexcept
{
    m_message = std::move(x.m_message);
}

GetMessageReply& GetMessageReply::operator =(
        const GetMessageReply& x)
{

    m_message = x.m_message;
    return *this;
}

GetMessageReply& GetMessageReply::operator =(
        GetMessageReply&& x) noexcept
{

    m_message = std::move(x.m_message);
    return *this;
}

bool GetMessageReply::operator ==(
        const GetMessageReply& x) const
{
    return (m_message == x.m_message);
}

bool GetMessageReply::operator !=(
        const GetMessageReply& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void GetMessageReply::message(
        const std::string& _message)
{
    m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void GetMessageReply::message(
        std::string&& _message)
{
    m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::string& GetMessageReply::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::string& GetMessageReply::message()
{
    return m_message;
}




RequestUnion::RequestUnion()
{
    m__d = RBIC1::OUTLIN_REQUEST;
}

RequestUnion::~RequestUnion()
{
}

RequestUnion::RequestUnion(
        const RequestUnion& x)
{
    m__d = x.m__d;

    switch (m__d)
    {
        case RBIC1::OUTLIN_REQUEST:
            m_outLinRequest = x.m_outLinRequest;
            break;


        case RBIC1::TLIN_REQUEST:
            m_tLinRequest = x.m_tLinRequest;
            break;


        case RBIC1::OUTQUAD_REQUEST:
            m_outQuadRequest = x.m_outQuadRequest;
            break;


        case RBIC1::OUTTHIRD_REQUEST:
            m_outThirdRequest = x.m_outThirdRequest;
            break;


        case RBIC1::TQUAD_REQUEST:
            m_tQuadRequest = x.m_tQuadRequest;
            break;


        case RBIC1::OUTLINTLIN_REQUEST:
            m_outLinTLinRequest = x.m_outLinTLinRequest;
            break;


        case RBIC1::OUTQUADTLIN_REQUEST:
            m_outQuadTLinRequest = x.m_outQuadTLinRequest;
            break;


        case RBIC1::OUTLINTQUAD_REQUEST:
            m_outLinTQuadRequest = x.m_outLinTQuadRequest;
            break;


        case RBIC1::OUTQUADTQUAD_REQUEST:
            m_outQuadTQuadRequest = x.m_outQuadTQuadRequest;
            break;


        case RBIC1::ZMD31050_CAL1_REQUEST:
            m_zmd31050Cal1Request = x.m_zmd31050Cal1Request;
            break;


        case RBIC1::ZMD31050_SIM1_REQUEST:
            m_zmd31050Sim1Request = x.m_zmd31050Sim1Request;
            break;


        case RBIC1::DLLVERSION_REQUEST:
            m_dllVersionRequest = x.m_dllVersionRequest;
            break;


        case RBIC1::GETMESSAGE_REQUEST:
            m_getMessageRequest = x.m_getMessageRequest;
            break;

        default:
            break;
    }
}

RequestUnion::RequestUnion(
        RequestUnion&& x) noexcept
{
    m__d = x.m__d;

    switch (m__d)
    {
        case RBIC1::OUTLIN_REQUEST:
            m_outLinRequest = std::move(x.m_outLinRequest);

            break;


        case RBIC1::TLIN_REQUEST:
            m_tLinRequest = std::move(x.m_tLinRequest);

            break;


        case RBIC1::OUTQUAD_REQUEST:
            m_outQuadRequest = std::move(x.m_outQuadRequest);

            break;


        case RBIC1::OUTTHIRD_REQUEST:
            m_outThirdRequest = std::move(x.m_outThirdRequest);

            break;


        case RBIC1::TQUAD_REQUEST:
            m_tQuadRequest = std::move(x.m_tQuadRequest);

            break;


        case RBIC1::OUTLINTLIN_REQUEST:
            m_outLinTLinRequest = std::move(x.m_outLinTLinRequest);

            break;


        case RBIC1::OUTQUADTLIN_REQUEST:
            m_outQuadTLinRequest = std::move(x.m_outQuadTLinRequest);

            break;


        case RBIC1::OUTLINTQUAD_REQUEST:
            m_outLinTQuadRequest = std::move(x.m_outLinTQuadRequest);

            break;


        case RBIC1::OUTQUADTQUAD_REQUEST:
            m_outQuadTQuadRequest = std::move(x.m_outQuadTQuadRequest);

            break;


        case RBIC1::ZMD31050_CAL1_REQUEST:
            m_zmd31050Cal1Request = std::move(x.m_zmd31050Cal1Request);

            break;


        case RBIC1::ZMD31050_SIM1_REQUEST:
            m_zmd31050Sim1Request = std::move(x.m_zmd31050Sim1Request);

            break;


        case RBIC1::DLLVERSION_REQUEST:
            m_dllVersionRequest = std::move(x.m_dllVersionRequest);

            break;


        case RBIC1::GETMESSAGE_REQUEST:
            m_getMessageRequest = std::move(x.m_getMessageRequest);

            break;

        default:
            break;
    }
}

RequestUnion& RequestUnion::operator =(
        const RequestUnion& x)
{
    m__d = x.m__d;

    switch (m__d)
    {
        case RBIC1::OUTLIN_REQUEST:
            m_outLinRequest = x.m_outLinRequest;
            break;


        case RBIC1::TLIN_REQUEST:
            m_tLinRequest = x.m_tLinRequest;
            break;


        case RBIC1::OUTQUAD_REQUEST:
            m_outQuadRequest = x.m_outQuadRequest;
            break;


        case RBIC1::OUTTHIRD_REQUEST:
            m_outThirdRequest = x.m_outThirdRequest;
            break;


        case RBIC1::TQUAD_REQUEST:
            m_tQuadRequest = x.m_tQuadRequest;
            break;


        case RBIC1::OUTLINTLIN_REQUEST:
            m_outLinTLinRequest = x.m_outLinTLinRequest;
            break;


        case RBIC1::OUTQUADTLIN_REQUEST:
            m_outQuadTLinRequest = x.m_outQuadTLinRequest;
            break;


        case RBIC1::OUTLINTQUAD_REQUEST:
            m_outLinTQuadRequest = x.m_outLinTQuadRequest;
            break;


        case RBIC1::OUTQUADTQUAD_REQUEST:
            m_outQuadTQuadRequest = x.m_outQuadTQuadRequest;
            break;


        case RBIC1::ZMD31050_CAL1_REQUEST:
            m_zmd31050Cal1Request = x.m_zmd31050Cal1Request;
            break;


        case RBIC1::ZMD31050_SIM1_REQUEST:
            m_zmd31050Sim1Request = x.m_zmd31050Sim1Request;
            break;


        case RBIC1::DLLVERSION_REQUEST:
            m_dllVersionRequest = x.m_dllVersionRequest;
            break;


        case RBIC1::GETMESSAGE_REQUEST:
            m_getMessageRequest = x.m_getMessageRequest;
            break;

        default:
            break;
    }

    return *this;
}

RequestUnion& RequestUnion::operator =(
        RequestUnion&& x) noexcept
{
    m__d = x.m__d;

    switch (m__d)
    {
        case RBIC1::OUTLIN_REQUEST:
            m_outLinRequest = std::move(x.m_outLinRequest);

            break;


        case RBIC1::TLIN_REQUEST:
            m_tLinRequest = std::move(x.m_tLinRequest);

            break;


        case RBIC1::OUTQUAD_REQUEST:
            m_outQuadRequest = std::move(x.m_outQuadRequest);

            break;


        case RBIC1::OUTTHIRD_REQUEST:
            m_outThirdRequest = std::move(x.m_outThirdRequest);

            break;


        case RBIC1::TQUAD_REQUEST:
            m_tQuadRequest = std::move(x.m_tQuadRequest);

            break;


        case RBIC1::OUTLINTLIN_REQUEST:
            m_outLinTLinRequest = std::move(x.m_outLinTLinRequest);

            break;


        case RBIC1::OUTQUADTLIN_REQUEST:
            m_outQuadTLinRequest = std::move(x.m_outQuadTLinRequest);

            break;


        case RBIC1::OUTLINTQUAD_REQUEST:
            m_outLinTQuadRequest = std::move(x.m_outLinTQuadRequest);

            break;


        case RBIC1::OUTQUADTQUAD_REQUEST:
            m_outQuadTQuadRequest = std::move(x.m_outQuadTQuadRequest);

            break;


        case RBIC1::ZMD31050_CAL1_REQUEST:
            m_zmd31050Cal1Request = std::move(x.m_zmd31050Cal1Request);

            break;


        case RBIC1::ZMD31050_SIM1_REQUEST:
            m_zmd31050Sim1Request = std::move(x.m_zmd31050Sim1Request);

            break;


        case RBIC1::DLLVERSION_REQUEST:
            m_dllVersionRequest = std::move(x.m_dllVersionRequest);

            break;


        case RBIC1::GETMESSAGE_REQUEST:
            m_getMessageRequest = std::move(x.m_getMessageRequest);

            break;

        default:
            break;
    }

    return *this;
}

bool RequestUnion::operator ==(
        const RequestUnion& x) const
{
    if (m__d != x.m__d)
    {
        return false;
    }

    switch (m__d)
    {
        case RBIC1::OUTLIN_REQUEST:
            return (m_outLinRequest == x.m_outLinRequest);
            break;


        case RBIC1::TLIN_REQUEST:
            return (m_tLinRequest == x.m_tLinRequest);
            break;


        case RBIC1::OUTQUAD_REQUEST:
            return (m_outQuadRequest == x.m_outQuadRequest);
            break;


        case RBIC1::OUTTHIRD_REQUEST:
            return (m_outThirdRequest == x.m_outThirdRequest);
            break;


        case RBIC1::TQUAD_REQUEST:
            return (m_tQuadRequest == x.m_tQuadRequest);
            break;


        case RBIC1::OUTLINTLIN_REQUEST:
            return (m_outLinTLinRequest == x.m_outLinTLinRequest);
            break;


        case RBIC1::OUTQUADTLIN_REQUEST:
            return (m_outQuadTLinRequest == x.m_outQuadTLinRequest);
            break;


        case RBIC1::OUTLINTQUAD_REQUEST:
            return (m_outLinTQuadRequest == x.m_outLinTQuadRequest);
            break;


        case RBIC1::OUTQUADTQUAD_REQUEST:
            return (m_outQuadTQuadRequest == x.m_outQuadTQuadRequest);
            break;


        case RBIC1::ZMD31050_CAL1_REQUEST:
            return (m_zmd31050Cal1Request == x.m_zmd31050Cal1Request);
            break;


        case RBIC1::ZMD31050_SIM1_REQUEST:
            return (m_zmd31050Sim1Request == x.m_zmd31050Sim1Request);
            break;


        case RBIC1::DLLVERSION_REQUEST:
            return (m_dllVersionRequest == x.m_dllVersionRequest);
            break;


        case RBIC1::GETMESSAGE_REQUEST:
            return (m_getMessageRequest == x.m_getMessageRequest);
            break;

        default:
            break;
    }
    return false;
}

bool RequestUnion::operator !=(
        const RequestUnion& x) const
{
    return !(*this == x);
}

void RequestUnion::_d(
        RBIC1::MessageType __d)
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::OUTLIN_REQUEST:
            switch (__d)
            {
                case RBIC1::OUTLIN_REQUEST:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case RBIC1::TLIN_REQUEST:
            switch (__d)
            {
                case RBIC1::TLIN_REQUEST:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case RBIC1::OUTQUAD_REQUEST:
            switch (__d)
            {
                case RBIC1::OUTQUAD_REQUEST:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case RBIC1::OUTTHIRD_REQUEST:
            switch (__d)
            {
                case RBIC1::OUTTHIRD_REQUEST:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case RBIC1::TQUAD_REQUEST:
            switch (__d)
            {
                case RBIC1::TQUAD_REQUEST:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case RBIC1::OUTLINTLIN_REQUEST:
            switch (__d)
            {
                case RBIC1::OUTLINTLIN_REQUEST:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case RBIC1::OUTQUADTLIN_REQUEST:
            switch (__d)
            {
                case RBIC1::OUTQUADTLIN_REQUEST:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case RBIC1::OUTLINTQUAD_REQUEST:
            switch (__d)
            {
                case RBIC1::OUTLINTQUAD_REQUEST:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case RBIC1::OUTQUADTQUAD_REQUEST:
            switch (__d)
            {
                case RBIC1::OUTQUADTQUAD_REQUEST:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case RBIC1::ZMD31050_CAL1_REQUEST:
            switch (__d)
            {
                case RBIC1::ZMD31050_CAL1_REQUEST:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case RBIC1::ZMD31050_SIM1_REQUEST:
            switch (__d)
            {
                case RBIC1::ZMD31050_SIM1_REQUEST:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case RBIC1::DLLVERSION_REQUEST:
            switch (__d)
            {
                case RBIC1::DLLVERSION_REQUEST:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case RBIC1::GETMESSAGE_REQUEST:
            switch (__d)
            {
                case RBIC1::GETMESSAGE_REQUEST:
                    b = true;
                    break;
                default:
                    break;
            }
            break;

        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("Discriminator doesn't correspond with the selected union member");
    }

    m__d = __d;
}

RBIC1::MessageType RequestUnion::_d() const
{
    return m__d;
}

RBIC1::MessageType& RequestUnion::_d()
{
    return m__d;
}

void RequestUnion::outLinRequest(
        const RBIC1::OutLinRequest& _outLinRequest)
{
    m_outLinRequest = _outLinRequest;
    m__d = RBIC1::OUTLIN_REQUEST;

}

void RequestUnion::outLinRequest(
        RBIC1::OutLinRequest&& _outLinRequest)
{
    m_outLinRequest = std::move(_outLinRequest);
    m__d = RBIC1::OUTLIN_REQUEST;

}

const RBIC1::OutLinRequest& RequestUnion::outLinRequest() const
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::OUTLIN_REQUEST:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_outLinRequest;
}

RBIC1::OutLinRequest& RequestUnion::outLinRequest()
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::OUTLIN_REQUEST:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_outLinRequest;
}


void RequestUnion::tLinRequest(
        const RBIC1::TLinRequest& _tLinRequest)
{
    m_tLinRequest = _tLinRequest;
    m__d = RBIC1::TLIN_REQUEST;

}

void RequestUnion::tLinRequest(
        RBIC1::TLinRequest&& _tLinRequest)
{
    m_tLinRequest = std::move(_tLinRequest);
    m__d = RBIC1::TLIN_REQUEST;

}

const RBIC1::TLinRequest& RequestUnion::tLinRequest() const
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::TLIN_REQUEST:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_tLinRequest;
}

RBIC1::TLinRequest& RequestUnion::tLinRequest()
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::TLIN_REQUEST:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_tLinRequest;
}


void RequestUnion::outQuadRequest(
        const RBIC1::OutQuadRequest& _outQuadRequest)
{
    m_outQuadRequest = _outQuadRequest;
    m__d = RBIC1::OUTQUAD_REQUEST;

}

void RequestUnion::outQuadRequest(
        RBIC1::OutQuadRequest&& _outQuadRequest)
{
    m_outQuadRequest = std::move(_outQuadRequest);
    m__d = RBIC1::OUTQUAD_REQUEST;

}

const RBIC1::OutQuadRequest& RequestUnion::outQuadRequest() const
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::OUTQUAD_REQUEST:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_outQuadRequest;
}

RBIC1::OutQuadRequest& RequestUnion::outQuadRequest()
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::OUTQUAD_REQUEST:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_outQuadRequest;
}


void RequestUnion::outThirdRequest(
        const RBIC1::OutThirdRequest& _outThirdRequest)
{
    m_outThirdRequest = _outThirdRequest;
    m__d = RBIC1::OUTTHIRD_REQUEST;

}

void RequestUnion::outThirdRequest(
        RBIC1::OutThirdRequest&& _outThirdRequest)
{
    m_outThirdRequest = std::move(_outThirdRequest);
    m__d = RBIC1::OUTTHIRD_REQUEST;

}

const RBIC1::OutThirdRequest& RequestUnion::outThirdRequest() const
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::OUTTHIRD_REQUEST:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_outThirdRequest;
}

RBIC1::OutThirdRequest& RequestUnion::outThirdRequest()
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::OUTTHIRD_REQUEST:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_outThirdRequest;
}


void RequestUnion::tQuadRequest(
        const RBIC1::TQuadRequest& _tQuadRequest)
{
    m_tQuadRequest = _tQuadRequest;
    m__d = RBIC1::TQUAD_REQUEST;

}

void RequestUnion::tQuadRequest(
        RBIC1::TQuadRequest&& _tQuadRequest)
{
    m_tQuadRequest = std::move(_tQuadRequest);
    m__d = RBIC1::TQUAD_REQUEST;

}

const RBIC1::TQuadRequest& RequestUnion::tQuadRequest() const
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::TQUAD_REQUEST:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_tQuadRequest;
}

RBIC1::TQuadRequest& RequestUnion::tQuadRequest()
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::TQUAD_REQUEST:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_tQuadRequest;
}


void RequestUnion::outLinTLinRequest(
        const RBIC1::OutLinTLinRequest& _outLinTLinRequest)
{
    m_outLinTLinRequest = _outLinTLinRequest;
    m__d = RBIC1::OUTLINTLIN_REQUEST;

}

void RequestUnion::outLinTLinRequest(
        RBIC1::OutLinTLinRequest&& _outLinTLinRequest)
{
    m_outLinTLinRequest = std::move(_outLinTLinRequest);
    m__d = RBIC1::OUTLINTLIN_REQUEST;

}

const RBIC1::OutLinTLinRequest& RequestUnion::outLinTLinRequest() const
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::OUTLINTLIN_REQUEST:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_outLinTLinRequest;
}

RBIC1::OutLinTLinRequest& RequestUnion::outLinTLinRequest()
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::OUTLINTLIN_REQUEST:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_outLinTLinRequest;
}


void RequestUnion::outQuadTLinRequest(
        const RBIC1::OutQuadTLinRequest& _outQuadTLinRequest)
{
    m_outQuadTLinRequest = _outQuadTLinRequest;
    m__d = RBIC1::OUTQUADTLIN_REQUEST;

}

void RequestUnion::outQuadTLinRequest(
        RBIC1::OutQuadTLinRequest&& _outQuadTLinRequest)
{
    m_outQuadTLinRequest = std::move(_outQuadTLinRequest);
    m__d = RBIC1::OUTQUADTLIN_REQUEST;

}

const RBIC1::OutQuadTLinRequest& RequestUnion::outQuadTLinRequest() const
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::OUTQUADTLIN_REQUEST:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_outQuadTLinRequest;
}

RBIC1::OutQuadTLinRequest& RequestUnion::outQuadTLinRequest()
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::OUTQUADTLIN_REQUEST:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_outQuadTLinRequest;
}


void RequestUnion::outLinTQuadRequest(
        const RBIC1::OutLinTQuadRequest& _outLinTQuadRequest)
{
    m_outLinTQuadRequest = _outLinTQuadRequest;
    m__d = RBIC1::OUTLINTQUAD_REQUEST;

}

void RequestUnion::outLinTQuadRequest(
        RBIC1::OutLinTQuadRequest&& _outLinTQuadRequest)
{
    m_outLinTQuadRequest = std::move(_outLinTQuadRequest);
    m__d = RBIC1::OUTLINTQUAD_REQUEST;

}

const RBIC1::OutLinTQuadRequest& RequestUnion::outLinTQuadRequest() const
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::OUTLINTQUAD_REQUEST:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_outLinTQuadRequest;
}

RBIC1::OutLinTQuadRequest& RequestUnion::outLinTQuadRequest()
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::OUTLINTQUAD_REQUEST:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_outLinTQuadRequest;
}


void RequestUnion::outQuadTQuadRequest(
        const RBIC1::OutQuadTQuadRequest& _outQuadTQuadRequest)
{
    m_outQuadTQuadRequest = _outQuadTQuadRequest;
    m__d = RBIC1::OUTQUADTQUAD_REQUEST;

}

void RequestUnion::outQuadTQuadRequest(
        RBIC1::OutQuadTQuadRequest&& _outQuadTQuadRequest)
{
    m_outQuadTQuadRequest = std::move(_outQuadTQuadRequest);
    m__d = RBIC1::OUTQUADTQUAD_REQUEST;

}

const RBIC1::OutQuadTQuadRequest& RequestUnion::outQuadTQuadRequest() const
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::OUTQUADTQUAD_REQUEST:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_outQuadTQuadRequest;
}

RBIC1::OutQuadTQuadRequest& RequestUnion::outQuadTQuadRequest()
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::OUTQUADTQUAD_REQUEST:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_outQuadTQuadRequest;
}


void RequestUnion::zmd31050Cal1Request(
        const RBIC1::ZMD31050Cal1Request& _zmd31050Cal1Request)
{
    m_zmd31050Cal1Request = _zmd31050Cal1Request;
    m__d = RBIC1::ZMD31050_CAL1_REQUEST;

}

void RequestUnion::zmd31050Cal1Request(
        RBIC1::ZMD31050Cal1Request&& _zmd31050Cal1Request)
{
    m_zmd31050Cal1Request = std::move(_zmd31050Cal1Request);
    m__d = RBIC1::ZMD31050_CAL1_REQUEST;

}

const RBIC1::ZMD31050Cal1Request& RequestUnion::zmd31050Cal1Request() const
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::ZMD31050_CAL1_REQUEST:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_zmd31050Cal1Request;
}

RBIC1::ZMD31050Cal1Request& RequestUnion::zmd31050Cal1Request()
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::ZMD31050_CAL1_REQUEST:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_zmd31050Cal1Request;
}


void RequestUnion::zmd31050Sim1Request(
        const RBIC1::ZMD31050Sim1Request& _zmd31050Sim1Request)
{
    m_zmd31050Sim1Request = _zmd31050Sim1Request;
    m__d = RBIC1::ZMD31050_SIM1_REQUEST;

}

void RequestUnion::zmd31050Sim1Request(
        RBIC1::ZMD31050Sim1Request&& _zmd31050Sim1Request)
{
    m_zmd31050Sim1Request = std::move(_zmd31050Sim1Request);
    m__d = RBIC1::ZMD31050_SIM1_REQUEST;

}

const RBIC1::ZMD31050Sim1Request& RequestUnion::zmd31050Sim1Request() const
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::ZMD31050_SIM1_REQUEST:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_zmd31050Sim1Request;
}

RBIC1::ZMD31050Sim1Request& RequestUnion::zmd31050Sim1Request()
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::ZMD31050_SIM1_REQUEST:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_zmd31050Sim1Request;
}


void RequestUnion::dllVersionRequest(
        const RBIC1::DLLVersionRequest& _dllVersionRequest)
{
    m_dllVersionRequest = _dllVersionRequest;
    m__d = RBIC1::DLLVERSION_REQUEST;

}

void RequestUnion::dllVersionRequest(
        RBIC1::DLLVersionRequest&& _dllVersionRequest)
{
    m_dllVersionRequest = std::move(_dllVersionRequest);
    m__d = RBIC1::DLLVERSION_REQUEST;

}

const RBIC1::DLLVersionRequest& RequestUnion::dllVersionRequest() const
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::DLLVERSION_REQUEST:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_dllVersionRequest;
}

RBIC1::DLLVersionRequest& RequestUnion::dllVersionRequest()
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::DLLVERSION_REQUEST:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_dllVersionRequest;
}


void RequestUnion::getMessageRequest(
        const RBIC1::GetMessageRequest& _getMessageRequest)
{
    m_getMessageRequest = _getMessageRequest;
    m__d = RBIC1::GETMESSAGE_REQUEST;

}

void RequestUnion::getMessageRequest(
        RBIC1::GetMessageRequest&& _getMessageRequest)
{
    m_getMessageRequest = std::move(_getMessageRequest);
    m__d = RBIC1::GETMESSAGE_REQUEST;

}

const RBIC1::GetMessageRequest& RequestUnion::getMessageRequest() const
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::GETMESSAGE_REQUEST:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_getMessageRequest;
}

RBIC1::GetMessageRequest& RequestUnion::getMessageRequest()
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::GETMESSAGE_REQUEST:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_getMessageRequest;
}




ReplyUnion::ReplyUnion()
{
    m__d = RBIC1::OUTLIN_REPLY;
}

ReplyUnion::~ReplyUnion()
{
}

ReplyUnion::ReplyUnion(
        const ReplyUnion& x)
{
    m__d = x.m__d;

    switch (m__d)
    {
        case RBIC1::OUTLIN_REPLY:
            m_outLinReply = x.m_outLinReply;
            break;


        case RBIC1::TLIN_REPLY:
            m_tLinReply = x.m_tLinReply;
            break;


        case RBIC1::OUTQUAD_REPLY:
            m_outQuadReply = x.m_outQuadReply;
            break;


        case RBIC1::OUTTHIRD_REPLY:
            m_outThirdReply = x.m_outThirdReply;
            break;


        case RBIC1::TQUAD_REPLY:
            m_tQuadReply = x.m_tQuadReply;
            break;


        case RBIC1::OUTLINTLIN_REPLY:
            m_outLinTLinReply = x.m_outLinTLinReply;
            break;


        case RBIC1::OUTQUADTLIN_REPLY:
            m_outQuadTLinReply = x.m_outQuadTLinReply;
            break;


        case RBIC1::OUTLINTQUAD_REPLY:
            m_outLinTQuadReply = x.m_outLinTQuadReply;
            break;


        case RBIC1::OUTQUADTQUAD_REPLY:
            m_outQuadTQuadReply = x.m_outQuadTQuadReply;
            break;


        case RBIC1::ZMD31050_CAL1_REPLY:
            m_zmd31050Cal1Reply = x.m_zmd31050Cal1Reply;
            break;


        case RBIC1::ZMD31050_SIM1_REPLY:
            m_zmd31050Sim1Reply = x.m_zmd31050Sim1Reply;
            break;


        case RBIC1::DLLVERSION_REPLY:
            m_dllVersionReply = x.m_dllVersionReply;
            break;


        case RBIC1::GETMESSAGE_REPLY:
            m_getMessageReply = x.m_getMessageReply;
            break;

        default:
            break;
    }
}

ReplyUnion::ReplyUnion(
        ReplyUnion&& x) noexcept
{
    m__d = x.m__d;

    switch (m__d)
    {
        case RBIC1::OUTLIN_REPLY:
            m_outLinReply = std::move(x.m_outLinReply);

            break;


        case RBIC1::TLIN_REPLY:
            m_tLinReply = std::move(x.m_tLinReply);

            break;


        case RBIC1::OUTQUAD_REPLY:
            m_outQuadReply = std::move(x.m_outQuadReply);

            break;


        case RBIC1::OUTTHIRD_REPLY:
            m_outThirdReply = std::move(x.m_outThirdReply);

            break;


        case RBIC1::TQUAD_REPLY:
            m_tQuadReply = std::move(x.m_tQuadReply);

            break;


        case RBIC1::OUTLINTLIN_REPLY:
            m_outLinTLinReply = std::move(x.m_outLinTLinReply);

            break;


        case RBIC1::OUTQUADTLIN_REPLY:
            m_outQuadTLinReply = std::move(x.m_outQuadTLinReply);

            break;


        case RBIC1::OUTLINTQUAD_REPLY:
            m_outLinTQuadReply = std::move(x.m_outLinTQuadReply);

            break;


        case RBIC1::OUTQUADTQUAD_REPLY:
            m_outQuadTQuadReply = std::move(x.m_outQuadTQuadReply);

            break;


        case RBIC1::ZMD31050_CAL1_REPLY:
            m_zmd31050Cal1Reply = std::move(x.m_zmd31050Cal1Reply);

            break;


        case RBIC1::ZMD31050_SIM1_REPLY:
            m_zmd31050Sim1Reply = std::move(x.m_zmd31050Sim1Reply);

            break;


        case RBIC1::DLLVERSION_REPLY:
            m_dllVersionReply = std::move(x.m_dllVersionReply);

            break;


        case RBIC1::GETMESSAGE_REPLY:
            m_getMessageReply = std::move(x.m_getMessageReply);

            break;

        default:
            break;
    }
}

ReplyUnion& ReplyUnion::operator =(
        const ReplyUnion& x)
{
    m__d = x.m__d;

    switch (m__d)
    {
        case RBIC1::OUTLIN_REPLY:
            m_outLinReply = x.m_outLinReply;
            break;


        case RBIC1::TLIN_REPLY:
            m_tLinReply = x.m_tLinReply;
            break;


        case RBIC1::OUTQUAD_REPLY:
            m_outQuadReply = x.m_outQuadReply;
            break;


        case RBIC1::OUTTHIRD_REPLY:
            m_outThirdReply = x.m_outThirdReply;
            break;


        case RBIC1::TQUAD_REPLY:
            m_tQuadReply = x.m_tQuadReply;
            break;


        case RBIC1::OUTLINTLIN_REPLY:
            m_outLinTLinReply = x.m_outLinTLinReply;
            break;


        case RBIC1::OUTQUADTLIN_REPLY:
            m_outQuadTLinReply = x.m_outQuadTLinReply;
            break;


        case RBIC1::OUTLINTQUAD_REPLY:
            m_outLinTQuadReply = x.m_outLinTQuadReply;
            break;


        case RBIC1::OUTQUADTQUAD_REPLY:
            m_outQuadTQuadReply = x.m_outQuadTQuadReply;
            break;


        case RBIC1::ZMD31050_CAL1_REPLY:
            m_zmd31050Cal1Reply = x.m_zmd31050Cal1Reply;
            break;


        case RBIC1::ZMD31050_SIM1_REPLY:
            m_zmd31050Sim1Reply = x.m_zmd31050Sim1Reply;
            break;


        case RBIC1::DLLVERSION_REPLY:
            m_dllVersionReply = x.m_dllVersionReply;
            break;


        case RBIC1::GETMESSAGE_REPLY:
            m_getMessageReply = x.m_getMessageReply;
            break;

        default:
            break;
    }

    return *this;
}

ReplyUnion& ReplyUnion::operator =(
        ReplyUnion&& x) noexcept
{
    m__d = x.m__d;

    switch (m__d)
    {
        case RBIC1::OUTLIN_REPLY:
            m_outLinReply = std::move(x.m_outLinReply);

            break;


        case RBIC1::TLIN_REPLY:
            m_tLinReply = std::move(x.m_tLinReply);

            break;


        case RBIC1::OUTQUAD_REPLY:
            m_outQuadReply = std::move(x.m_outQuadReply);

            break;


        case RBIC1::OUTTHIRD_REPLY:
            m_outThirdReply = std::move(x.m_outThirdReply);

            break;


        case RBIC1::TQUAD_REPLY:
            m_tQuadReply = std::move(x.m_tQuadReply);

            break;


        case RBIC1::OUTLINTLIN_REPLY:
            m_outLinTLinReply = std::move(x.m_outLinTLinReply);

            break;


        case RBIC1::OUTQUADTLIN_REPLY:
            m_outQuadTLinReply = std::move(x.m_outQuadTLinReply);

            break;


        case RBIC1::OUTLINTQUAD_REPLY:
            m_outLinTQuadReply = std::move(x.m_outLinTQuadReply);

            break;


        case RBIC1::OUTQUADTQUAD_REPLY:
            m_outQuadTQuadReply = std::move(x.m_outQuadTQuadReply);

            break;


        case RBIC1::ZMD31050_CAL1_REPLY:
            m_zmd31050Cal1Reply = std::move(x.m_zmd31050Cal1Reply);

            break;


        case RBIC1::ZMD31050_SIM1_REPLY:
            m_zmd31050Sim1Reply = std::move(x.m_zmd31050Sim1Reply);

            break;


        case RBIC1::DLLVERSION_REPLY:
            m_dllVersionReply = std::move(x.m_dllVersionReply);

            break;


        case RBIC1::GETMESSAGE_REPLY:
            m_getMessageReply = std::move(x.m_getMessageReply);

            break;

        default:
            break;
    }

    return *this;
}

bool ReplyUnion::operator ==(
        const ReplyUnion& x) const
{
    if (m__d != x.m__d)
    {
        return false;
    }

    switch (m__d)
    {
        case RBIC1::OUTLIN_REPLY:
            return (m_outLinReply == x.m_outLinReply);
            break;


        case RBIC1::TLIN_REPLY:
            return (m_tLinReply == x.m_tLinReply);
            break;


        case RBIC1::OUTQUAD_REPLY:
            return (m_outQuadReply == x.m_outQuadReply);
            break;


        case RBIC1::OUTTHIRD_REPLY:
            return (m_outThirdReply == x.m_outThirdReply);
            break;


        case RBIC1::TQUAD_REPLY:
            return (m_tQuadReply == x.m_tQuadReply);
            break;


        case RBIC1::OUTLINTLIN_REPLY:
            return (m_outLinTLinReply == x.m_outLinTLinReply);
            break;


        case RBIC1::OUTQUADTLIN_REPLY:
            return (m_outQuadTLinReply == x.m_outQuadTLinReply);
            break;


        case RBIC1::OUTLINTQUAD_REPLY:
            return (m_outLinTQuadReply == x.m_outLinTQuadReply);
            break;


        case RBIC1::OUTQUADTQUAD_REPLY:
            return (m_outQuadTQuadReply == x.m_outQuadTQuadReply);
            break;


        case RBIC1::ZMD31050_CAL1_REPLY:
            return (m_zmd31050Cal1Reply == x.m_zmd31050Cal1Reply);
            break;


        case RBIC1::ZMD31050_SIM1_REPLY:
            return (m_zmd31050Sim1Reply == x.m_zmd31050Sim1Reply);
            break;


        case RBIC1::DLLVERSION_REPLY:
            return (m_dllVersionReply == x.m_dllVersionReply);
            break;


        case RBIC1::GETMESSAGE_REPLY:
            return (m_getMessageReply == x.m_getMessageReply);
            break;

        default:
            break;
    }
    return false;
}

bool ReplyUnion::operator !=(
        const ReplyUnion& x) const
{
    return !(*this == x);
}

void ReplyUnion::_d(
        RBIC1::MessageType __d)
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::OUTLIN_REPLY:
            switch (__d)
            {
                case RBIC1::OUTLIN_REPLY:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case RBIC1::TLIN_REPLY:
            switch (__d)
            {
                case RBIC1::TLIN_REPLY:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case RBIC1::OUTQUAD_REPLY:
            switch (__d)
            {
                case RBIC1::OUTQUAD_REPLY:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case RBIC1::OUTTHIRD_REPLY:
            switch (__d)
            {
                case RBIC1::OUTTHIRD_REPLY:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case RBIC1::TQUAD_REPLY:
            switch (__d)
            {
                case RBIC1::TQUAD_REPLY:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case RBIC1::OUTLINTLIN_REPLY:
            switch (__d)
            {
                case RBIC1::OUTLINTLIN_REPLY:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case RBIC1::OUTQUADTLIN_REPLY:
            switch (__d)
            {
                case RBIC1::OUTQUADTLIN_REPLY:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case RBIC1::OUTLINTQUAD_REPLY:
            switch (__d)
            {
                case RBIC1::OUTLINTQUAD_REPLY:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case RBIC1::OUTQUADTQUAD_REPLY:
            switch (__d)
            {
                case RBIC1::OUTQUADTQUAD_REPLY:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case RBIC1::ZMD31050_CAL1_REPLY:
            switch (__d)
            {
                case RBIC1::ZMD31050_CAL1_REPLY:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case RBIC1::ZMD31050_SIM1_REPLY:
            switch (__d)
            {
                case RBIC1::ZMD31050_SIM1_REPLY:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case RBIC1::DLLVERSION_REPLY:
            switch (__d)
            {
                case RBIC1::DLLVERSION_REPLY:
                    b = true;
                    break;
                default:
                    break;
            }
            break;


        case RBIC1::GETMESSAGE_REPLY:
            switch (__d)
            {
                case RBIC1::GETMESSAGE_REPLY:
                    b = true;
                    break;
                default:
                    break;
            }
            break;

        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("Discriminator doesn't correspond with the selected union member");
    }

    m__d = __d;
}

RBIC1::MessageType ReplyUnion::_d() const
{
    return m__d;
}

RBIC1::MessageType& ReplyUnion::_d()
{
    return m__d;
}

void ReplyUnion::outLinReply(
        const RBIC1::OutLinReply& _outLinReply)
{
    m_outLinReply = _outLinReply;
    m__d = RBIC1::OUTLIN_REPLY;

}

void ReplyUnion::outLinReply(
        RBIC1::OutLinReply&& _outLinReply)
{
    m_outLinReply = std::move(_outLinReply);
    m__d = RBIC1::OUTLIN_REPLY;

}

const RBIC1::OutLinReply& ReplyUnion::outLinReply() const
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::OUTLIN_REPLY:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_outLinReply;
}

RBIC1::OutLinReply& ReplyUnion::outLinReply()
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::OUTLIN_REPLY:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_outLinReply;
}


void ReplyUnion::tLinReply(
        const RBIC1::TLinReply& _tLinReply)
{
    m_tLinReply = _tLinReply;
    m__d = RBIC1::TLIN_REPLY;

}

void ReplyUnion::tLinReply(
        RBIC1::TLinReply&& _tLinReply)
{
    m_tLinReply = std::move(_tLinReply);
    m__d = RBIC1::TLIN_REPLY;

}

const RBIC1::TLinReply& ReplyUnion::tLinReply() const
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::TLIN_REPLY:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_tLinReply;
}

RBIC1::TLinReply& ReplyUnion::tLinReply()
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::TLIN_REPLY:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_tLinReply;
}


void ReplyUnion::outQuadReply(
        const RBIC1::OutQuadReply& _outQuadReply)
{
    m_outQuadReply = _outQuadReply;
    m__d = RBIC1::OUTQUAD_REPLY;

}

void ReplyUnion::outQuadReply(
        RBIC1::OutQuadReply&& _outQuadReply)
{
    m_outQuadReply = std::move(_outQuadReply);
    m__d = RBIC1::OUTQUAD_REPLY;

}

const RBIC1::OutQuadReply& ReplyUnion::outQuadReply() const
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::OUTQUAD_REPLY:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_outQuadReply;
}

RBIC1::OutQuadReply& ReplyUnion::outQuadReply()
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::OUTQUAD_REPLY:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_outQuadReply;
}


void ReplyUnion::outThirdReply(
        const RBIC1::OutThirdReply& _outThirdReply)
{
    m_outThirdReply = _outThirdReply;
    m__d = RBIC1::OUTTHIRD_REPLY;

}

void ReplyUnion::outThirdReply(
        RBIC1::OutThirdReply&& _outThirdReply)
{
    m_outThirdReply = std::move(_outThirdReply);
    m__d = RBIC1::OUTTHIRD_REPLY;

}

const RBIC1::OutThirdReply& ReplyUnion::outThirdReply() const
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::OUTTHIRD_REPLY:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_outThirdReply;
}

RBIC1::OutThirdReply& ReplyUnion::outThirdReply()
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::OUTTHIRD_REPLY:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_outThirdReply;
}


void ReplyUnion::tQuadReply(
        const RBIC1::TQuadReply& _tQuadReply)
{
    m_tQuadReply = _tQuadReply;
    m__d = RBIC1::TQUAD_REPLY;

}

void ReplyUnion::tQuadReply(
        RBIC1::TQuadReply&& _tQuadReply)
{
    m_tQuadReply = std::move(_tQuadReply);
    m__d = RBIC1::TQUAD_REPLY;

}

const RBIC1::TQuadReply& ReplyUnion::tQuadReply() const
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::TQUAD_REPLY:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_tQuadReply;
}

RBIC1::TQuadReply& ReplyUnion::tQuadReply()
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::TQUAD_REPLY:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_tQuadReply;
}


void ReplyUnion::outLinTLinReply(
        const RBIC1::OutLinTLinReply& _outLinTLinReply)
{
    m_outLinTLinReply = _outLinTLinReply;
    m__d = RBIC1::OUTLINTLIN_REPLY;

}

void ReplyUnion::outLinTLinReply(
        RBIC1::OutLinTLinReply&& _outLinTLinReply)
{
    m_outLinTLinReply = std::move(_outLinTLinReply);
    m__d = RBIC1::OUTLINTLIN_REPLY;

}

const RBIC1::OutLinTLinReply& ReplyUnion::outLinTLinReply() const
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::OUTLINTLIN_REPLY:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_outLinTLinReply;
}

RBIC1::OutLinTLinReply& ReplyUnion::outLinTLinReply()
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::OUTLINTLIN_REPLY:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_outLinTLinReply;
}


void ReplyUnion::outQuadTLinReply(
        const RBIC1::OutQuadTLinReply& _outQuadTLinReply)
{
    m_outQuadTLinReply = _outQuadTLinReply;
    m__d = RBIC1::OUTQUADTLIN_REPLY;

}

void ReplyUnion::outQuadTLinReply(
        RBIC1::OutQuadTLinReply&& _outQuadTLinReply)
{
    m_outQuadTLinReply = std::move(_outQuadTLinReply);
    m__d = RBIC1::OUTQUADTLIN_REPLY;

}

const RBIC1::OutQuadTLinReply& ReplyUnion::outQuadTLinReply() const
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::OUTQUADTLIN_REPLY:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_outQuadTLinReply;
}

RBIC1::OutQuadTLinReply& ReplyUnion::outQuadTLinReply()
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::OUTQUADTLIN_REPLY:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_outQuadTLinReply;
}


void ReplyUnion::outLinTQuadReply(
        const RBIC1::OutLinTQuadReply& _outLinTQuadReply)
{
    m_outLinTQuadReply = _outLinTQuadReply;
    m__d = RBIC1::OUTLINTQUAD_REPLY;

}

void ReplyUnion::outLinTQuadReply(
        RBIC1::OutLinTQuadReply&& _outLinTQuadReply)
{
    m_outLinTQuadReply = std::move(_outLinTQuadReply);
    m__d = RBIC1::OUTLINTQUAD_REPLY;

}

const RBIC1::OutLinTQuadReply& ReplyUnion::outLinTQuadReply() const
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::OUTLINTQUAD_REPLY:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_outLinTQuadReply;
}

RBIC1::OutLinTQuadReply& ReplyUnion::outLinTQuadReply()
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::OUTLINTQUAD_REPLY:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_outLinTQuadReply;
}


void ReplyUnion::outQuadTQuadReply(
        const RBIC1::OutQuadTQuadReply& _outQuadTQuadReply)
{
    m_outQuadTQuadReply = _outQuadTQuadReply;
    m__d = RBIC1::OUTQUADTQUAD_REPLY;

}

void ReplyUnion::outQuadTQuadReply(
        RBIC1::OutQuadTQuadReply&& _outQuadTQuadReply)
{
    m_outQuadTQuadReply = std::move(_outQuadTQuadReply);
    m__d = RBIC1::OUTQUADTQUAD_REPLY;

}

const RBIC1::OutQuadTQuadReply& ReplyUnion::outQuadTQuadReply() const
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::OUTQUADTQUAD_REPLY:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_outQuadTQuadReply;
}

RBIC1::OutQuadTQuadReply& ReplyUnion::outQuadTQuadReply()
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::OUTQUADTQUAD_REPLY:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_outQuadTQuadReply;
}


void ReplyUnion::zmd31050Cal1Reply(
        const RBIC1::ZMD31050Cal1Reply& _zmd31050Cal1Reply)
{
    m_zmd31050Cal1Reply = _zmd31050Cal1Reply;
    m__d = RBIC1::ZMD31050_CAL1_REPLY;

}

void ReplyUnion::zmd31050Cal1Reply(
        RBIC1::ZMD31050Cal1Reply&& _zmd31050Cal1Reply)
{
    m_zmd31050Cal1Reply = std::move(_zmd31050Cal1Reply);
    m__d = RBIC1::ZMD31050_CAL1_REPLY;

}

const RBIC1::ZMD31050Cal1Reply& ReplyUnion::zmd31050Cal1Reply() const
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::ZMD31050_CAL1_REPLY:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_zmd31050Cal1Reply;
}

RBIC1::ZMD31050Cal1Reply& ReplyUnion::zmd31050Cal1Reply()
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::ZMD31050_CAL1_REPLY:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_zmd31050Cal1Reply;
}


void ReplyUnion::zmd31050Sim1Reply(
        const RBIC1::ZMD31050Sim1Reply& _zmd31050Sim1Reply)
{
    m_zmd31050Sim1Reply = _zmd31050Sim1Reply;
    m__d = RBIC1::ZMD31050_SIM1_REPLY;

}

void ReplyUnion::zmd31050Sim1Reply(
        RBIC1::ZMD31050Sim1Reply&& _zmd31050Sim1Reply)
{
    m_zmd31050Sim1Reply = std::move(_zmd31050Sim1Reply);
    m__d = RBIC1::ZMD31050_SIM1_REPLY;

}

const RBIC1::ZMD31050Sim1Reply& ReplyUnion::zmd31050Sim1Reply() const
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::ZMD31050_SIM1_REPLY:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_zmd31050Sim1Reply;
}

RBIC1::ZMD31050Sim1Reply& ReplyUnion::zmd31050Sim1Reply()
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::ZMD31050_SIM1_REPLY:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_zmd31050Sim1Reply;
}


void ReplyUnion::dllVersionReply(
        const RBIC1::DLLVersionReply& _dllVersionReply)
{
    m_dllVersionReply = _dllVersionReply;
    m__d = RBIC1::DLLVERSION_REPLY;

}

void ReplyUnion::dllVersionReply(
        RBIC1::DLLVersionReply&& _dllVersionReply)
{
    m_dllVersionReply = std::move(_dllVersionReply);
    m__d = RBIC1::DLLVERSION_REPLY;

}

const RBIC1::DLLVersionReply& ReplyUnion::dllVersionReply() const
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::DLLVERSION_REPLY:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_dllVersionReply;
}

RBIC1::DLLVersionReply& ReplyUnion::dllVersionReply()
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::DLLVERSION_REPLY:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_dllVersionReply;
}


void ReplyUnion::getMessageReply(
        const RBIC1::GetMessageReply& _getMessageReply)
{
    m_getMessageReply = _getMessageReply;
    m__d = RBIC1::GETMESSAGE_REPLY;

}

void ReplyUnion::getMessageReply(
        RBIC1::GetMessageReply&& _getMessageReply)
{
    m_getMessageReply = std::move(_getMessageReply);
    m__d = RBIC1::GETMESSAGE_REPLY;

}

const RBIC1::GetMessageReply& ReplyUnion::getMessageReply() const
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::GETMESSAGE_REPLY:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_getMessageReply;
}

RBIC1::GetMessageReply& ReplyUnion::getMessageReply()
{
    bool b = false;

    switch (m__d)
    {
        case RBIC1::GETMESSAGE_REPLY:
            b = true;
            break;
        default:
            break;
    }

    if (!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_getMessageReply;
}




GenericRequest::GenericRequest()
{
}

GenericRequest::~GenericRequest()
{
}

GenericRequest::GenericRequest(
        const GenericRequest& x)
{
    m_requestId = x.m_requestId;
    m_request = x.m_request;
}

GenericRequest::GenericRequest(
        GenericRequest&& x) noexcept
{
    m_requestId = x.m_requestId;
    m_request = std::move(x.m_request);
}

GenericRequest& GenericRequest::operator =(
        const GenericRequest& x)
{

    m_requestId = x.m_requestId;
    m_request = x.m_request;
    return *this;
}

GenericRequest& GenericRequest::operator =(
        GenericRequest&& x) noexcept
{

    m_requestId = x.m_requestId;
    m_request = std::move(x.m_request);
    return *this;
}

bool GenericRequest::operator ==(
        const GenericRequest& x) const
{
    return (m_requestId == x.m_requestId &&
           m_request == x.m_request);
}

bool GenericRequest::operator !=(
        const GenericRequest& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member requestId
 * @param _requestId New value for member requestId
 */
void GenericRequest::requestId(
        uint32_t _requestId)
{
    m_requestId = _requestId;
}

/*!
 * @brief This function returns the value of member requestId
 * @return Value of member requestId
 */
uint32_t GenericRequest::requestId() const
{
    return m_requestId;
}

/*!
 * @brief This function returns a reference to member requestId
 * @return Reference to member requestId
 */
uint32_t& GenericRequest::requestId()
{
    return m_requestId;
}


/*!
 * @brief This function copies the value in member request
 * @param _request New value to be copied in member request
 */
void GenericRequest::request(
        const RBIC1::RequestUnion& _request)
{
    m_request = _request;
}

/*!
 * @brief This function moves the value in member request
 * @param _request New value to be moved in member request
 */
void GenericRequest::request(
        RBIC1::RequestUnion&& _request)
{
    m_request = std::move(_request);
}

/*!
 * @brief This function returns a constant reference to member request
 * @return Constant reference to member request
 */
const RBIC1::RequestUnion& GenericRequest::request() const
{
    return m_request;
}

/*!
 * @brief This function returns a reference to member request
 * @return Reference to member request
 */
RBIC1::RequestUnion& GenericRequest::request()
{
    return m_request;
}




GenericReply::GenericReply()
{
}

GenericReply::~GenericReply()
{
}

GenericReply::GenericReply(
        const GenericReply& x)
{
    m_requestId = x.m_requestId;
    m_reply = x.m_reply;
}

GenericReply::GenericReply(
        GenericReply&& x) noexcept
{
    m_requestId = x.m_requestId;
    m_reply = std::move(x.m_reply);
}

GenericReply& GenericReply::operator =(
        const GenericReply& x)
{

    m_requestId = x.m_requestId;
    m_reply = x.m_reply;
    return *this;
}

GenericReply& GenericReply::operator =(
        GenericReply&& x) noexcept
{

    m_requestId = x.m_requestId;
    m_reply = std::move(x.m_reply);
    return *this;
}

bool GenericReply::operator ==(
        const GenericReply& x) const
{
    return (m_requestId == x.m_requestId &&
           m_reply == x.m_reply);
}

bool GenericReply::operator !=(
        const GenericReply& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member requestId
 * @param _requestId New value for member requestId
 */
void GenericReply::requestId(
        uint32_t _requestId)
{
    m_requestId = _requestId;
}

/*!
 * @brief This function returns the value of member requestId
 * @return Value of member requestId
 */
uint32_t GenericReply::requestId() const
{
    return m_requestId;
}

/*!
 * @brief This function returns a reference to member requestId
 * @return Reference to member requestId
 */
uint32_t& GenericReply::requestId()
{
    return m_requestId;
}


/*!
 * @brief This function copies the value in member reply
 * @param _reply New value to be copied in member reply
 */
void GenericReply::reply(
        const RBIC1::ReplyUnion& _reply)
{
    m_reply = _reply;
}

/*!
 * @brief This function moves the value in member reply
 * @param _reply New value to be moved in member reply
 */
void GenericReply::reply(
        RBIC1::ReplyUnion&& _reply)
{
    m_reply = std::move(_reply);
}

/*!
 * @brief This function returns a constant reference to member reply
 * @return Constant reference to member reply
 */
const RBIC1::ReplyUnion& GenericReply::reply() const
{
    return m_reply;
}

/*!
 * @brief This function returns a reference to member reply
 * @return Reference to member reply
 */
RBIC1::ReplyUnion& GenericReply::reply()
{
    return m_reply;
}




} // namespace RBIC1
// Include auxiliary functions like for serializing/deserializing.
#include "RBIC1CdrAux.ipp"

