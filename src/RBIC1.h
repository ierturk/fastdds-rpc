// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file RBIC1.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_RBIC1_RBIC1_H_
#define _FAST_DDS_GENERATED_RBIC1_RBIC1_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>



#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(RBIC1_SOURCE)
#define RBIC1_DllAPI __declspec( dllexport )
#else
#define RBIC1_DllAPI __declspec( dllimport )
#endif // RBIC1_SOURCE
#else
#define RBIC1_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define RBIC1_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima



namespace RBIC1 {

/*!
 * @brief This class represents the enumeration MessageType defined by the user in the IDL file.
 * @ingroup RBIC1
 */
enum MessageType : uint32_t
{
    OUTLIN_REQUEST,
    OUTLIN_REPLY,
    TLIN_REQUEST,
    TLIN_REPLY,
    OUTQUAD_REQUEST,
    OUTQUAD_REPLY,
    OUTTHIRD_REQUEST,
    OUTTHIRD_REPLY,
    TQUAD_REQUEST,
    TQUAD_REPLY,
    OUTLINTLIN_REQUEST,
    OUTLINTLIN_REPLY,
    OUTQUADTLIN_REQUEST,
    OUTQUADTLIN_REPLY,
    OUTLINTQUAD_REQUEST,
    OUTLINTQUAD_REPLY,
    OUTQUADTQUAD_REQUEST,
    OUTQUADTQUAD_REPLY,
    ZMD31050_CAL1_REQUEST,
    ZMD31050_CAL1_REPLY,
    ZMD31050_SIM1_REQUEST,
    ZMD31050_SIM1_REPLY,
    DLLVERSION_REQUEST,
    DLLVERSION_REPLY,
    GETMESSAGE_REQUEST,
    GETMESSAGE_REPLY
};


/*!
 * @brief This class represents the structure OutLinRequest defined by the user in the IDL file.
 * @ingroup RBIC1
 */
class OutLinRequest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport OutLinRequest();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~OutLinRequest();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RBIC1::OutLinRequest that will be copied.
     */
    eProsima_user_DllExport OutLinRequest(
            const OutLinRequest& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RBIC1::OutLinRequest that will be copied.
     */
    eProsima_user_DllExport OutLinRequest(
            OutLinRequest&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RBIC1::OutLinRequest that will be copied.
     */
    eProsima_user_DllExport OutLinRequest& operator =(
            const OutLinRequest& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RBIC1::OutLinRequest that will be copied.
     */
    eProsima_user_DllExport OutLinRequest& operator =(
            OutLinRequest&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::OutLinRequest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const OutLinRequest& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::OutLinRequest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const OutLinRequest& x) const;

    /*!
     * @brief This function sets a value in member zp1m
     * @param _zp1m New value for member zp1m
     */
    eProsima_user_DllExport void zp1m(
            float _zp1m);

    /*!
     * @brief This function returns the value of member zp1m
     * @return Value of member zp1m
     */
    eProsima_user_DllExport float zp1m() const;

    /*!
     * @brief This function returns a reference to member zp1m
     * @return Reference to member zp1m
     */
    eProsima_user_DllExport float& zp1m();


    /*!
     * @brief This function sets a value in member zp2m
     * @param _zp2m New value for member zp2m
     */
    eProsima_user_DllExport void zp2m(
            float _zp2m);

    /*!
     * @brief This function returns the value of member zp2m
     * @return Value of member zp2m
     */
    eProsima_user_DllExport float zp2m() const;

    /*!
     * @brief This function returns a reference to member zp2m
     * @return Reference to member zp2m
     */
    eProsima_user_DllExport float& zp2m();


    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            float _a);

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport float a() const;

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport float& a();


    /*!
     * @brief This function sets a value in member b
     * @param _b New value for member b
     */
    eProsima_user_DllExport void b(
            float _b);

    /*!
     * @brief This function returns the value of member b
     * @return Value of member b
     */
    eProsima_user_DllExport float b() const;

    /*!
     * @brief This function returns a reference to member b
     * @return Reference to member b
     */
    eProsima_user_DllExport float& b();

private:

    float m_zp1m{0.0};
    float m_zp2m{0.0};
    float m_a{0.0};
    float m_b{0.0};

};


/*!
 * @brief This class represents the structure OutLinReply defined by the user in the IDL file.
 * @ingroup RBIC1
 */
class OutLinReply
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport OutLinReply();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~OutLinReply();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RBIC1::OutLinReply that will be copied.
     */
    eProsima_user_DllExport OutLinReply(
            const OutLinReply& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RBIC1::OutLinReply that will be copied.
     */
    eProsima_user_DllExport OutLinReply(
            OutLinReply&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RBIC1::OutLinReply that will be copied.
     */
    eProsima_user_DllExport OutLinReply& operator =(
            const OutLinReply& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RBIC1::OutLinReply that will be copied.
     */
    eProsima_user_DllExport OutLinReply& operator =(
            OutLinReply&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::OutLinReply object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const OutLinReply& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::OutLinReply object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const OutLinReply& x) const;

    /*!
     * @brief This function sets a value in member success
     * @param _success New value for member success
     */
    eProsima_user_DllExport void success(
            bool _success);

    /*!
     * @brief This function returns the value of member success
     * @return Value of member success
     */
    eProsima_user_DllExport bool success() const;

    /*!
     * @brief This function returns a reference to member success
     * @return Reference to member success
     */
    eProsima_user_DllExport bool& success();


    /*!
     * @brief This function sets a value in member c0
     * @param _c0 New value for member c0
     */
    eProsima_user_DllExport void c0(
            float _c0);

    /*!
     * @brief This function returns the value of member c0
     * @return Value of member c0
     */
    eProsima_user_DllExport float c0() const;

    /*!
     * @brief This function returns a reference to member c0
     * @return Reference to member c0
     */
    eProsima_user_DllExport float& c0();


    /*!
     * @brief This function sets a value in member c1
     * @param _c1 New value for member c1
     */
    eProsima_user_DllExport void c1(
            float _c1);

    /*!
     * @brief This function returns the value of member c1
     * @return Value of member c1
     */
    eProsima_user_DllExport float c1() const;

    /*!
     * @brief This function returns a reference to member c1
     * @return Reference to member c1
     */
    eProsima_user_DllExport float& c1();

private:

    bool m_success{false};
    float m_c0{0.0};
    float m_c1{0.0};

};


/*!
 * @brief This class represents the structure TLinRequest defined by the user in the IDL file.
 * @ingroup RBIC1
 */
class TLinRequest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport TLinRequest();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~TLinRequest();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RBIC1::TLinRequest that will be copied.
     */
    eProsima_user_DllExport TLinRequest(
            const TLinRequest& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RBIC1::TLinRequest that will be copied.
     */
    eProsima_user_DllExport TLinRequest(
            TLinRequest&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RBIC1::TLinRequest that will be copied.
     */
    eProsima_user_DllExport TLinRequest& operator =(
            const TLinRequest& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RBIC1::TLinRequest that will be copied.
     */
    eProsima_user_DllExport TLinRequest& operator =(
            TLinRequest&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::TLinRequest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const TLinRequest& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::TLinRequest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const TLinRequest& x) const;

    /*!
     * @brief This function sets a value in member ztMed
     * @param _ztMed New value for member ztMed
     */
    eProsima_user_DllExport void ztMed(
            float _ztMed);

    /*!
     * @brief This function returns the value of member ztMed
     * @return Value of member ztMed
     */
    eProsima_user_DllExport float ztMed() const;

    /*!
     * @brief This function returns a reference to member ztMed
     * @return Reference to member ztMed
     */
    eProsima_user_DllExport float& ztMed();


    /*!
     * @brief This function sets a value in member ztUpp
     * @param _ztUpp New value for member ztUpp
     */
    eProsima_user_DllExport void ztUpp(
            float _ztUpp);

    /*!
     * @brief This function returns the value of member ztUpp
     * @return Value of member ztUpp
     */
    eProsima_user_DllExport float ztUpp() const;

    /*!
     * @brief This function returns a reference to member ztUpp
     * @return Reference to member ztUpp
     */
    eProsima_user_DllExport float& ztUpp();


    /*!
     * @brief This function sets a value in member tMed
     * @param _tMed New value for member tMed
     */
    eProsima_user_DllExport void tMed(
            float _tMed);

    /*!
     * @brief This function returns the value of member tMed
     * @return Value of member tMed
     */
    eProsima_user_DllExport float tMed() const;

    /*!
     * @brief This function returns a reference to member tMed
     * @return Reference to member tMed
     */
    eProsima_user_DllExport float& tMed();


    /*!
     * @brief This function sets a value in member tUpp
     * @param _tUpp New value for member tUpp
     */
    eProsima_user_DllExport void tUpp(
            float _tUpp);

    /*!
     * @brief This function returns the value of member tUpp
     * @return Value of member tUpp
     */
    eProsima_user_DllExport float tUpp() const;

    /*!
     * @brief This function returns a reference to member tUpp
     * @return Reference to member tUpp
     */
    eProsima_user_DllExport float& tUpp();

private:

    float m_ztMed{0.0};
    float m_ztUpp{0.0};
    float m_tMed{0.0};
    float m_tUpp{0.0};

};


/*!
 * @brief This class represents the structure TLinReply defined by the user in the IDL file.
 * @ingroup RBIC1
 */
class TLinReply
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport TLinReply();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~TLinReply();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RBIC1::TLinReply that will be copied.
     */
    eProsima_user_DllExport TLinReply(
            const TLinReply& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RBIC1::TLinReply that will be copied.
     */
    eProsima_user_DllExport TLinReply(
            TLinReply&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RBIC1::TLinReply that will be copied.
     */
    eProsima_user_DllExport TLinReply& operator =(
            const TLinReply& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RBIC1::TLinReply that will be copied.
     */
    eProsima_user_DllExport TLinReply& operator =(
            TLinReply&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::TLinReply object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const TLinReply& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::TLinReply object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const TLinReply& x) const;

    /*!
     * @brief This function sets a value in member success
     * @param _success New value for member success
     */
    eProsima_user_DllExport void success(
            bool _success);

    /*!
     * @brief This function returns the value of member success
     * @return Value of member success
     */
    eProsima_user_DllExport bool success() const;

    /*!
     * @brief This function returns a reference to member success
     * @return Reference to member success
     */
    eProsima_user_DllExport bool& success();


    /*!
     * @brief This function sets a value in member ct0
     * @param _ct0 New value for member ct0
     */
    eProsima_user_DllExport void ct0(
            float _ct0);

    /*!
     * @brief This function returns the value of member ct0
     * @return Value of member ct0
     */
    eProsima_user_DllExport float ct0() const;

    /*!
     * @brief This function returns a reference to member ct0
     * @return Reference to member ct0
     */
    eProsima_user_DllExport float& ct0();


    /*!
     * @brief This function sets a value in member ct1
     * @param _ct1 New value for member ct1
     */
    eProsima_user_DllExport void ct1(
            float _ct1);

    /*!
     * @brief This function returns the value of member ct1
     * @return Value of member ct1
     */
    eProsima_user_DllExport float ct1() const;

    /*!
     * @brief This function returns a reference to member ct1
     * @return Reference to member ct1
     */
    eProsima_user_DllExport float& ct1();

private:

    bool m_success{false};
    float m_ct0{0.0};
    float m_ct1{0.0};

};


/*!
 * @brief This class represents the structure OutQuadRequest defined by the user in the IDL file.
 * @ingroup RBIC1
 */
class OutQuadRequest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport OutQuadRequest();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~OutQuadRequest();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RBIC1::OutQuadRequest that will be copied.
     */
    eProsima_user_DllExport OutQuadRequest(
            const OutQuadRequest& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RBIC1::OutQuadRequest that will be copied.
     */
    eProsima_user_DllExport OutQuadRequest(
            OutQuadRequest&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RBIC1::OutQuadRequest that will be copied.
     */
    eProsima_user_DllExport OutQuadRequest& operator =(
            const OutQuadRequest& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RBIC1::OutQuadRequest that will be copied.
     */
    eProsima_user_DllExport OutQuadRequest& operator =(
            OutQuadRequest&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::OutQuadRequest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const OutQuadRequest& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::OutQuadRequest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const OutQuadRequest& x) const;

    /*!
     * @brief This function sets a value in member zp1m
     * @param _zp1m New value for member zp1m
     */
    eProsima_user_DllExport void zp1m(
            float _zp1m);

    /*!
     * @brief This function returns the value of member zp1m
     * @return Value of member zp1m
     */
    eProsima_user_DllExport float zp1m() const;

    /*!
     * @brief This function returns a reference to member zp1m
     * @return Reference to member zp1m
     */
    eProsima_user_DllExport float& zp1m();


    /*!
     * @brief This function sets a value in member zp2m
     * @param _zp2m New value for member zp2m
     */
    eProsima_user_DllExport void zp2m(
            float _zp2m);

    /*!
     * @brief This function returns the value of member zp2m
     * @return Value of member zp2m
     */
    eProsima_user_DllExport float zp2m() const;

    /*!
     * @brief This function returns a reference to member zp2m
     * @return Reference to member zp2m
     */
    eProsima_user_DllExport float& zp2m();


    /*!
     * @brief This function sets a value in member zp3m
     * @param _zp3m New value for member zp3m
     */
    eProsima_user_DllExport void zp3m(
            float _zp3m);

    /*!
     * @brief This function returns the value of member zp3m
     * @return Value of member zp3m
     */
    eProsima_user_DllExport float zp3m() const;

    /*!
     * @brief This function returns a reference to member zp3m
     * @return Reference to member zp3m
     */
    eProsima_user_DllExport float& zp3m();


    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            float _a);

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport float a() const;

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport float& a();


    /*!
     * @brief This function sets a value in member b
     * @param _b New value for member b
     */
    eProsima_user_DllExport void b(
            float _b);

    /*!
     * @brief This function returns the value of member b
     * @return Value of member b
     */
    eProsima_user_DllExport float b() const;

    /*!
     * @brief This function returns a reference to member b
     * @return Reference to member b
     */
    eProsima_user_DllExport float& b();


    /*!
     * @brief This function sets a value in member m
     * @param _m New value for member m
     */
    eProsima_user_DllExport void m(
            float _m);

    /*!
     * @brief This function returns the value of member m
     * @return Value of member m
     */
    eProsima_user_DllExport float m() const;

    /*!
     * @brief This function returns a reference to member m
     * @return Reference to member m
     */
    eProsima_user_DllExport float& m();


    /*!
     * @brief This function sets a value in member adcReso
     * @param _adcReso New value for member adcReso
     */
    eProsima_user_DllExport void adcReso(
            int32_t _adcReso);

    /*!
     * @brief This function returns the value of member adcReso
     * @return Value of member adcReso
     */
    eProsima_user_DllExport int32_t adcReso() const;

    /*!
     * @brief This function returns a reference to member adcReso
     * @return Reference to member adcReso
     */
    eProsima_user_DllExport int32_t& adcReso();

private:

    float m_zp1m{0.0};
    float m_zp2m{0.0};
    float m_zp3m{0.0};
    float m_a{0.0};
    float m_b{0.0};
    float m_m{0.0};
    int32_t m_adcReso{0};

};


/*!
 * @brief This class represents the structure OutQuadReply defined by the user in the IDL file.
 * @ingroup RBIC1
 */
class OutQuadReply
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport OutQuadReply();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~OutQuadReply();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RBIC1::OutQuadReply that will be copied.
     */
    eProsima_user_DllExport OutQuadReply(
            const OutQuadReply& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RBIC1::OutQuadReply that will be copied.
     */
    eProsima_user_DllExport OutQuadReply(
            OutQuadReply&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RBIC1::OutQuadReply that will be copied.
     */
    eProsima_user_DllExport OutQuadReply& operator =(
            const OutQuadReply& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RBIC1::OutQuadReply that will be copied.
     */
    eProsima_user_DllExport OutQuadReply& operator =(
            OutQuadReply&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::OutQuadReply object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const OutQuadReply& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::OutQuadReply object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const OutQuadReply& x) const;

    /*!
     * @brief This function sets a value in member success
     * @param _success New value for member success
     */
    eProsima_user_DllExport void success(
            bool _success);

    /*!
     * @brief This function returns the value of member success
     * @return Value of member success
     */
    eProsima_user_DllExport bool success() const;

    /*!
     * @brief This function returns a reference to member success
     * @return Reference to member success
     */
    eProsima_user_DllExport bool& success();


    /*!
     * @brief This function sets a value in member c0
     * @param _c0 New value for member c0
     */
    eProsima_user_DllExport void c0(
            float _c0);

    /*!
     * @brief This function returns the value of member c0
     * @return Value of member c0
     */
    eProsima_user_DllExport float c0() const;

    /*!
     * @brief This function returns a reference to member c0
     * @return Reference to member c0
     */
    eProsima_user_DllExport float& c0();


    /*!
     * @brief This function sets a value in member c1
     * @param _c1 New value for member c1
     */
    eProsima_user_DllExport void c1(
            float _c1);

    /*!
     * @brief This function returns the value of member c1
     * @return Value of member c1
     */
    eProsima_user_DllExport float c1() const;

    /*!
     * @brief This function returns a reference to member c1
     * @return Reference to member c1
     */
    eProsima_user_DllExport float& c1();


    /*!
     * @brief This function sets a value in member c2
     * @param _c2 New value for member c2
     */
    eProsima_user_DllExport void c2(
            float _c2);

    /*!
     * @brief This function returns the value of member c2
     * @return Value of member c2
     */
    eProsima_user_DllExport float c2() const;

    /*!
     * @brief This function returns a reference to member c2
     * @return Reference to member c2
     */
    eProsima_user_DllExport float& c2();

private:

    bool m_success{false};
    float m_c0{0.0};
    float m_c1{0.0};
    float m_c2{0.0};

};


/*!
 * @brief This class represents the structure OutThirdRequest defined by the user in the IDL file.
 * @ingroup RBIC1
 */
class OutThirdRequest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport OutThirdRequest();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~OutThirdRequest();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RBIC1::OutThirdRequest that will be copied.
     */
    eProsima_user_DllExport OutThirdRequest(
            const OutThirdRequest& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RBIC1::OutThirdRequest that will be copied.
     */
    eProsima_user_DllExport OutThirdRequest(
            OutThirdRequest&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RBIC1::OutThirdRequest that will be copied.
     */
    eProsima_user_DllExport OutThirdRequest& operator =(
            const OutThirdRequest& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RBIC1::OutThirdRequest that will be copied.
     */
    eProsima_user_DllExport OutThirdRequest& operator =(
            OutThirdRequest&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::OutThirdRequest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const OutThirdRequest& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::OutThirdRequest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const OutThirdRequest& x) const;

    /*!
     * @brief This function sets a value in member zp1m
     * @param _zp1m New value for member zp1m
     */
    eProsima_user_DllExport void zp1m(
            float _zp1m);

    /*!
     * @brief This function returns the value of member zp1m
     * @return Value of member zp1m
     */
    eProsima_user_DllExport float zp1m() const;

    /*!
     * @brief This function returns a reference to member zp1m
     * @return Reference to member zp1m
     */
    eProsima_user_DllExport float& zp1m();


    /*!
     * @brief This function sets a value in member zp2m
     * @param _zp2m New value for member zp2m
     */
    eProsima_user_DllExport void zp2m(
            float _zp2m);

    /*!
     * @brief This function returns the value of member zp2m
     * @return Value of member zp2m
     */
    eProsima_user_DllExport float zp2m() const;

    /*!
     * @brief This function returns a reference to member zp2m
     * @return Reference to member zp2m
     */
    eProsima_user_DllExport float& zp2m();


    /*!
     * @brief This function sets a value in member zp3m
     * @param _zp3m New value for member zp3m
     */
    eProsima_user_DllExport void zp3m(
            float _zp3m);

    /*!
     * @brief This function returns the value of member zp3m
     * @return Value of member zp3m
     */
    eProsima_user_DllExport float zp3m() const;

    /*!
     * @brief This function returns a reference to member zp3m
     * @return Reference to member zp3m
     */
    eProsima_user_DllExport float& zp3m();


    /*!
     * @brief This function sets a value in member zp4m
     * @param _zp4m New value for member zp4m
     */
    eProsima_user_DllExport void zp4m(
            float _zp4m);

    /*!
     * @brief This function returns the value of member zp4m
     * @return Value of member zp4m
     */
    eProsima_user_DllExport float zp4m() const;

    /*!
     * @brief This function returns a reference to member zp4m
     * @return Reference to member zp4m
     */
    eProsima_user_DllExport float& zp4m();


    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            float _a);

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport float a() const;

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport float& a();


    /*!
     * @brief This function sets a value in member b
     * @param _b New value for member b
     */
    eProsima_user_DllExport void b(
            float _b);

    /*!
     * @brief This function returns the value of member b
     * @return Value of member b
     */
    eProsima_user_DllExport float b() const;

    /*!
     * @brief This function returns a reference to member b
     * @return Reference to member b
     */
    eProsima_user_DllExport float& b();


    /*!
     * @brief This function sets a value in member m
     * @param _m New value for member m
     */
    eProsima_user_DllExport void m(
            float _m);

    /*!
     * @brief This function returns the value of member m
     * @return Value of member m
     */
    eProsima_user_DllExport float m() const;

    /*!
     * @brief This function returns a reference to member m
     * @return Reference to member m
     */
    eProsima_user_DllExport float& m();


    /*!
     * @brief This function sets a value in member m2
     * @param _m2 New value for member m2
     */
    eProsima_user_DllExport void m2(
            float _m2);

    /*!
     * @brief This function returns the value of member m2
     * @return Value of member m2
     */
    eProsima_user_DllExport float m2() const;

    /*!
     * @brief This function returns a reference to member m2
     * @return Reference to member m2
     */
    eProsima_user_DllExport float& m2();


    /*!
     * @brief This function sets a value in member adcReso
     * @param _adcReso New value for member adcReso
     */
    eProsima_user_DllExport void adcReso(
            int32_t _adcReso);

    /*!
     * @brief This function returns the value of member adcReso
     * @return Value of member adcReso
     */
    eProsima_user_DllExport int32_t adcReso() const;

    /*!
     * @brief This function returns a reference to member adcReso
     * @return Reference to member adcReso
     */
    eProsima_user_DllExport int32_t& adcReso();

private:

    float m_zp1m{0.0};
    float m_zp2m{0.0};
    float m_zp3m{0.0};
    float m_zp4m{0.0};
    float m_a{0.0};
    float m_b{0.0};
    float m_m{0.0};
    float m_m2{0.0};
    int32_t m_adcReso{0};

};


/*!
 * @brief This class represents the structure OutThirdReply defined by the user in the IDL file.
 * @ingroup RBIC1
 */
class OutThirdReply
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport OutThirdReply();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~OutThirdReply();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RBIC1::OutThirdReply that will be copied.
     */
    eProsima_user_DllExport OutThirdReply(
            const OutThirdReply& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RBIC1::OutThirdReply that will be copied.
     */
    eProsima_user_DllExport OutThirdReply(
            OutThirdReply&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RBIC1::OutThirdReply that will be copied.
     */
    eProsima_user_DllExport OutThirdReply& operator =(
            const OutThirdReply& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RBIC1::OutThirdReply that will be copied.
     */
    eProsima_user_DllExport OutThirdReply& operator =(
            OutThirdReply&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::OutThirdReply object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const OutThirdReply& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::OutThirdReply object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const OutThirdReply& x) const;

    /*!
     * @brief This function sets a value in member success
     * @param _success New value for member success
     */
    eProsima_user_DllExport void success(
            bool _success);

    /*!
     * @brief This function returns the value of member success
     * @return Value of member success
     */
    eProsima_user_DllExport bool success() const;

    /*!
     * @brief This function returns a reference to member success
     * @return Reference to member success
     */
    eProsima_user_DllExport bool& success();


    /*!
     * @brief This function sets a value in member c0
     * @param _c0 New value for member c0
     */
    eProsima_user_DllExport void c0(
            float _c0);

    /*!
     * @brief This function returns the value of member c0
     * @return Value of member c0
     */
    eProsima_user_DllExport float c0() const;

    /*!
     * @brief This function returns a reference to member c0
     * @return Reference to member c0
     */
    eProsima_user_DllExport float& c0();


    /*!
     * @brief This function sets a value in member c1
     * @param _c1 New value for member c1
     */
    eProsima_user_DllExport void c1(
            float _c1);

    /*!
     * @brief This function returns the value of member c1
     * @return Value of member c1
     */
    eProsima_user_DllExport float c1() const;

    /*!
     * @brief This function returns a reference to member c1
     * @return Reference to member c1
     */
    eProsima_user_DllExport float& c1();


    /*!
     * @brief This function sets a value in member c2
     * @param _c2 New value for member c2
     */
    eProsima_user_DllExport void c2(
            float _c2);

    /*!
     * @brief This function returns the value of member c2
     * @return Value of member c2
     */
    eProsima_user_DllExport float c2() const;

    /*!
     * @brief This function returns a reference to member c2
     * @return Reference to member c2
     */
    eProsima_user_DllExport float& c2();


    /*!
     * @brief This function sets a value in member c3
     * @param _c3 New value for member c3
     */
    eProsima_user_DllExport void c3(
            float _c3);

    /*!
     * @brief This function returns the value of member c3
     * @return Value of member c3
     */
    eProsima_user_DllExport float c3() const;

    /*!
     * @brief This function returns a reference to member c3
     * @return Reference to member c3
     */
    eProsima_user_DllExport float& c3();

private:

    bool m_success{false};
    float m_c0{0.0};
    float m_c1{0.0};
    float m_c2{0.0};
    float m_c3{0.0};

};


/*!
 * @brief This class represents the structure TQuadRequest defined by the user in the IDL file.
 * @ingroup RBIC1
 */
class TQuadRequest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport TQuadRequest();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~TQuadRequest();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RBIC1::TQuadRequest that will be copied.
     */
    eProsima_user_DllExport TQuadRequest(
            const TQuadRequest& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RBIC1::TQuadRequest that will be copied.
     */
    eProsima_user_DllExport TQuadRequest(
            TQuadRequest&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RBIC1::TQuadRequest that will be copied.
     */
    eProsima_user_DllExport TQuadRequest& operator =(
            const TQuadRequest& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RBIC1::TQuadRequest that will be copied.
     */
    eProsima_user_DllExport TQuadRequest& operator =(
            TQuadRequest&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::TQuadRequest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const TQuadRequest& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::TQuadRequest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const TQuadRequest& x) const;

    /*!
     * @brief This function sets a value in member ztLow
     * @param _ztLow New value for member ztLow
     */
    eProsima_user_DllExport void ztLow(
            float _ztLow);

    /*!
     * @brief This function returns the value of member ztLow
     * @return Value of member ztLow
     */
    eProsima_user_DllExport float ztLow() const;

    /*!
     * @brief This function returns a reference to member ztLow
     * @return Reference to member ztLow
     */
    eProsima_user_DllExport float& ztLow();


    /*!
     * @brief This function sets a value in member ztUpp
     * @param _ztUpp New value for member ztUpp
     */
    eProsima_user_DllExport void ztUpp(
            float _ztUpp);

    /*!
     * @brief This function returns the value of member ztUpp
     * @return Value of member ztUpp
     */
    eProsima_user_DllExport float ztUpp() const;

    /*!
     * @brief This function returns a reference to member ztUpp
     * @return Reference to member ztUpp
     */
    eProsima_user_DllExport float& ztUpp();


    /*!
     * @brief This function sets a value in member ztMed
     * @param _ztMed New value for member ztMed
     */
    eProsima_user_DllExport void ztMed(
            float _ztMed);

    /*!
     * @brief This function returns the value of member ztMed
     * @return Value of member ztMed
     */
    eProsima_user_DllExport float ztMed() const;

    /*!
     * @brief This function returns a reference to member ztMed
     * @return Reference to member ztMed
     */
    eProsima_user_DllExport float& ztMed();


    /*!
     * @brief This function sets a value in member tLow
     * @param _tLow New value for member tLow
     */
    eProsima_user_DllExport void tLow(
            float _tLow);

    /*!
     * @brief This function returns the value of member tLow
     * @return Value of member tLow
     */
    eProsima_user_DllExport float tLow() const;

    /*!
     * @brief This function returns a reference to member tLow
     * @return Reference to member tLow
     */
    eProsima_user_DllExport float& tLow();


    /*!
     * @brief This function sets a value in member tUpp
     * @param _tUpp New value for member tUpp
     */
    eProsima_user_DllExport void tUpp(
            float _tUpp);

    /*!
     * @brief This function returns the value of member tUpp
     * @return Value of member tUpp
     */
    eProsima_user_DllExport float tUpp() const;

    /*!
     * @brief This function returns a reference to member tUpp
     * @return Reference to member tUpp
     */
    eProsima_user_DllExport float& tUpp();


    /*!
     * @brief This function sets a value in member tMed
     * @param _tMed New value for member tMed
     */
    eProsima_user_DllExport void tMed(
            float _tMed);

    /*!
     * @brief This function returns the value of member tMed
     * @return Value of member tMed
     */
    eProsima_user_DllExport float tMed() const;

    /*!
     * @brief This function returns a reference to member tMed
     * @return Reference to member tMed
     */
    eProsima_user_DllExport float& tMed();


    /*!
     * @brief This function sets a value in member adcReso
     * @param _adcReso New value for member adcReso
     */
    eProsima_user_DllExport void adcReso(
            int32_t _adcReso);

    /*!
     * @brief This function returns the value of member adcReso
     * @return Value of member adcReso
     */
    eProsima_user_DllExport int32_t adcReso() const;

    /*!
     * @brief This function returns a reference to member adcReso
     * @return Reference to member adcReso
     */
    eProsima_user_DllExport int32_t& adcReso();

private:

    float m_ztLow{0.0};
    float m_ztUpp{0.0};
    float m_ztMed{0.0};
    float m_tLow{0.0};
    float m_tUpp{0.0};
    float m_tMed{0.0};
    int32_t m_adcReso{0};

};


/*!
 * @brief This class represents the structure TQuadReply defined by the user in the IDL file.
 * @ingroup RBIC1
 */
class TQuadReply
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport TQuadReply();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~TQuadReply();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RBIC1::TQuadReply that will be copied.
     */
    eProsima_user_DllExport TQuadReply(
            const TQuadReply& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RBIC1::TQuadReply that will be copied.
     */
    eProsima_user_DllExport TQuadReply(
            TQuadReply&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RBIC1::TQuadReply that will be copied.
     */
    eProsima_user_DllExport TQuadReply& operator =(
            const TQuadReply& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RBIC1::TQuadReply that will be copied.
     */
    eProsima_user_DllExport TQuadReply& operator =(
            TQuadReply&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::TQuadReply object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const TQuadReply& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::TQuadReply object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const TQuadReply& x) const;

    /*!
     * @brief This function sets a value in member success
     * @param _success New value for member success
     */
    eProsima_user_DllExport void success(
            bool _success);

    /*!
     * @brief This function returns the value of member success
     * @return Value of member success
     */
    eProsima_user_DllExport bool success() const;

    /*!
     * @brief This function returns a reference to member success
     * @return Reference to member success
     */
    eProsima_user_DllExport bool& success();


    /*!
     * @brief This function sets a value in member ct0
     * @param _ct0 New value for member ct0
     */
    eProsima_user_DllExport void ct0(
            float _ct0);

    /*!
     * @brief This function returns the value of member ct0
     * @return Value of member ct0
     */
    eProsima_user_DllExport float ct0() const;

    /*!
     * @brief This function returns a reference to member ct0
     * @return Reference to member ct0
     */
    eProsima_user_DllExport float& ct0();


    /*!
     * @brief This function sets a value in member ct1
     * @param _ct1 New value for member ct1
     */
    eProsima_user_DllExport void ct1(
            float _ct1);

    /*!
     * @brief This function returns the value of member ct1
     * @return Value of member ct1
     */
    eProsima_user_DllExport float ct1() const;

    /*!
     * @brief This function returns a reference to member ct1
     * @return Reference to member ct1
     */
    eProsima_user_DllExport float& ct1();


    /*!
     * @brief This function sets a value in member ct2
     * @param _ct2 New value for member ct2
     */
    eProsima_user_DllExport void ct2(
            float _ct2);

    /*!
     * @brief This function returns the value of member ct2
     * @return Value of member ct2
     */
    eProsima_user_DllExport float ct2() const;

    /*!
     * @brief This function returns a reference to member ct2
     * @return Reference to member ct2
     */
    eProsima_user_DllExport float& ct2();

private:

    bool m_success{false};
    float m_ct0{0.0};
    float m_ct1{0.0};
    float m_ct2{0.0};

};


/*!
 * @brief This class represents the structure OutLinTLinRequest defined by the user in the IDL file.
 * @ingroup RBIC1
 */
class OutLinTLinRequest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport OutLinTLinRequest();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~OutLinTLinRequest();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RBIC1::OutLinTLinRequest that will be copied.
     */
    eProsima_user_DllExport OutLinTLinRequest(
            const OutLinTLinRequest& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RBIC1::OutLinTLinRequest that will be copied.
     */
    eProsima_user_DllExport OutLinTLinRequest(
            OutLinTLinRequest&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RBIC1::OutLinTLinRequest that will be copied.
     */
    eProsima_user_DllExport OutLinTLinRequest& operator =(
            const OutLinTLinRequest& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RBIC1::OutLinTLinRequest that will be copied.
     */
    eProsima_user_DllExport OutLinTLinRequest& operator =(
            OutLinTLinRequest&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::OutLinTLinRequest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const OutLinTLinRequest& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::OutLinTLinRequest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const OutLinTLinRequest& x) const;

    /*!
     * @brief This function sets a value in member zp1m
     * @param _zp1m New value for member zp1m
     */
    eProsima_user_DllExport void zp1m(
            float _zp1m);

    /*!
     * @brief This function returns the value of member zp1m
     * @return Value of member zp1m
     */
    eProsima_user_DllExport float zp1m() const;

    /*!
     * @brief This function returns a reference to member zp1m
     * @return Reference to member zp1m
     */
    eProsima_user_DllExport float& zp1m();


    /*!
     * @brief This function sets a value in member zp2m
     * @param _zp2m New value for member zp2m
     */
    eProsima_user_DllExport void zp2m(
            float _zp2m);

    /*!
     * @brief This function returns the value of member zp2m
     * @return Value of member zp2m
     */
    eProsima_user_DllExport float zp2m() const;

    /*!
     * @brief This function returns a reference to member zp2m
     * @return Reference to member zp2m
     */
    eProsima_user_DllExport float& zp2m();


    /*!
     * @brief This function sets a value in member zp1u
     * @param _zp1u New value for member zp1u
     */
    eProsima_user_DllExport void zp1u(
            float _zp1u);

    /*!
     * @brief This function returns the value of member zp1u
     * @return Value of member zp1u
     */
    eProsima_user_DllExport float zp1u() const;

    /*!
     * @brief This function returns a reference to member zp1u
     * @return Reference to member zp1u
     */
    eProsima_user_DllExport float& zp1u();


    /*!
     * @brief This function sets a value in member zp2u
     * @param _zp2u New value for member zp2u
     */
    eProsima_user_DllExport void zp2u(
            float _zp2u);

    /*!
     * @brief This function returns the value of member zp2u
     * @return Value of member zp2u
     */
    eProsima_user_DllExport float zp2u() const;

    /*!
     * @brief This function returns a reference to member zp2u
     * @return Reference to member zp2u
     */
    eProsima_user_DllExport float& zp2u();


    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            float _a);

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport float a() const;

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport float& a();


    /*!
     * @brief This function sets a value in member b
     * @param _b New value for member b
     */
    eProsima_user_DllExport void b(
            float _b);

    /*!
     * @brief This function returns the value of member b
     * @return Value of member b
     */
    eProsima_user_DllExport float b() const;

    /*!
     * @brief This function returns a reference to member b
     * @return Reference to member b
     */
    eProsima_user_DllExport float& b();


    /*!
     * @brief This function sets a value in member ztMed
     * @param _ztMed New value for member ztMed
     */
    eProsima_user_DllExport void ztMed(
            float _ztMed);

    /*!
     * @brief This function returns the value of member ztMed
     * @return Value of member ztMed
     */
    eProsima_user_DllExport float ztMed() const;

    /*!
     * @brief This function returns a reference to member ztMed
     * @return Reference to member ztMed
     */
    eProsima_user_DllExport float& ztMed();


    /*!
     * @brief This function sets a value in member ztUpp
     * @param _ztUpp New value for member ztUpp
     */
    eProsima_user_DllExport void ztUpp(
            float _ztUpp);

    /*!
     * @brief This function returns the value of member ztUpp
     * @return Value of member ztUpp
     */
    eProsima_user_DllExport float ztUpp() const;

    /*!
     * @brief This function returns a reference to member ztUpp
     * @return Reference to member ztUpp
     */
    eProsima_user_DllExport float& ztUpp();


    /*!
     * @brief This function sets a value in member adcReso
     * @param _adcReso New value for member adcReso
     */
    eProsima_user_DllExport void adcReso(
            int32_t _adcReso);

    /*!
     * @brief This function returns the value of member adcReso
     * @return Value of member adcReso
     */
    eProsima_user_DllExport int32_t adcReso() const;

    /*!
     * @brief This function returns a reference to member adcReso
     * @return Reference to member adcReso
     */
    eProsima_user_DllExport int32_t& adcReso();

private:

    float m_zp1m{0.0};
    float m_zp2m{0.0};
    float m_zp1u{0.0};
    float m_zp2u{0.0};
    float m_a{0.0};
    float m_b{0.0};
    float m_ztMed{0.0};
    float m_ztUpp{0.0};
    int32_t m_adcReso{0};

};


/*!
 * @brief This class represents the structure OutLinTLinReply defined by the user in the IDL file.
 * @ingroup RBIC1
 */
class OutLinTLinReply
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport OutLinTLinReply();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~OutLinTLinReply();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RBIC1::OutLinTLinReply that will be copied.
     */
    eProsima_user_DllExport OutLinTLinReply(
            const OutLinTLinReply& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RBIC1::OutLinTLinReply that will be copied.
     */
    eProsima_user_DllExport OutLinTLinReply(
            OutLinTLinReply&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RBIC1::OutLinTLinReply that will be copied.
     */
    eProsima_user_DllExport OutLinTLinReply& operator =(
            const OutLinTLinReply& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RBIC1::OutLinTLinReply that will be copied.
     */
    eProsima_user_DllExport OutLinTLinReply& operator =(
            OutLinTLinReply&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::OutLinTLinReply object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const OutLinTLinReply& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::OutLinTLinReply object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const OutLinTLinReply& x) const;

    /*!
     * @brief This function sets a value in member success
     * @param _success New value for member success
     */
    eProsima_user_DllExport void success(
            bool _success);

    /*!
     * @brief This function returns the value of member success
     * @return Value of member success
     */
    eProsima_user_DllExport bool success() const;

    /*!
     * @brief This function returns a reference to member success
     * @return Reference to member success
     */
    eProsima_user_DllExport bool& success();


    /*!
     * @brief This function sets a value in member c0
     * @param _c0 New value for member c0
     */
    eProsima_user_DllExport void c0(
            float _c0);

    /*!
     * @brief This function returns the value of member c0
     * @return Value of member c0
     */
    eProsima_user_DllExport float c0() const;

    /*!
     * @brief This function returns a reference to member c0
     * @return Reference to member c0
     */
    eProsima_user_DllExport float& c0();


    /*!
     * @brief This function sets a value in member c1
     * @param _c1 New value for member c1
     */
    eProsima_user_DllExport void c1(
            float _c1);

    /*!
     * @brief This function returns the value of member c1
     * @return Value of member c1
     */
    eProsima_user_DllExport float c1() const;

    /*!
     * @brief This function returns a reference to member c1
     * @return Reference to member c1
     */
    eProsima_user_DllExport float& c1();


    /*!
     * @brief This function sets a value in member c4
     * @param _c4 New value for member c4
     */
    eProsima_user_DllExport void c4(
            float _c4);

    /*!
     * @brief This function returns the value of member c4
     * @return Value of member c4
     */
    eProsima_user_DllExport float c4() const;

    /*!
     * @brief This function returns a reference to member c4
     * @return Reference to member c4
     */
    eProsima_user_DllExport float& c4();


    /*!
     * @brief This function sets a value in member c6
     * @param _c6 New value for member c6
     */
    eProsima_user_DllExport void c6(
            float _c6);

    /*!
     * @brief This function returns the value of member c6
     * @return Value of member c6
     */
    eProsima_user_DllExport float c6() const;

    /*!
     * @brief This function returns a reference to member c6
     * @return Reference to member c6
     */
    eProsima_user_DllExport float& c6();

private:

    bool m_success{false};
    float m_c0{0.0};
    float m_c1{0.0};
    float m_c4{0.0};
    float m_c6{0.0};

};


/*!
 * @brief This class represents the structure OutQuadTLinRequest defined by the user in the IDL file.
 * @ingroup RBIC1
 */
class OutQuadTLinRequest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport OutQuadTLinRequest();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~OutQuadTLinRequest();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RBIC1::OutQuadTLinRequest that will be copied.
     */
    eProsima_user_DllExport OutQuadTLinRequest(
            const OutQuadTLinRequest& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RBIC1::OutQuadTLinRequest that will be copied.
     */
    eProsima_user_DllExport OutQuadTLinRequest(
            OutQuadTLinRequest&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RBIC1::OutQuadTLinRequest that will be copied.
     */
    eProsima_user_DllExport OutQuadTLinRequest& operator =(
            const OutQuadTLinRequest& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RBIC1::OutQuadTLinRequest that will be copied.
     */
    eProsima_user_DllExport OutQuadTLinRequest& operator =(
            OutQuadTLinRequest&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::OutQuadTLinRequest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const OutQuadTLinRequest& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::OutQuadTLinRequest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const OutQuadTLinRequest& x) const;

    /*!
     * @brief This function sets a value in member zp1m
     * @param _zp1m New value for member zp1m
     */
    eProsima_user_DllExport void zp1m(
            float _zp1m);

    /*!
     * @brief This function returns the value of member zp1m
     * @return Value of member zp1m
     */
    eProsima_user_DllExport float zp1m() const;

    /*!
     * @brief This function returns a reference to member zp1m
     * @return Reference to member zp1m
     */
    eProsima_user_DllExport float& zp1m();


    /*!
     * @brief This function sets a value in member zp2m
     * @param _zp2m New value for member zp2m
     */
    eProsima_user_DllExport void zp2m(
            float _zp2m);

    /*!
     * @brief This function returns the value of member zp2m
     * @return Value of member zp2m
     */
    eProsima_user_DllExport float zp2m() const;

    /*!
     * @brief This function returns a reference to member zp2m
     * @return Reference to member zp2m
     */
    eProsima_user_DllExport float& zp2m();


    /*!
     * @brief This function sets a value in member zp3m
     * @param _zp3m New value for member zp3m
     */
    eProsima_user_DllExport void zp3m(
            float _zp3m);

    /*!
     * @brief This function returns the value of member zp3m
     * @return Value of member zp3m
     */
    eProsima_user_DllExport float zp3m() const;

    /*!
     * @brief This function returns a reference to member zp3m
     * @return Reference to member zp3m
     */
    eProsima_user_DllExport float& zp3m();


    /*!
     * @brief This function sets a value in member zp1u
     * @param _zp1u New value for member zp1u
     */
    eProsima_user_DllExport void zp1u(
            float _zp1u);

    /*!
     * @brief This function returns the value of member zp1u
     * @return Value of member zp1u
     */
    eProsima_user_DllExport float zp1u() const;

    /*!
     * @brief This function returns a reference to member zp1u
     * @return Reference to member zp1u
     */
    eProsima_user_DllExport float& zp1u();


    /*!
     * @brief This function sets a value in member zp2u
     * @param _zp2u New value for member zp2u
     */
    eProsima_user_DllExport void zp2u(
            float _zp2u);

    /*!
     * @brief This function returns the value of member zp2u
     * @return Value of member zp2u
     */
    eProsima_user_DllExport float zp2u() const;

    /*!
     * @brief This function returns a reference to member zp2u
     * @return Reference to member zp2u
     */
    eProsima_user_DllExport float& zp2u();


    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            float _a);

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport float a() const;

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport float& a();


    /*!
     * @brief This function sets a value in member b
     * @param _b New value for member b
     */
    eProsima_user_DllExport void b(
            float _b);

    /*!
     * @brief This function returns the value of member b
     * @return Value of member b
     */
    eProsima_user_DllExport float b() const;

    /*!
     * @brief This function returns a reference to member b
     * @return Reference to member b
     */
    eProsima_user_DllExport float& b();


    /*!
     * @brief This function sets a value in member m
     * @param _m New value for member m
     */
    eProsima_user_DllExport void m(
            float _m);

    /*!
     * @brief This function returns the value of member m
     * @return Value of member m
     */
    eProsima_user_DllExport float m() const;

    /*!
     * @brief This function returns a reference to member m
     * @return Reference to member m
     */
    eProsima_user_DllExport float& m();


    /*!
     * @brief This function sets a value in member ztMed
     * @param _ztMed New value for member ztMed
     */
    eProsima_user_DllExport void ztMed(
            float _ztMed);

    /*!
     * @brief This function returns the value of member ztMed
     * @return Value of member ztMed
     */
    eProsima_user_DllExport float ztMed() const;

    /*!
     * @brief This function returns a reference to member ztMed
     * @return Reference to member ztMed
     */
    eProsima_user_DllExport float& ztMed();


    /*!
     * @brief This function sets a value in member ztUpp
     * @param _ztUpp New value for member ztUpp
     */
    eProsima_user_DllExport void ztUpp(
            float _ztUpp);

    /*!
     * @brief This function returns the value of member ztUpp
     * @return Value of member ztUpp
     */
    eProsima_user_DllExport float ztUpp() const;

    /*!
     * @brief This function returns a reference to member ztUpp
     * @return Reference to member ztUpp
     */
    eProsima_user_DllExport float& ztUpp();


    /*!
     * @brief This function sets a value in member adcReso
     * @param _adcReso New value for member adcReso
     */
    eProsima_user_DllExport void adcReso(
            int32_t _adcReso);

    /*!
     * @brief This function returns the value of member adcReso
     * @return Value of member adcReso
     */
    eProsima_user_DllExport int32_t adcReso() const;

    /*!
     * @brief This function returns a reference to member adcReso
     * @return Reference to member adcReso
     */
    eProsima_user_DllExport int32_t& adcReso();

private:

    float m_zp1m{0.0};
    float m_zp2m{0.0};
    float m_zp3m{0.0};
    float m_zp1u{0.0};
    float m_zp2u{0.0};
    float m_a{0.0};
    float m_b{0.0};
    float m_m{0.0};
    float m_ztMed{0.0};
    float m_ztUpp{0.0};
    int32_t m_adcReso{0};

};


/*!
 * @brief This class represents the structure OutQuadTLinReply defined by the user in the IDL file.
 * @ingroup RBIC1
 */
class OutQuadTLinReply
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport OutQuadTLinReply();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~OutQuadTLinReply();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RBIC1::OutQuadTLinReply that will be copied.
     */
    eProsima_user_DllExport OutQuadTLinReply(
            const OutQuadTLinReply& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RBIC1::OutQuadTLinReply that will be copied.
     */
    eProsima_user_DllExport OutQuadTLinReply(
            OutQuadTLinReply&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RBIC1::OutQuadTLinReply that will be copied.
     */
    eProsima_user_DllExport OutQuadTLinReply& operator =(
            const OutQuadTLinReply& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RBIC1::OutQuadTLinReply that will be copied.
     */
    eProsima_user_DllExport OutQuadTLinReply& operator =(
            OutQuadTLinReply&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::OutQuadTLinReply object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const OutQuadTLinReply& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::OutQuadTLinReply object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const OutQuadTLinReply& x) const;

    /*!
     * @brief This function sets a value in member success
     * @param _success New value for member success
     */
    eProsima_user_DllExport void success(
            bool _success);

    /*!
     * @brief This function returns the value of member success
     * @return Value of member success
     */
    eProsima_user_DllExport bool success() const;

    /*!
     * @brief This function returns a reference to member success
     * @return Reference to member success
     */
    eProsima_user_DllExport bool& success();


    /*!
     * @brief This function sets a value in member c0
     * @param _c0 New value for member c0
     */
    eProsima_user_DllExport void c0(
            float _c0);

    /*!
     * @brief This function returns the value of member c0
     * @return Value of member c0
     */
    eProsima_user_DllExport float c0() const;

    /*!
     * @brief This function returns a reference to member c0
     * @return Reference to member c0
     */
    eProsima_user_DllExport float& c0();


    /*!
     * @brief This function sets a value in member c1
     * @param _c1 New value for member c1
     */
    eProsima_user_DllExport void c1(
            float _c1);

    /*!
     * @brief This function returns the value of member c1
     * @return Value of member c1
     */
    eProsima_user_DllExport float c1() const;

    /*!
     * @brief This function returns a reference to member c1
     * @return Reference to member c1
     */
    eProsima_user_DllExport float& c1();


    /*!
     * @brief This function sets a value in member c2
     * @param _c2 New value for member c2
     */
    eProsima_user_DllExport void c2(
            float _c2);

    /*!
     * @brief This function returns the value of member c2
     * @return Value of member c2
     */
    eProsima_user_DllExport float c2() const;

    /*!
     * @brief This function returns a reference to member c2
     * @return Reference to member c2
     */
    eProsima_user_DllExport float& c2();


    /*!
     * @brief This function sets a value in member c4
     * @param _c4 New value for member c4
     */
    eProsima_user_DllExport void c4(
            float _c4);

    /*!
     * @brief This function returns the value of member c4
     * @return Value of member c4
     */
    eProsima_user_DllExport float c4() const;

    /*!
     * @brief This function returns a reference to member c4
     * @return Reference to member c4
     */
    eProsima_user_DllExport float& c4();


    /*!
     * @brief This function sets a value in member c6
     * @param _c6 New value for member c6
     */
    eProsima_user_DllExport void c6(
            float _c6);

    /*!
     * @brief This function returns the value of member c6
     * @return Value of member c6
     */
    eProsima_user_DllExport float c6() const;

    /*!
     * @brief This function returns a reference to member c6
     * @return Reference to member c6
     */
    eProsima_user_DllExport float& c6();

private:

    bool m_success{false};
    float m_c0{0.0};
    float m_c1{0.0};
    float m_c2{0.0};
    float m_c4{0.0};
    float m_c6{0.0};

};


/*!
 * @brief This class represents the structure OutLinTQuadRequest defined by the user in the IDL file.
 * @ingroup RBIC1
 */
class OutLinTQuadRequest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport OutLinTQuadRequest();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~OutLinTQuadRequest();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RBIC1::OutLinTQuadRequest that will be copied.
     */
    eProsima_user_DllExport OutLinTQuadRequest(
            const OutLinTQuadRequest& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RBIC1::OutLinTQuadRequest that will be copied.
     */
    eProsima_user_DllExport OutLinTQuadRequest(
            OutLinTQuadRequest&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RBIC1::OutLinTQuadRequest that will be copied.
     */
    eProsima_user_DllExport OutLinTQuadRequest& operator =(
            const OutLinTQuadRequest& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RBIC1::OutLinTQuadRequest that will be copied.
     */
    eProsima_user_DllExport OutLinTQuadRequest& operator =(
            OutLinTQuadRequest&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::OutLinTQuadRequest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const OutLinTQuadRequest& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::OutLinTQuadRequest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const OutLinTQuadRequest& x) const;

    /*!
     * @brief This function sets a value in member zp1m
     * @param _zp1m New value for member zp1m
     */
    eProsima_user_DllExport void zp1m(
            float _zp1m);

    /*!
     * @brief This function returns the value of member zp1m
     * @return Value of member zp1m
     */
    eProsima_user_DllExport float zp1m() const;

    /*!
     * @brief This function returns a reference to member zp1m
     * @return Reference to member zp1m
     */
    eProsima_user_DllExport float& zp1m();


    /*!
     * @brief This function sets a value in member zp2m
     * @param _zp2m New value for member zp2m
     */
    eProsima_user_DllExport void zp2m(
            float _zp2m);

    /*!
     * @brief This function returns the value of member zp2m
     * @return Value of member zp2m
     */
    eProsima_user_DllExport float zp2m() const;

    /*!
     * @brief This function returns a reference to member zp2m
     * @return Reference to member zp2m
     */
    eProsima_user_DllExport float& zp2m();


    /*!
     * @brief This function sets a value in member zp1u
     * @param _zp1u New value for member zp1u
     */
    eProsima_user_DllExport void zp1u(
            float _zp1u);

    /*!
     * @brief This function returns the value of member zp1u
     * @return Value of member zp1u
     */
    eProsima_user_DllExport float zp1u() const;

    /*!
     * @brief This function returns a reference to member zp1u
     * @return Reference to member zp1u
     */
    eProsima_user_DllExport float& zp1u();


    /*!
     * @brief This function sets a value in member zp2u
     * @param _zp2u New value for member zp2u
     */
    eProsima_user_DllExport void zp2u(
            float _zp2u);

    /*!
     * @brief This function returns the value of member zp2u
     * @return Value of member zp2u
     */
    eProsima_user_DllExport float zp2u() const;

    /*!
     * @brief This function returns a reference to member zp2u
     * @return Reference to member zp2u
     */
    eProsima_user_DllExport float& zp2u();


    /*!
     * @brief This function sets a value in member zp1l
     * @param _zp1l New value for member zp1l
     */
    eProsima_user_DllExport void zp1l(
            float _zp1l);

    /*!
     * @brief This function returns the value of member zp1l
     * @return Value of member zp1l
     */
    eProsima_user_DllExport float zp1l() const;

    /*!
     * @brief This function returns a reference to member zp1l
     * @return Reference to member zp1l
     */
    eProsima_user_DllExport float& zp1l();


    /*!
     * @brief This function sets a value in member zp2l
     * @param _zp2l New value for member zp2l
     */
    eProsima_user_DllExport void zp2l(
            float _zp2l);

    /*!
     * @brief This function returns the value of member zp2l
     * @return Value of member zp2l
     */
    eProsima_user_DllExport float zp2l() const;

    /*!
     * @brief This function returns a reference to member zp2l
     * @return Reference to member zp2l
     */
    eProsima_user_DllExport float& zp2l();


    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            float _a);

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport float a() const;

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport float& a();


    /*!
     * @brief This function sets a value in member b
     * @param _b New value for member b
     */
    eProsima_user_DllExport void b(
            float _b);

    /*!
     * @brief This function returns the value of member b
     * @return Value of member b
     */
    eProsima_user_DllExport float b() const;

    /*!
     * @brief This function returns a reference to member b
     * @return Reference to member b
     */
    eProsima_user_DllExport float& b();


    /*!
     * @brief This function sets a value in member ztMed
     * @param _ztMed New value for member ztMed
     */
    eProsima_user_DllExport void ztMed(
            float _ztMed);

    /*!
     * @brief This function returns the value of member ztMed
     * @return Value of member ztMed
     */
    eProsima_user_DllExport float ztMed() const;

    /*!
     * @brief This function returns a reference to member ztMed
     * @return Reference to member ztMed
     */
    eProsima_user_DllExport float& ztMed();


    /*!
     * @brief This function sets a value in member ztUpp
     * @param _ztUpp New value for member ztUpp
     */
    eProsima_user_DllExport void ztUpp(
            float _ztUpp);

    /*!
     * @brief This function returns the value of member ztUpp
     * @return Value of member ztUpp
     */
    eProsima_user_DllExport float ztUpp() const;

    /*!
     * @brief This function returns a reference to member ztUpp
     * @return Reference to member ztUpp
     */
    eProsima_user_DllExport float& ztUpp();


    /*!
     * @brief This function sets a value in member ztLow
     * @param _ztLow New value for member ztLow
     */
    eProsima_user_DllExport void ztLow(
            float _ztLow);

    /*!
     * @brief This function returns the value of member ztLow
     * @return Value of member ztLow
     */
    eProsima_user_DllExport float ztLow() const;

    /*!
     * @brief This function returns a reference to member ztLow
     * @return Reference to member ztLow
     */
    eProsima_user_DllExport float& ztLow();


    /*!
     * @brief This function sets a value in member adcReso
     * @param _adcReso New value for member adcReso
     */
    eProsima_user_DllExport void adcReso(
            int32_t _adcReso);

    /*!
     * @brief This function returns the value of member adcReso
     * @return Value of member adcReso
     */
    eProsima_user_DllExport int32_t adcReso() const;

    /*!
     * @brief This function returns a reference to member adcReso
     * @return Reference to member adcReso
     */
    eProsima_user_DllExport int32_t& adcReso();

private:

    float m_zp1m{0.0};
    float m_zp2m{0.0};
    float m_zp1u{0.0};
    float m_zp2u{0.0};
    float m_zp1l{0.0};
    float m_zp2l{0.0};
    float m_a{0.0};
    float m_b{0.0};
    float m_ztMed{0.0};
    float m_ztUpp{0.0};
    float m_ztLow{0.0};
    int32_t m_adcReso{0};

};


/*!
 * @brief This class represents the structure OutLinTQuadReply defined by the user in the IDL file.
 * @ingroup RBIC1
 */
class OutLinTQuadReply
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport OutLinTQuadReply();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~OutLinTQuadReply();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RBIC1::OutLinTQuadReply that will be copied.
     */
    eProsima_user_DllExport OutLinTQuadReply(
            const OutLinTQuadReply& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RBIC1::OutLinTQuadReply that will be copied.
     */
    eProsima_user_DllExport OutLinTQuadReply(
            OutLinTQuadReply&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RBIC1::OutLinTQuadReply that will be copied.
     */
    eProsima_user_DllExport OutLinTQuadReply& operator =(
            const OutLinTQuadReply& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RBIC1::OutLinTQuadReply that will be copied.
     */
    eProsima_user_DllExport OutLinTQuadReply& operator =(
            OutLinTQuadReply&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::OutLinTQuadReply object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const OutLinTQuadReply& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::OutLinTQuadReply object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const OutLinTQuadReply& x) const;

    /*!
     * @brief This function sets a value in member success
     * @param _success New value for member success
     */
    eProsima_user_DllExport void success(
            bool _success);

    /*!
     * @brief This function returns the value of member success
     * @return Value of member success
     */
    eProsima_user_DllExport bool success() const;

    /*!
     * @brief This function returns a reference to member success
     * @return Reference to member success
     */
    eProsima_user_DllExport bool& success();


    /*!
     * @brief This function sets a value in member c0
     * @param _c0 New value for member c0
     */
    eProsima_user_DllExport void c0(
            float _c0);

    /*!
     * @brief This function returns the value of member c0
     * @return Value of member c0
     */
    eProsima_user_DllExport float c0() const;

    /*!
     * @brief This function returns a reference to member c0
     * @return Reference to member c0
     */
    eProsima_user_DllExport float& c0();


    /*!
     * @brief This function sets a value in member c1
     * @param _c1 New value for member c1
     */
    eProsima_user_DllExport void c1(
            float _c1);

    /*!
     * @brief This function returns the value of member c1
     * @return Value of member c1
     */
    eProsima_user_DllExport float c1() const;

    /*!
     * @brief This function returns a reference to member c1
     * @return Reference to member c1
     */
    eProsima_user_DllExport float& c1();


    /*!
     * @brief This function sets a value in member c4
     * @param _c4 New value for member c4
     */
    eProsima_user_DllExport void c4(
            float _c4);

    /*!
     * @brief This function returns the value of member c4
     * @return Value of member c4
     */
    eProsima_user_DllExport float c4() const;

    /*!
     * @brief This function returns a reference to member c4
     * @return Reference to member c4
     */
    eProsima_user_DllExport float& c4();


    /*!
     * @brief This function sets a value in member c6
     * @param _c6 New value for member c6
     */
    eProsima_user_DllExport void c6(
            float _c6);

    /*!
     * @brief This function returns the value of member c6
     * @return Value of member c6
     */
    eProsima_user_DllExport float c6() const;

    /*!
     * @brief This function returns a reference to member c6
     * @return Reference to member c6
     */
    eProsima_user_DllExport float& c6();


    /*!
     * @brief This function sets a value in member c5
     * @param _c5 New value for member c5
     */
    eProsima_user_DllExport void c5(
            float _c5);

    /*!
     * @brief This function returns the value of member c5
     * @return Value of member c5
     */
    eProsima_user_DllExport float c5() const;

    /*!
     * @brief This function returns a reference to member c5
     * @return Reference to member c5
     */
    eProsima_user_DllExport float& c5();


    /*!
     * @brief This function sets a value in member c7
     * @param _c7 New value for member c7
     */
    eProsima_user_DllExport void c7(
            float _c7);

    /*!
     * @brief This function returns the value of member c7
     * @return Value of member c7
     */
    eProsima_user_DllExport float c7() const;

    /*!
     * @brief This function returns a reference to member c7
     * @return Reference to member c7
     */
    eProsima_user_DllExport float& c7();

private:

    bool m_success{false};
    float m_c0{0.0};
    float m_c1{0.0};
    float m_c4{0.0};
    float m_c6{0.0};
    float m_c5{0.0};
    float m_c7{0.0};

};


/*!
 * @brief This class represents the structure OutQuadTQuadRequest defined by the user in the IDL file.
 * @ingroup RBIC1
 */
class OutQuadTQuadRequest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport OutQuadTQuadRequest();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~OutQuadTQuadRequest();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RBIC1::OutQuadTQuadRequest that will be copied.
     */
    eProsima_user_DllExport OutQuadTQuadRequest(
            const OutQuadTQuadRequest& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RBIC1::OutQuadTQuadRequest that will be copied.
     */
    eProsima_user_DllExport OutQuadTQuadRequest(
            OutQuadTQuadRequest&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RBIC1::OutQuadTQuadRequest that will be copied.
     */
    eProsima_user_DllExport OutQuadTQuadRequest& operator =(
            const OutQuadTQuadRequest& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RBIC1::OutQuadTQuadRequest that will be copied.
     */
    eProsima_user_DllExport OutQuadTQuadRequest& operator =(
            OutQuadTQuadRequest&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::OutQuadTQuadRequest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const OutQuadTQuadRequest& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::OutQuadTQuadRequest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const OutQuadTQuadRequest& x) const;

    /*!
     * @brief This function sets a value in member zp1m
     * @param _zp1m New value for member zp1m
     */
    eProsima_user_DllExport void zp1m(
            float _zp1m);

    /*!
     * @brief This function returns the value of member zp1m
     * @return Value of member zp1m
     */
    eProsima_user_DllExport float zp1m() const;

    /*!
     * @brief This function returns a reference to member zp1m
     * @return Reference to member zp1m
     */
    eProsima_user_DllExport float& zp1m();


    /*!
     * @brief This function sets a value in member zp2m
     * @param _zp2m New value for member zp2m
     */
    eProsima_user_DllExport void zp2m(
            float _zp2m);

    /*!
     * @brief This function returns the value of member zp2m
     * @return Value of member zp2m
     */
    eProsima_user_DllExport float zp2m() const;

    /*!
     * @brief This function returns a reference to member zp2m
     * @return Reference to member zp2m
     */
    eProsima_user_DllExport float& zp2m();


    /*!
     * @brief This function sets a value in member zp3m
     * @param _zp3m New value for member zp3m
     */
    eProsima_user_DllExport void zp3m(
            float _zp3m);

    /*!
     * @brief This function returns the value of member zp3m
     * @return Value of member zp3m
     */
    eProsima_user_DllExport float zp3m() const;

    /*!
     * @brief This function returns a reference to member zp3m
     * @return Reference to member zp3m
     */
    eProsima_user_DllExport float& zp3m();


    /*!
     * @brief This function sets a value in member zp1u
     * @param _zp1u New value for member zp1u
     */
    eProsima_user_DllExport void zp1u(
            float _zp1u);

    /*!
     * @brief This function returns the value of member zp1u
     * @return Value of member zp1u
     */
    eProsima_user_DllExport float zp1u() const;

    /*!
     * @brief This function returns a reference to member zp1u
     * @return Reference to member zp1u
     */
    eProsima_user_DllExport float& zp1u();


    /*!
     * @brief This function sets a value in member zp2u
     * @param _zp2u New value for member zp2u
     */
    eProsima_user_DllExport void zp2u(
            float _zp2u);

    /*!
     * @brief This function returns the value of member zp2u
     * @return Value of member zp2u
     */
    eProsima_user_DllExport float zp2u() const;

    /*!
     * @brief This function returns a reference to member zp2u
     * @return Reference to member zp2u
     */
    eProsima_user_DllExport float& zp2u();


    /*!
     * @brief This function sets a value in member zp1l
     * @param _zp1l New value for member zp1l
     */
    eProsima_user_DllExport void zp1l(
            float _zp1l);

    /*!
     * @brief This function returns the value of member zp1l
     * @return Value of member zp1l
     */
    eProsima_user_DllExport float zp1l() const;

    /*!
     * @brief This function returns a reference to member zp1l
     * @return Reference to member zp1l
     */
    eProsima_user_DllExport float& zp1l();


    /*!
     * @brief This function sets a value in member zp2l
     * @param _zp2l New value for member zp2l
     */
    eProsima_user_DllExport void zp2l(
            float _zp2l);

    /*!
     * @brief This function returns the value of member zp2l
     * @return Value of member zp2l
     */
    eProsima_user_DllExport float zp2l() const;

    /*!
     * @brief This function returns a reference to member zp2l
     * @return Reference to member zp2l
     */
    eProsima_user_DllExport float& zp2l();


    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            float _a);

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport float a() const;

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport float& a();


    /*!
     * @brief This function sets a value in member b
     * @param _b New value for member b
     */
    eProsima_user_DllExport void b(
            float _b);

    /*!
     * @brief This function returns the value of member b
     * @return Value of member b
     */
    eProsima_user_DllExport float b() const;

    /*!
     * @brief This function returns a reference to member b
     * @return Reference to member b
     */
    eProsima_user_DllExport float& b();


    /*!
     * @brief This function sets a value in member m
     * @param _m New value for member m
     */
    eProsima_user_DllExport void m(
            float _m);

    /*!
     * @brief This function returns the value of member m
     * @return Value of member m
     */
    eProsima_user_DllExport float m() const;

    /*!
     * @brief This function returns a reference to member m
     * @return Reference to member m
     */
    eProsima_user_DllExport float& m();


    /*!
     * @brief This function sets a value in member ztMed
     * @param _ztMed New value for member ztMed
     */
    eProsima_user_DllExport void ztMed(
            float _ztMed);

    /*!
     * @brief This function returns the value of member ztMed
     * @return Value of member ztMed
     */
    eProsima_user_DllExport float ztMed() const;

    /*!
     * @brief This function returns a reference to member ztMed
     * @return Reference to member ztMed
     */
    eProsima_user_DllExport float& ztMed();


    /*!
     * @brief This function sets a value in member ztUpp
     * @param _ztUpp New value for member ztUpp
     */
    eProsima_user_DllExport void ztUpp(
            float _ztUpp);

    /*!
     * @brief This function returns the value of member ztUpp
     * @return Value of member ztUpp
     */
    eProsima_user_DllExport float ztUpp() const;

    /*!
     * @brief This function returns a reference to member ztUpp
     * @return Reference to member ztUpp
     */
    eProsima_user_DllExport float& ztUpp();


    /*!
     * @brief This function sets a value in member ztLow
     * @param _ztLow New value for member ztLow
     */
    eProsima_user_DllExport void ztLow(
            float _ztLow);

    /*!
     * @brief This function returns the value of member ztLow
     * @return Value of member ztLow
     */
    eProsima_user_DllExport float ztLow() const;

    /*!
     * @brief This function returns a reference to member ztLow
     * @return Reference to member ztLow
     */
    eProsima_user_DllExport float& ztLow();


    /*!
     * @brief This function sets a value in member adcReso
     * @param _adcReso New value for member adcReso
     */
    eProsima_user_DllExport void adcReso(
            int32_t _adcReso);

    /*!
     * @brief This function returns the value of member adcReso
     * @return Value of member adcReso
     */
    eProsima_user_DllExport int32_t adcReso() const;

    /*!
     * @brief This function returns a reference to member adcReso
     * @return Reference to member adcReso
     */
    eProsima_user_DllExport int32_t& adcReso();

private:

    float m_zp1m{0.0};
    float m_zp2m{0.0};
    float m_zp3m{0.0};
    float m_zp1u{0.0};
    float m_zp2u{0.0};
    float m_zp1l{0.0};
    float m_zp2l{0.0};
    float m_a{0.0};
    float m_b{0.0};
    float m_m{0.0};
    float m_ztMed{0.0};
    float m_ztUpp{0.0};
    float m_ztLow{0.0};
    int32_t m_adcReso{0};

};


/*!
 * @brief This class represents the structure OutQuadTQuadReply defined by the user in the IDL file.
 * @ingroup RBIC1
 */
class OutQuadTQuadReply
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport OutQuadTQuadReply();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~OutQuadTQuadReply();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RBIC1::OutQuadTQuadReply that will be copied.
     */
    eProsima_user_DllExport OutQuadTQuadReply(
            const OutQuadTQuadReply& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RBIC1::OutQuadTQuadReply that will be copied.
     */
    eProsima_user_DllExport OutQuadTQuadReply(
            OutQuadTQuadReply&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RBIC1::OutQuadTQuadReply that will be copied.
     */
    eProsima_user_DllExport OutQuadTQuadReply& operator =(
            const OutQuadTQuadReply& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RBIC1::OutQuadTQuadReply that will be copied.
     */
    eProsima_user_DllExport OutQuadTQuadReply& operator =(
            OutQuadTQuadReply&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::OutQuadTQuadReply object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const OutQuadTQuadReply& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::OutQuadTQuadReply object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const OutQuadTQuadReply& x) const;

    /*!
     * @brief This function sets a value in member success
     * @param _success New value for member success
     */
    eProsima_user_DllExport void success(
            bool _success);

    /*!
     * @brief This function returns the value of member success
     * @return Value of member success
     */
    eProsima_user_DllExport bool success() const;

    /*!
     * @brief This function returns a reference to member success
     * @return Reference to member success
     */
    eProsima_user_DllExport bool& success();


    /*!
     * @brief This function sets a value in member c0
     * @param _c0 New value for member c0
     */
    eProsima_user_DllExport void c0(
            float _c0);

    /*!
     * @brief This function returns the value of member c0
     * @return Value of member c0
     */
    eProsima_user_DllExport float c0() const;

    /*!
     * @brief This function returns a reference to member c0
     * @return Reference to member c0
     */
    eProsima_user_DllExport float& c0();


    /*!
     * @brief This function sets a value in member c1
     * @param _c1 New value for member c1
     */
    eProsima_user_DllExport void c1(
            float _c1);

    /*!
     * @brief This function returns the value of member c1
     * @return Value of member c1
     */
    eProsima_user_DllExport float c1() const;

    /*!
     * @brief This function returns a reference to member c1
     * @return Reference to member c1
     */
    eProsima_user_DllExport float& c1();


    /*!
     * @brief This function sets a value in member c2
     * @param _c2 New value for member c2
     */
    eProsima_user_DllExport void c2(
            float _c2);

    /*!
     * @brief This function returns the value of member c2
     * @return Value of member c2
     */
    eProsima_user_DllExport float c2() const;

    /*!
     * @brief This function returns a reference to member c2
     * @return Reference to member c2
     */
    eProsima_user_DllExport float& c2();


    /*!
     * @brief This function sets a value in member c4
     * @param _c4 New value for member c4
     */
    eProsima_user_DllExport void c4(
            float _c4);

    /*!
     * @brief This function returns the value of member c4
     * @return Value of member c4
     */
    eProsima_user_DllExport float c4() const;

    /*!
     * @brief This function returns a reference to member c4
     * @return Reference to member c4
     */
    eProsima_user_DllExport float& c4();


    /*!
     * @brief This function sets a value in member c6
     * @param _c6 New value for member c6
     */
    eProsima_user_DllExport void c6(
            float _c6);

    /*!
     * @brief This function returns the value of member c6
     * @return Value of member c6
     */
    eProsima_user_DllExport float c6() const;

    /*!
     * @brief This function returns a reference to member c6
     * @return Reference to member c6
     */
    eProsima_user_DllExport float& c6();


    /*!
     * @brief This function sets a value in member c5
     * @param _c5 New value for member c5
     */
    eProsima_user_DllExport void c5(
            float _c5);

    /*!
     * @brief This function returns the value of member c5
     * @return Value of member c5
     */
    eProsima_user_DllExport float c5() const;

    /*!
     * @brief This function returns a reference to member c5
     * @return Reference to member c5
     */
    eProsima_user_DllExport float& c5();


    /*!
     * @brief This function sets a value in member c7
     * @param _c7 New value for member c7
     */
    eProsima_user_DllExport void c7(
            float _c7);

    /*!
     * @brief This function returns the value of member c7
     * @return Value of member c7
     */
    eProsima_user_DllExport float c7() const;

    /*!
     * @brief This function returns a reference to member c7
     * @return Reference to member c7
     */
    eProsima_user_DllExport float& c7();

private:

    bool m_success{false};
    float m_c0{0.0};
    float m_c1{0.0};
    float m_c2{0.0};
    float m_c4{0.0};
    float m_c6{0.0};
    float m_c5{0.0};
    float m_c7{0.0};

};


/*!
 * @brief This class represents the structure ZMD31050Cal1Request defined by the user in the IDL file.
 * @ingroup RBIC1
 */
class ZMD31050Cal1Request
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ZMD31050Cal1Request();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ZMD31050Cal1Request();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RBIC1::ZMD31050Cal1Request that will be copied.
     */
    eProsima_user_DllExport ZMD31050Cal1Request(
            const ZMD31050Cal1Request& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RBIC1::ZMD31050Cal1Request that will be copied.
     */
    eProsima_user_DllExport ZMD31050Cal1Request(
            ZMD31050Cal1Request&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RBIC1::ZMD31050Cal1Request that will be copied.
     */
    eProsima_user_DllExport ZMD31050Cal1Request& operator =(
            const ZMD31050Cal1Request& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RBIC1::ZMD31050Cal1Request that will be copied.
     */
    eProsima_user_DllExport ZMD31050Cal1Request& operator =(
            ZMD31050Cal1Request&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::ZMD31050Cal1Request object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ZMD31050Cal1Request& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::ZMD31050Cal1Request object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ZMD31050Cal1Request& x) const;

    /*!
     * @brief This function sets a value in member zp1m
     * @param _zp1m New value for member zp1m
     */
    eProsima_user_DllExport void zp1m(
            float _zp1m);

    /*!
     * @brief This function returns the value of member zp1m
     * @return Value of member zp1m
     */
    eProsima_user_DllExport float zp1m() const;

    /*!
     * @brief This function returns a reference to member zp1m
     * @return Reference to member zp1m
     */
    eProsima_user_DllExport float& zp1m();


    /*!
     * @brief This function sets a value in member zp2m
     * @param _zp2m New value for member zp2m
     */
    eProsima_user_DllExport void zp2m(
            float _zp2m);

    /*!
     * @brief This function returns the value of member zp2m
     * @return Value of member zp2m
     */
    eProsima_user_DllExport float zp2m() const;

    /*!
     * @brief This function returns a reference to member zp2m
     * @return Reference to member zp2m
     */
    eProsima_user_DllExport float& zp2m();


    /*!
     * @brief This function sets a value in member zp3m
     * @param _zp3m New value for member zp3m
     */
    eProsima_user_DllExport void zp3m(
            float _zp3m);

    /*!
     * @brief This function returns the value of member zp3m
     * @return Value of member zp3m
     */
    eProsima_user_DllExport float zp3m() const;

    /*!
     * @brief This function returns a reference to member zp3m
     * @return Reference to member zp3m
     */
    eProsima_user_DllExport float& zp3m();


    /*!
     * @brief This function sets a value in member zp4m
     * @param _zp4m New value for member zp4m
     */
    eProsima_user_DllExport void zp4m(
            float _zp4m);

    /*!
     * @brief This function returns the value of member zp4m
     * @return Value of member zp4m
     */
    eProsima_user_DllExport float zp4m() const;

    /*!
     * @brief This function returns a reference to member zp4m
     * @return Reference to member zp4m
     */
    eProsima_user_DllExport float& zp4m();


    /*!
     * @brief This function sets a value in member zp1u
     * @param _zp1u New value for member zp1u
     */
    eProsima_user_DllExport void zp1u(
            float _zp1u);

    /*!
     * @brief This function returns the value of member zp1u
     * @return Value of member zp1u
     */
    eProsima_user_DllExport float zp1u() const;

    /*!
     * @brief This function returns a reference to member zp1u
     * @return Reference to member zp1u
     */
    eProsima_user_DllExport float& zp1u();


    /*!
     * @brief This function sets a value in member zp2u
     * @param _zp2u New value for member zp2u
     */
    eProsima_user_DllExport void zp2u(
            float _zp2u);

    /*!
     * @brief This function returns the value of member zp2u
     * @return Value of member zp2u
     */
    eProsima_user_DllExport float zp2u() const;

    /*!
     * @brief This function returns a reference to member zp2u
     * @return Reference to member zp2u
     */
    eProsima_user_DllExport float& zp2u();


    /*!
     * @brief This function sets a value in member zp1l
     * @param _zp1l New value for member zp1l
     */
    eProsima_user_DllExport void zp1l(
            float _zp1l);

    /*!
     * @brief This function returns the value of member zp1l
     * @return Value of member zp1l
     */
    eProsima_user_DllExport float zp1l() const;

    /*!
     * @brief This function returns a reference to member zp1l
     * @return Reference to member zp1l
     */
    eProsima_user_DllExport float& zp1l();


    /*!
     * @brief This function sets a value in member zp2l
     * @param _zp2l New value for member zp2l
     */
    eProsima_user_DllExport void zp2l(
            float _zp2l);

    /*!
     * @brief This function returns the value of member zp2l
     * @return Value of member zp2l
     */
    eProsima_user_DllExport float zp2l() const;

    /*!
     * @brief This function returns a reference to member zp2l
     * @return Reference to member zp2l
     */
    eProsima_user_DllExport float& zp2l();


    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            float _a);

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport float a() const;

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport float& a();


    /*!
     * @brief This function sets a value in member b
     * @param _b New value for member b
     */
    eProsima_user_DllExport void b(
            float _b);

    /*!
     * @brief This function returns the value of member b
     * @return Value of member b
     */
    eProsima_user_DllExport float b() const;

    /*!
     * @brief This function returns a reference to member b
     * @return Reference to member b
     */
    eProsima_user_DllExport float& b();


    /*!
     * @brief This function sets a value in member m
     * @param _m New value for member m
     */
    eProsima_user_DllExport void m(
            float _m);

    /*!
     * @brief This function returns the value of member m
     * @return Value of member m
     */
    eProsima_user_DllExport float m() const;

    /*!
     * @brief This function returns a reference to member m
     * @return Reference to member m
     */
    eProsima_user_DllExport float& m();


    /*!
     * @brief This function sets a value in member m2
     * @param _m2 New value for member m2
     */
    eProsima_user_DllExport void m2(
            float _m2);

    /*!
     * @brief This function returns the value of member m2
     * @return Value of member m2
     */
    eProsima_user_DllExport float m2() const;

    /*!
     * @brief This function returns a reference to member m2
     * @return Reference to member m2
     */
    eProsima_user_DllExport float& m2();


    /*!
     * @brief This function sets a value in member ztMed
     * @param _ztMed New value for member ztMed
     */
    eProsima_user_DllExport void ztMed(
            float _ztMed);

    /*!
     * @brief This function returns the value of member ztMed
     * @return Value of member ztMed
     */
    eProsima_user_DllExport float ztMed() const;

    /*!
     * @brief This function returns a reference to member ztMed
     * @return Reference to member ztMed
     */
    eProsima_user_DllExport float& ztMed();


    /*!
     * @brief This function sets a value in member ztUpp
     * @param _ztUpp New value for member ztUpp
     */
    eProsima_user_DllExport void ztUpp(
            float _ztUpp);

    /*!
     * @brief This function returns the value of member ztUpp
     * @return Value of member ztUpp
     */
    eProsima_user_DllExport float ztUpp() const;

    /*!
     * @brief This function returns a reference to member ztUpp
     * @return Reference to member ztUpp
     */
    eProsima_user_DllExport float& ztUpp();


    /*!
     * @brief This function sets a value in member ztLow
     * @param _ztLow New value for member ztLow
     */
    eProsima_user_DllExport void ztLow(
            float _ztLow);

    /*!
     * @brief This function returns the value of member ztLow
     * @return Value of member ztLow
     */
    eProsima_user_DllExport float ztLow() const;

    /*!
     * @brief This function returns a reference to member ztLow
     * @return Reference to member ztLow
     */
    eProsima_user_DllExport float& ztLow();


    /*!
     * @brief This function sets a value in member adcReso
     * @param _adcReso New value for member adcReso
     */
    eProsima_user_DllExport void adcReso(
            int32_t _adcReso);

    /*!
     * @brief This function returns the value of member adcReso
     * @return Value of member adcReso
     */
    eProsima_user_DllExport int32_t adcReso() const;

    /*!
     * @brief This function returns a reference to member adcReso
     * @return Reference to member adcReso
     */
    eProsima_user_DllExport int32_t& adcReso();

private:

    float m_zp1m{0.0};
    float m_zp2m{0.0};
    float m_zp3m{0.0};
    float m_zp4m{0.0};
    float m_zp1u{0.0};
    float m_zp2u{0.0};
    float m_zp1l{0.0};
    float m_zp2l{0.0};
    float m_a{0.0};
    float m_b{0.0};
    float m_m{0.0};
    float m_m2{0.0};
    float m_ztMed{0.0};
    float m_ztUpp{0.0};
    float m_ztLow{0.0};
    int32_t m_adcReso{0};

};


/*!
 * @brief This class represents the structure ZMD31050Cal1Reply defined by the user in the IDL file.
 * @ingroup RBIC1
 */
class ZMD31050Cal1Reply
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ZMD31050Cal1Reply();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ZMD31050Cal1Reply();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RBIC1::ZMD31050Cal1Reply that will be copied.
     */
    eProsima_user_DllExport ZMD31050Cal1Reply(
            const ZMD31050Cal1Reply& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RBIC1::ZMD31050Cal1Reply that will be copied.
     */
    eProsima_user_DllExport ZMD31050Cal1Reply(
            ZMD31050Cal1Reply&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RBIC1::ZMD31050Cal1Reply that will be copied.
     */
    eProsima_user_DllExport ZMD31050Cal1Reply& operator =(
            const ZMD31050Cal1Reply& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RBIC1::ZMD31050Cal1Reply that will be copied.
     */
    eProsima_user_DllExport ZMD31050Cal1Reply& operator =(
            ZMD31050Cal1Reply&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::ZMD31050Cal1Reply object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ZMD31050Cal1Reply& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::ZMD31050Cal1Reply object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ZMD31050Cal1Reply& x) const;

    /*!
     * @brief This function sets a value in member success
     * @param _success New value for member success
     */
    eProsima_user_DllExport void success(
            bool _success);

    /*!
     * @brief This function returns the value of member success
     * @return Value of member success
     */
    eProsima_user_DllExport bool success() const;

    /*!
     * @brief This function returns a reference to member success
     * @return Reference to member success
     */
    eProsima_user_DllExport bool& success();


    /*!
     * @brief This function sets a value in member c0
     * @param _c0 New value for member c0
     */
    eProsima_user_DllExport void c0(
            float _c0);

    /*!
     * @brief This function returns the value of member c0
     * @return Value of member c0
     */
    eProsima_user_DllExport float c0() const;

    /*!
     * @brief This function returns a reference to member c0
     * @return Reference to member c0
     */
    eProsima_user_DllExport float& c0();


    /*!
     * @brief This function sets a value in member c1
     * @param _c1 New value for member c1
     */
    eProsima_user_DllExport void c1(
            float _c1);

    /*!
     * @brief This function returns the value of member c1
     * @return Value of member c1
     */
    eProsima_user_DllExport float c1() const;

    /*!
     * @brief This function returns a reference to member c1
     * @return Reference to member c1
     */
    eProsima_user_DllExport float& c1();


    /*!
     * @brief This function sets a value in member c2
     * @param _c2 New value for member c2
     */
    eProsima_user_DllExport void c2(
            float _c2);

    /*!
     * @brief This function returns the value of member c2
     * @return Value of member c2
     */
    eProsima_user_DllExport float c2() const;

    /*!
     * @brief This function returns a reference to member c2
     * @return Reference to member c2
     */
    eProsima_user_DllExport float& c2();


    /*!
     * @brief This function sets a value in member c3
     * @param _c3 New value for member c3
     */
    eProsima_user_DllExport void c3(
            float _c3);

    /*!
     * @brief This function returns the value of member c3
     * @return Value of member c3
     */
    eProsima_user_DllExport float c3() const;

    /*!
     * @brief This function returns a reference to member c3
     * @return Reference to member c3
     */
    eProsima_user_DllExport float& c3();


    /*!
     * @brief This function sets a value in member c4
     * @param _c4 New value for member c4
     */
    eProsima_user_DllExport void c4(
            float _c4);

    /*!
     * @brief This function returns the value of member c4
     * @return Value of member c4
     */
    eProsima_user_DllExport float c4() const;

    /*!
     * @brief This function returns a reference to member c4
     * @return Reference to member c4
     */
    eProsima_user_DllExport float& c4();


    /*!
     * @brief This function sets a value in member c6
     * @param _c6 New value for member c6
     */
    eProsima_user_DllExport void c6(
            float _c6);

    /*!
     * @brief This function returns the value of member c6
     * @return Value of member c6
     */
    eProsima_user_DllExport float c6() const;

    /*!
     * @brief This function returns a reference to member c6
     * @return Reference to member c6
     */
    eProsima_user_DllExport float& c6();


    /*!
     * @brief This function sets a value in member c5
     * @param _c5 New value for member c5
     */
    eProsima_user_DllExport void c5(
            float _c5);

    /*!
     * @brief This function returns the value of member c5
     * @return Value of member c5
     */
    eProsima_user_DllExport float c5() const;

    /*!
     * @brief This function returns a reference to member c5
     * @return Reference to member c5
     */
    eProsima_user_DllExport float& c5();


    /*!
     * @brief This function sets a value in member c7
     * @param _c7 New value for member c7
     */
    eProsima_user_DllExport void c7(
            float _c7);

    /*!
     * @brief This function returns the value of member c7
     * @return Value of member c7
     */
    eProsima_user_DllExport float c7() const;

    /*!
     * @brief This function returns a reference to member c7
     * @return Reference to member c7
     */
    eProsima_user_DllExport float& c7();

private:

    bool m_success{false};
    float m_c0{0.0};
    float m_c1{0.0};
    float m_c2{0.0};
    float m_c3{0.0};
    float m_c4{0.0};
    float m_c6{0.0};
    float m_c5{0.0};
    float m_c7{0.0};

};


/*!
 * @brief This class represents the structure ZMD31050Sim1Request defined by the user in the IDL file.
 * @ingroup RBIC1
 */
class ZMD31050Sim1Request
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ZMD31050Sim1Request();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ZMD31050Sim1Request();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RBIC1::ZMD31050Sim1Request that will be copied.
     */
    eProsima_user_DllExport ZMD31050Sim1Request(
            const ZMD31050Sim1Request& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RBIC1::ZMD31050Sim1Request that will be copied.
     */
    eProsima_user_DllExport ZMD31050Sim1Request(
            ZMD31050Sim1Request&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RBIC1::ZMD31050Sim1Request that will be copied.
     */
    eProsima_user_DllExport ZMD31050Sim1Request& operator =(
            const ZMD31050Sim1Request& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RBIC1::ZMD31050Sim1Request that will be copied.
     */
    eProsima_user_DllExport ZMD31050Sim1Request& operator =(
            ZMD31050Sim1Request&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::ZMD31050Sim1Request object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ZMD31050Sim1Request& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::ZMD31050Sim1Request object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ZMD31050Sim1Request& x) const;

    /*!
     * @brief This function sets a value in member c0
     * @param _c0 New value for member c0
     */
    eProsima_user_DllExport void c0(
            int32_t _c0);

    /*!
     * @brief This function returns the value of member c0
     * @return Value of member c0
     */
    eProsima_user_DllExport int32_t c0() const;

    /*!
     * @brief This function returns a reference to member c0
     * @return Reference to member c0
     */
    eProsima_user_DllExport int32_t& c0();


    /*!
     * @brief This function sets a value in member c1
     * @param _c1 New value for member c1
     */
    eProsima_user_DllExport void c1(
            int32_t _c1);

    /*!
     * @brief This function returns the value of member c1
     * @return Value of member c1
     */
    eProsima_user_DllExport int32_t c1() const;

    /*!
     * @brief This function returns a reference to member c1
     * @return Reference to member c1
     */
    eProsima_user_DllExport int32_t& c1();


    /*!
     * @brief This function sets a value in member c2
     * @param _c2 New value for member c2
     */
    eProsima_user_DllExport void c2(
            int32_t _c2);

    /*!
     * @brief This function returns the value of member c2
     * @return Value of member c2
     */
    eProsima_user_DllExport int32_t c2() const;

    /*!
     * @brief This function returns a reference to member c2
     * @return Reference to member c2
     */
    eProsima_user_DllExport int32_t& c2();


    /*!
     * @brief This function sets a value in member c3
     * @param _c3 New value for member c3
     */
    eProsima_user_DllExport void c3(
            int32_t _c3);

    /*!
     * @brief This function returns the value of member c3
     * @return Value of member c3
     */
    eProsima_user_DllExport int32_t c3() const;

    /*!
     * @brief This function returns a reference to member c3
     * @return Reference to member c3
     */
    eProsima_user_DllExport int32_t& c3();


    /*!
     * @brief This function sets a value in member c4
     * @param _c4 New value for member c4
     */
    eProsima_user_DllExport void c4(
            int32_t _c4);

    /*!
     * @brief This function returns the value of member c4
     * @return Value of member c4
     */
    eProsima_user_DllExport int32_t c4() const;

    /*!
     * @brief This function returns a reference to member c4
     * @return Reference to member c4
     */
    eProsima_user_DllExport int32_t& c4();


    /*!
     * @brief This function sets a value in member c5
     * @param _c5 New value for member c5
     */
    eProsima_user_DllExport void c5(
            int32_t _c5);

    /*!
     * @brief This function returns the value of member c5
     * @return Value of member c5
     */
    eProsima_user_DllExport int32_t c5() const;

    /*!
     * @brief This function returns a reference to member c5
     * @return Reference to member c5
     */
    eProsima_user_DllExport int32_t& c5();


    /*!
     * @brief This function sets a value in member c6
     * @param _c6 New value for member c6
     */
    eProsima_user_DllExport void c6(
            int32_t _c6);

    /*!
     * @brief This function returns the value of member c6
     * @return Value of member c6
     */
    eProsima_user_DllExport int32_t c6() const;

    /*!
     * @brief This function returns a reference to member c6
     * @return Reference to member c6
     */
    eProsima_user_DllExport int32_t& c6();


    /*!
     * @brief This function sets a value in member c7
     * @param _c7 New value for member c7
     */
    eProsima_user_DllExport void c7(
            int32_t _c7);

    /*!
     * @brief This function returns the value of member c7
     * @return Value of member c7
     */
    eProsima_user_DllExport int32_t c7() const;

    /*!
     * @brief This function returns a reference to member c7
     * @return Reference to member c7
     */
    eProsima_user_DllExport int32_t& c7();


    /*!
     * @brief This function sets a value in member adcReso
     * @param _adcReso New value for member adcReso
     */
    eProsima_user_DllExport void adcReso(
            int32_t _adcReso);

    /*!
     * @brief This function returns the value of member adcReso
     * @return Value of member adcReso
     */
    eProsima_user_DllExport int32_t adcReso() const;

    /*!
     * @brief This function returns a reference to member adcReso
     * @return Reference to member adcReso
     */
    eProsima_user_DllExport int32_t& adcReso();


    /*!
     * @brief This function sets a value in member rangeShift
     * @param _rangeShift New value for member rangeShift
     */
    eProsima_user_DllExport void rangeShift(
            float _rangeShift);

    /*!
     * @brief This function returns the value of member rangeShift
     * @return Value of member rangeShift
     */
    eProsima_user_DllExport float rangeShift() const;

    /*!
     * @brief This function returns a reference to member rangeShift
     * @return Reference to member rangeShift
     */
    eProsima_user_DllExport float& rangeShift();


    /*!
     * @brief This function sets a value in member izMin
     * @param _izMin New value for member izMin
     */
    eProsima_user_DllExport void izMin(
            int32_t _izMin);

    /*!
     * @brief This function returns the value of member izMin
     * @return Value of member izMin
     */
    eProsima_user_DllExport int32_t izMin() const;

    /*!
     * @brief This function returns a reference to member izMin
     * @return Reference to member izMin
     */
    eProsima_user_DllExport int32_t& izMin();


    /*!
     * @brief This function sets a value in member izMax
     * @param _izMax New value for member izMax
     */
    eProsima_user_DllExport void izMax(
            int32_t _izMax);

    /*!
     * @brief This function returns the value of member izMax
     * @return Value of member izMax
     */
    eProsima_user_DllExport int32_t izMax() const;

    /*!
     * @brief This function returns a reference to member izMax
     * @return Reference to member izMax
     */
    eProsima_user_DllExport int32_t& izMax();


    /*!
     * @brief This function sets a value in member zt
     * @param _zt New value for member zt
     */
    eProsima_user_DllExport void zt(
            int32_t _zt);

    /*!
     * @brief This function returns the value of member zt
     * @return Value of member zt
     */
    eProsima_user_DllExport int32_t zt() const;

    /*!
     * @brief This function returns a reference to member zt
     * @return Reference to member zt
     */
    eProsima_user_DllExport int32_t& zt();


    /*!
     * @brief This function sets a value in member ztMin
     * @param _ztMin New value for member ztMin
     */
    eProsima_user_DllExport void ztMin(
            int32_t _ztMin);

    /*!
     * @brief This function returns the value of member ztMin
     * @return Value of member ztMin
     */
    eProsima_user_DllExport int32_t ztMin() const;

    /*!
     * @brief This function returns a reference to member ztMin
     * @return Reference to member ztMin
     */
    eProsima_user_DllExport int32_t& ztMin();


    /*!
     * @brief This function sets a value in member ztMax
     * @param _ztMax New value for member ztMax
     */
    eProsima_user_DllExport void ztMax(
            int32_t _ztMax);

    /*!
     * @brief This function returns the value of member ztMax
     * @return Value of member ztMax
     */
    eProsima_user_DllExport int32_t ztMax() const;

    /*!
     * @brief This function returns a reference to member ztMax
     * @return Reference to member ztMax
     */
    eProsima_user_DllExport int32_t& ztMax();

private:

    int32_t m_c0{0};
    int32_t m_c1{0};
    int32_t m_c2{0};
    int32_t m_c3{0};
    int32_t m_c4{0};
    int32_t m_c5{0};
    int32_t m_c6{0};
    int32_t m_c7{0};
    int32_t m_adcReso{0};
    float m_rangeShift{0.0};
    int32_t m_izMin{0};
    int32_t m_izMax{0};
    int32_t m_zt{0};
    int32_t m_ztMin{0};
    int32_t m_ztMax{0};

};


/*!
 * @brief This class represents the structure ZMD31050Sim1Reply defined by the user in the IDL file.
 * @ingroup RBIC1
 */
class ZMD31050Sim1Reply
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ZMD31050Sim1Reply();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ZMD31050Sim1Reply();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RBIC1::ZMD31050Sim1Reply that will be copied.
     */
    eProsima_user_DllExport ZMD31050Sim1Reply(
            const ZMD31050Sim1Reply& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RBIC1::ZMD31050Sim1Reply that will be copied.
     */
    eProsima_user_DllExport ZMD31050Sim1Reply(
            ZMD31050Sim1Reply&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RBIC1::ZMD31050Sim1Reply that will be copied.
     */
    eProsima_user_DllExport ZMD31050Sim1Reply& operator =(
            const ZMD31050Sim1Reply& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RBIC1::ZMD31050Sim1Reply that will be copied.
     */
    eProsima_user_DllExport ZMD31050Sim1Reply& operator =(
            ZMD31050Sim1Reply&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::ZMD31050Sim1Reply object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ZMD31050Sim1Reply& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::ZMD31050Sim1Reply object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ZMD31050Sim1Reply& x) const;

    /*!
     * @brief This function sets a value in member success
     * @param _success New value for member success
     */
    eProsima_user_DllExport void success(
            bool _success);

    /*!
     * @brief This function returns the value of member success
     * @return Value of member success
     */
    eProsima_user_DllExport bool success() const;

    /*!
     * @brief This function returns a reference to member success
     * @return Reference to member success
     */
    eProsima_user_DllExport bool& success();


    /*!
     * @brief This function sets a value in member result
     * @param _result New value for member result
     */
    eProsima_user_DllExport void result(
            int32_t _result);

    /*!
     * @brief This function returns the value of member result
     * @return Value of member result
     */
    eProsima_user_DllExport int32_t result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     */
    eProsima_user_DllExport int32_t& result();

private:

    bool m_success{false};
    int32_t m_result{0};

};
/*!
 * @brief This class represents the structure DLLVersionRequest defined by the user in the IDL file.
 * @ingroup RBIC1
 */
class DLLVersionRequest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DLLVersionRequest();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DLLVersionRequest();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RBIC1::DLLVersionRequest that will be copied.
     */
    eProsima_user_DllExport DLLVersionRequest(
            const DLLVersionRequest& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RBIC1::DLLVersionRequest that will be copied.
     */
    eProsima_user_DllExport DLLVersionRequest(
            DLLVersionRequest&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RBIC1::DLLVersionRequest that will be copied.
     */
    eProsima_user_DllExport DLLVersionRequest& operator =(
            const DLLVersionRequest& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RBIC1::DLLVersionRequest that will be copied.
     */
    eProsima_user_DllExport DLLVersionRequest& operator =(
            DLLVersionRequest&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::DLLVersionRequest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const DLLVersionRequest& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::DLLVersionRequest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const DLLVersionRequest& x) const;

private:


};


/*!
 * @brief This class represents the structure DLLVersionReply defined by the user in the IDL file.
 * @ingroup RBIC1
 */
class DLLVersionReply
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DLLVersionReply();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DLLVersionReply();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RBIC1::DLLVersionReply that will be copied.
     */
    eProsima_user_DllExport DLLVersionReply(
            const DLLVersionReply& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RBIC1::DLLVersionReply that will be copied.
     */
    eProsima_user_DllExport DLLVersionReply(
            DLLVersionReply&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RBIC1::DLLVersionReply that will be copied.
     */
    eProsima_user_DllExport DLLVersionReply& operator =(
            const DLLVersionReply& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RBIC1::DLLVersionReply that will be copied.
     */
    eProsima_user_DllExport DLLVersionReply& operator =(
            DLLVersionReply&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::DLLVersionReply object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const DLLVersionReply& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::DLLVersionReply object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const DLLVersionReply& x) const;

    /*!
     * @brief This function sets a value in member success
     * @param _success New value for member success
     */
    eProsima_user_DllExport void success(
            bool _success);

    /*!
     * @brief This function returns the value of member success
     * @return Value of member success
     */
    eProsima_user_DllExport bool success() const;

    /*!
     * @brief This function returns a reference to member success
     * @return Reference to member success
     */
    eProsima_user_DllExport bool& success();


    /*!
     * @brief This function copies the value in member version
     * @param _version New value to be copied in member version
     */
    eProsima_user_DllExport void version(
            const std::string& _version);

    /*!
     * @brief This function moves the value in member version
     * @param _version New value to be moved in member version
     */
    eProsima_user_DllExport void version(
            std::string&& _version);

    /*!
     * @brief This function returns a constant reference to member version
     * @return Constant reference to member version
     */
    eProsima_user_DllExport const std::string& version() const;

    /*!
     * @brief This function returns a reference to member version
     * @return Reference to member version
     */
    eProsima_user_DllExport std::string& version();

private:

    bool m_success{false};
    std::string m_version;

};
/*!
 * @brief This class represents the structure GetMessageRequest defined by the user in the IDL file.
 * @ingroup RBIC1
 */
class GetMessageRequest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport GetMessageRequest();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~GetMessageRequest();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RBIC1::GetMessageRequest that will be copied.
     */
    eProsima_user_DllExport GetMessageRequest(
            const GetMessageRequest& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RBIC1::GetMessageRequest that will be copied.
     */
    eProsima_user_DllExport GetMessageRequest(
            GetMessageRequest&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RBIC1::GetMessageRequest that will be copied.
     */
    eProsima_user_DllExport GetMessageRequest& operator =(
            const GetMessageRequest& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RBIC1::GetMessageRequest that will be copied.
     */
    eProsima_user_DllExport GetMessageRequest& operator =(
            GetMessageRequest&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::GetMessageRequest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const GetMessageRequest& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::GetMessageRequest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const GetMessageRequest& x) const;

private:


};


/*!
 * @brief This class represents the structure GetMessageReply defined by the user in the IDL file.
 * @ingroup RBIC1
 */
class GetMessageReply
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport GetMessageReply();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~GetMessageReply();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RBIC1::GetMessageReply that will be copied.
     */
    eProsima_user_DllExport GetMessageReply(
            const GetMessageReply& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RBIC1::GetMessageReply that will be copied.
     */
    eProsima_user_DllExport GetMessageReply(
            GetMessageReply&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RBIC1::GetMessageReply that will be copied.
     */
    eProsima_user_DllExport GetMessageReply& operator =(
            const GetMessageReply& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RBIC1::GetMessageReply that will be copied.
     */
    eProsima_user_DllExport GetMessageReply& operator =(
            GetMessageReply&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::GetMessageReply object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const GetMessageReply& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::GetMessageReply object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const GetMessageReply& x) const;

    /*!
     * @brief This function copies the value in member message
     * @param _message New value to be copied in member message
     */
    eProsima_user_DllExport void message(
            const std::string& _message);

    /*!
     * @brief This function moves the value in member message
     * @param _message New value to be moved in member message
     */
    eProsima_user_DllExport void message(
            std::string&& _message);

    /*!
     * @brief This function returns a constant reference to member message
     * @return Constant reference to member message
     */
    eProsima_user_DllExport const std::string& message() const;

    /*!
     * @brief This function returns a reference to member message
     * @return Reference to member message
     */
    eProsima_user_DllExport std::string& message();

private:

    std::string m_message;

};


/*!
 * @brief This class represents the union RequestUnion defined by the user in the IDL file.
 * @ingroup RBIC1
 */
class RequestUnion
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport RequestUnion();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~RequestUnion();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RBIC1::RequestUnion that will be copied.
     */
    eProsima_user_DllExport RequestUnion(
            const RequestUnion& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RBIC1::RequestUnion that will be copied.
     */
    eProsima_user_DllExport RequestUnion(
            RequestUnion&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RBIC1::RequestUnion that will be copied.
     */
    eProsima_user_DllExport RequestUnion& operator =(
            const RequestUnion& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RBIC1::RequestUnion that will be copied.
     */
    eProsima_user_DllExport RequestUnion& operator =(
            RequestUnion&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::RequestUnion object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const RequestUnion& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::RequestUnion object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const RequestUnion& x) const;

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    eProsima_user_DllExport void _d(
            RBIC1::MessageType __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eProsima_user_DllExport RBIC1::MessageType _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    eProsima_user_DllExport RBIC1::MessageType& _d();

    /*!
     * @brief This function copies the value in member outLinRequest
     * @param _outLinRequest New value to be copied in member outLinRequest
     */
    eProsima_user_DllExport void outLinRequest(
            const RBIC1::OutLinRequest& _outLinRequest);

    /*!
     * @brief This function moves the value in member outLinRequest
     * @param _outLinRequest New value to be moved in member outLinRequest
     */
    eProsima_user_DllExport void outLinRequest(
            RBIC1::OutLinRequest&& _outLinRequest);

    /*!
     * @brief This function returns a constant reference to member outLinRequest
     * @return Constant reference to member outLinRequest
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const RBIC1::OutLinRequest& outLinRequest() const;

    /*!
     * @brief This function returns a reference to member outLinRequest
     * @return Reference to member outLinRequest
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport RBIC1::OutLinRequest& outLinRequest();


    /*!
     * @brief This function copies the value in member tLinRequest
     * @param _tLinRequest New value to be copied in member tLinRequest
     */
    eProsima_user_DllExport void tLinRequest(
            const RBIC1::TLinRequest& _tLinRequest);

    /*!
     * @brief This function moves the value in member tLinRequest
     * @param _tLinRequest New value to be moved in member tLinRequest
     */
    eProsima_user_DllExport void tLinRequest(
            RBIC1::TLinRequest&& _tLinRequest);

    /*!
     * @brief This function returns a constant reference to member tLinRequest
     * @return Constant reference to member tLinRequest
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const RBIC1::TLinRequest& tLinRequest() const;

    /*!
     * @brief This function returns a reference to member tLinRequest
     * @return Reference to member tLinRequest
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport RBIC1::TLinRequest& tLinRequest();


    /*!
     * @brief This function copies the value in member outQuadRequest
     * @param _outQuadRequest New value to be copied in member outQuadRequest
     */
    eProsima_user_DllExport void outQuadRequest(
            const RBIC1::OutQuadRequest& _outQuadRequest);

    /*!
     * @brief This function moves the value in member outQuadRequest
     * @param _outQuadRequest New value to be moved in member outQuadRequest
     */
    eProsima_user_DllExport void outQuadRequest(
            RBIC1::OutQuadRequest&& _outQuadRequest);

    /*!
     * @brief This function returns a constant reference to member outQuadRequest
     * @return Constant reference to member outQuadRequest
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const RBIC1::OutQuadRequest& outQuadRequest() const;

    /*!
     * @brief This function returns a reference to member outQuadRequest
     * @return Reference to member outQuadRequest
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport RBIC1::OutQuadRequest& outQuadRequest();


    /*!
     * @brief This function copies the value in member outThirdRequest
     * @param _outThirdRequest New value to be copied in member outThirdRequest
     */
    eProsima_user_DllExport void outThirdRequest(
            const RBIC1::OutThirdRequest& _outThirdRequest);

    /*!
     * @brief This function moves the value in member outThirdRequest
     * @param _outThirdRequest New value to be moved in member outThirdRequest
     */
    eProsima_user_DllExport void outThirdRequest(
            RBIC1::OutThirdRequest&& _outThirdRequest);

    /*!
     * @brief This function returns a constant reference to member outThirdRequest
     * @return Constant reference to member outThirdRequest
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const RBIC1::OutThirdRequest& outThirdRequest() const;

    /*!
     * @brief This function returns a reference to member outThirdRequest
     * @return Reference to member outThirdRequest
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport RBIC1::OutThirdRequest& outThirdRequest();


    /*!
     * @brief This function copies the value in member tQuadRequest
     * @param _tQuadRequest New value to be copied in member tQuadRequest
     */
    eProsima_user_DllExport void tQuadRequest(
            const RBIC1::TQuadRequest& _tQuadRequest);

    /*!
     * @brief This function moves the value in member tQuadRequest
     * @param _tQuadRequest New value to be moved in member tQuadRequest
     */
    eProsima_user_DllExport void tQuadRequest(
            RBIC1::TQuadRequest&& _tQuadRequest);

    /*!
     * @brief This function returns a constant reference to member tQuadRequest
     * @return Constant reference to member tQuadRequest
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const RBIC1::TQuadRequest& tQuadRequest() const;

    /*!
     * @brief This function returns a reference to member tQuadRequest
     * @return Reference to member tQuadRequest
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport RBIC1::TQuadRequest& tQuadRequest();


    /*!
     * @brief This function copies the value in member outLinTLinRequest
     * @param _outLinTLinRequest New value to be copied in member outLinTLinRequest
     */
    eProsima_user_DllExport void outLinTLinRequest(
            const RBIC1::OutLinTLinRequest& _outLinTLinRequest);

    /*!
     * @brief This function moves the value in member outLinTLinRequest
     * @param _outLinTLinRequest New value to be moved in member outLinTLinRequest
     */
    eProsima_user_DllExport void outLinTLinRequest(
            RBIC1::OutLinTLinRequest&& _outLinTLinRequest);

    /*!
     * @brief This function returns a constant reference to member outLinTLinRequest
     * @return Constant reference to member outLinTLinRequest
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const RBIC1::OutLinTLinRequest& outLinTLinRequest() const;

    /*!
     * @brief This function returns a reference to member outLinTLinRequest
     * @return Reference to member outLinTLinRequest
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport RBIC1::OutLinTLinRequest& outLinTLinRequest();


    /*!
     * @brief This function copies the value in member outQuadTLinRequest
     * @param _outQuadTLinRequest New value to be copied in member outQuadTLinRequest
     */
    eProsima_user_DllExport void outQuadTLinRequest(
            const RBIC1::OutQuadTLinRequest& _outQuadTLinRequest);

    /*!
     * @brief This function moves the value in member outQuadTLinRequest
     * @param _outQuadTLinRequest New value to be moved in member outQuadTLinRequest
     */
    eProsima_user_DllExport void outQuadTLinRequest(
            RBIC1::OutQuadTLinRequest&& _outQuadTLinRequest);

    /*!
     * @brief This function returns a constant reference to member outQuadTLinRequest
     * @return Constant reference to member outQuadTLinRequest
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const RBIC1::OutQuadTLinRequest& outQuadTLinRequest() const;

    /*!
     * @brief This function returns a reference to member outQuadTLinRequest
     * @return Reference to member outQuadTLinRequest
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport RBIC1::OutQuadTLinRequest& outQuadTLinRequest();


    /*!
     * @brief This function copies the value in member outLinTQuadRequest
     * @param _outLinTQuadRequest New value to be copied in member outLinTQuadRequest
     */
    eProsima_user_DllExport void outLinTQuadRequest(
            const RBIC1::OutLinTQuadRequest& _outLinTQuadRequest);

    /*!
     * @brief This function moves the value in member outLinTQuadRequest
     * @param _outLinTQuadRequest New value to be moved in member outLinTQuadRequest
     */
    eProsima_user_DllExport void outLinTQuadRequest(
            RBIC1::OutLinTQuadRequest&& _outLinTQuadRequest);

    /*!
     * @brief This function returns a constant reference to member outLinTQuadRequest
     * @return Constant reference to member outLinTQuadRequest
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const RBIC1::OutLinTQuadRequest& outLinTQuadRequest() const;

    /*!
     * @brief This function returns a reference to member outLinTQuadRequest
     * @return Reference to member outLinTQuadRequest
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport RBIC1::OutLinTQuadRequest& outLinTQuadRequest();


    /*!
     * @brief This function copies the value in member outQuadTQuadRequest
     * @param _outQuadTQuadRequest New value to be copied in member outQuadTQuadRequest
     */
    eProsima_user_DllExport void outQuadTQuadRequest(
            const RBIC1::OutQuadTQuadRequest& _outQuadTQuadRequest);

    /*!
     * @brief This function moves the value in member outQuadTQuadRequest
     * @param _outQuadTQuadRequest New value to be moved in member outQuadTQuadRequest
     */
    eProsima_user_DllExport void outQuadTQuadRequest(
            RBIC1::OutQuadTQuadRequest&& _outQuadTQuadRequest);

    /*!
     * @brief This function returns a constant reference to member outQuadTQuadRequest
     * @return Constant reference to member outQuadTQuadRequest
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const RBIC1::OutQuadTQuadRequest& outQuadTQuadRequest() const;

    /*!
     * @brief This function returns a reference to member outQuadTQuadRequest
     * @return Reference to member outQuadTQuadRequest
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport RBIC1::OutQuadTQuadRequest& outQuadTQuadRequest();


    /*!
     * @brief This function copies the value in member zmd31050Cal1Request
     * @param _zmd31050Cal1Request New value to be copied in member zmd31050Cal1Request
     */
    eProsima_user_DllExport void zmd31050Cal1Request(
            const RBIC1::ZMD31050Cal1Request& _zmd31050Cal1Request);

    /*!
     * @brief This function moves the value in member zmd31050Cal1Request
     * @param _zmd31050Cal1Request New value to be moved in member zmd31050Cal1Request
     */
    eProsima_user_DllExport void zmd31050Cal1Request(
            RBIC1::ZMD31050Cal1Request&& _zmd31050Cal1Request);

    /*!
     * @brief This function returns a constant reference to member zmd31050Cal1Request
     * @return Constant reference to member zmd31050Cal1Request
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const RBIC1::ZMD31050Cal1Request& zmd31050Cal1Request() const;

    /*!
     * @brief This function returns a reference to member zmd31050Cal1Request
     * @return Reference to member zmd31050Cal1Request
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport RBIC1::ZMD31050Cal1Request& zmd31050Cal1Request();


    /*!
     * @brief This function copies the value in member zmd31050Sim1Request
     * @param _zmd31050Sim1Request New value to be copied in member zmd31050Sim1Request
     */
    eProsima_user_DllExport void zmd31050Sim1Request(
            const RBIC1::ZMD31050Sim1Request& _zmd31050Sim1Request);

    /*!
     * @brief This function moves the value in member zmd31050Sim1Request
     * @param _zmd31050Sim1Request New value to be moved in member zmd31050Sim1Request
     */
    eProsima_user_DllExport void zmd31050Sim1Request(
            RBIC1::ZMD31050Sim1Request&& _zmd31050Sim1Request);

    /*!
     * @brief This function returns a constant reference to member zmd31050Sim1Request
     * @return Constant reference to member zmd31050Sim1Request
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const RBIC1::ZMD31050Sim1Request& zmd31050Sim1Request() const;

    /*!
     * @brief This function returns a reference to member zmd31050Sim1Request
     * @return Reference to member zmd31050Sim1Request
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport RBIC1::ZMD31050Sim1Request& zmd31050Sim1Request();


    /*!
     * @brief This function copies the value in member dllVersionRequest
     * @param _dllVersionRequest New value to be copied in member dllVersionRequest
     */
    eProsima_user_DllExport void dllVersionRequest(
            const RBIC1::DLLVersionRequest& _dllVersionRequest);

    /*!
     * @brief This function moves the value in member dllVersionRequest
     * @param _dllVersionRequest New value to be moved in member dllVersionRequest
     */
    eProsima_user_DllExport void dllVersionRequest(
            RBIC1::DLLVersionRequest&& _dllVersionRequest);

    /*!
     * @brief This function returns a constant reference to member dllVersionRequest
     * @return Constant reference to member dllVersionRequest
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const RBIC1::DLLVersionRequest& dllVersionRequest() const;

    /*!
     * @brief This function returns a reference to member dllVersionRequest
     * @return Reference to member dllVersionRequest
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport RBIC1::DLLVersionRequest& dllVersionRequest();


    /*!
     * @brief This function copies the value in member getMessageRequest
     * @param _getMessageRequest New value to be copied in member getMessageRequest
     */
    eProsima_user_DllExport void getMessageRequest(
            const RBIC1::GetMessageRequest& _getMessageRequest);

    /*!
     * @brief This function moves the value in member getMessageRequest
     * @param _getMessageRequest New value to be moved in member getMessageRequest
     */
    eProsima_user_DllExport void getMessageRequest(
            RBIC1::GetMessageRequest&& _getMessageRequest);

    /*!
     * @brief This function returns a constant reference to member getMessageRequest
     * @return Constant reference to member getMessageRequest
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const RBIC1::GetMessageRequest& getMessageRequest() const;

    /*!
     * @brief This function returns a reference to member getMessageRequest
     * @return Reference to member getMessageRequest
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport RBIC1::GetMessageRequest& getMessageRequest();

private:

    RBIC1::MessageType m__d;

    RBIC1::OutLinRequest m_outLinRequest;
    RBIC1::TLinRequest m_tLinRequest;
    RBIC1::OutQuadRequest m_outQuadRequest;
    RBIC1::OutThirdRequest m_outThirdRequest;
    RBIC1::TQuadRequest m_tQuadRequest;
    RBIC1::OutLinTLinRequest m_outLinTLinRequest;
    RBIC1::OutQuadTLinRequest m_outQuadTLinRequest;
    RBIC1::OutLinTQuadRequest m_outLinTQuadRequest;
    RBIC1::OutQuadTQuadRequest m_outQuadTQuadRequest;
    RBIC1::ZMD31050Cal1Request m_zmd31050Cal1Request;
    RBIC1::ZMD31050Sim1Request m_zmd31050Sim1Request;
    RBIC1::DLLVersionRequest m_dllVersionRequest;
    RBIC1::GetMessageRequest m_getMessageRequest;
};


/*!
 * @brief This class represents the union ReplyUnion defined by the user in the IDL file.
 * @ingroup RBIC1
 */
class ReplyUnion
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ReplyUnion();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ReplyUnion();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RBIC1::ReplyUnion that will be copied.
     */
    eProsima_user_DllExport ReplyUnion(
            const ReplyUnion& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RBIC1::ReplyUnion that will be copied.
     */
    eProsima_user_DllExport ReplyUnion(
            ReplyUnion&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RBIC1::ReplyUnion that will be copied.
     */
    eProsima_user_DllExport ReplyUnion& operator =(
            const ReplyUnion& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RBIC1::ReplyUnion that will be copied.
     */
    eProsima_user_DllExport ReplyUnion& operator =(
            ReplyUnion&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::ReplyUnion object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ReplyUnion& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::ReplyUnion object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ReplyUnion& x) const;

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    eProsima_user_DllExport void _d(
            RBIC1::MessageType __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eProsima_user_DllExport RBIC1::MessageType _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    eProsima_user_DllExport RBIC1::MessageType& _d();

    /*!
     * @brief This function copies the value in member outLinReply
     * @param _outLinReply New value to be copied in member outLinReply
     */
    eProsima_user_DllExport void outLinReply(
            const RBIC1::OutLinReply& _outLinReply);

    /*!
     * @brief This function moves the value in member outLinReply
     * @param _outLinReply New value to be moved in member outLinReply
     */
    eProsima_user_DllExport void outLinReply(
            RBIC1::OutLinReply&& _outLinReply);

    /*!
     * @brief This function returns a constant reference to member outLinReply
     * @return Constant reference to member outLinReply
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const RBIC1::OutLinReply& outLinReply() const;

    /*!
     * @brief This function returns a reference to member outLinReply
     * @return Reference to member outLinReply
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport RBIC1::OutLinReply& outLinReply();


    /*!
     * @brief This function copies the value in member tLinReply
     * @param _tLinReply New value to be copied in member tLinReply
     */
    eProsima_user_DllExport void tLinReply(
            const RBIC1::TLinReply& _tLinReply);

    /*!
     * @brief This function moves the value in member tLinReply
     * @param _tLinReply New value to be moved in member tLinReply
     */
    eProsima_user_DllExport void tLinReply(
            RBIC1::TLinReply&& _tLinReply);

    /*!
     * @brief This function returns a constant reference to member tLinReply
     * @return Constant reference to member tLinReply
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const RBIC1::TLinReply& tLinReply() const;

    /*!
     * @brief This function returns a reference to member tLinReply
     * @return Reference to member tLinReply
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport RBIC1::TLinReply& tLinReply();


    /*!
     * @brief This function copies the value in member outQuadReply
     * @param _outQuadReply New value to be copied in member outQuadReply
     */
    eProsima_user_DllExport void outQuadReply(
            const RBIC1::OutQuadReply& _outQuadReply);

    /*!
     * @brief This function moves the value in member outQuadReply
     * @param _outQuadReply New value to be moved in member outQuadReply
     */
    eProsima_user_DllExport void outQuadReply(
            RBIC1::OutQuadReply&& _outQuadReply);

    /*!
     * @brief This function returns a constant reference to member outQuadReply
     * @return Constant reference to member outQuadReply
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const RBIC1::OutQuadReply& outQuadReply() const;

    /*!
     * @brief This function returns a reference to member outQuadReply
     * @return Reference to member outQuadReply
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport RBIC1::OutQuadReply& outQuadReply();


    /*!
     * @brief This function copies the value in member outThirdReply
     * @param _outThirdReply New value to be copied in member outThirdReply
     */
    eProsima_user_DllExport void outThirdReply(
            const RBIC1::OutThirdReply& _outThirdReply);

    /*!
     * @brief This function moves the value in member outThirdReply
     * @param _outThirdReply New value to be moved in member outThirdReply
     */
    eProsima_user_DllExport void outThirdReply(
            RBIC1::OutThirdReply&& _outThirdReply);

    /*!
     * @brief This function returns a constant reference to member outThirdReply
     * @return Constant reference to member outThirdReply
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const RBIC1::OutThirdReply& outThirdReply() const;

    /*!
     * @brief This function returns a reference to member outThirdReply
     * @return Reference to member outThirdReply
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport RBIC1::OutThirdReply& outThirdReply();


    /*!
     * @brief This function copies the value in member tQuadReply
     * @param _tQuadReply New value to be copied in member tQuadReply
     */
    eProsima_user_DllExport void tQuadReply(
            const RBIC1::TQuadReply& _tQuadReply);

    /*!
     * @brief This function moves the value in member tQuadReply
     * @param _tQuadReply New value to be moved in member tQuadReply
     */
    eProsima_user_DllExport void tQuadReply(
            RBIC1::TQuadReply&& _tQuadReply);

    /*!
     * @brief This function returns a constant reference to member tQuadReply
     * @return Constant reference to member tQuadReply
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const RBIC1::TQuadReply& tQuadReply() const;

    /*!
     * @brief This function returns a reference to member tQuadReply
     * @return Reference to member tQuadReply
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport RBIC1::TQuadReply& tQuadReply();


    /*!
     * @brief This function copies the value in member outLinTLinReply
     * @param _outLinTLinReply New value to be copied in member outLinTLinReply
     */
    eProsima_user_DllExport void outLinTLinReply(
            const RBIC1::OutLinTLinReply& _outLinTLinReply);

    /*!
     * @brief This function moves the value in member outLinTLinReply
     * @param _outLinTLinReply New value to be moved in member outLinTLinReply
     */
    eProsima_user_DllExport void outLinTLinReply(
            RBIC1::OutLinTLinReply&& _outLinTLinReply);

    /*!
     * @brief This function returns a constant reference to member outLinTLinReply
     * @return Constant reference to member outLinTLinReply
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const RBIC1::OutLinTLinReply& outLinTLinReply() const;

    /*!
     * @brief This function returns a reference to member outLinTLinReply
     * @return Reference to member outLinTLinReply
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport RBIC1::OutLinTLinReply& outLinTLinReply();


    /*!
     * @brief This function copies the value in member outQuadTLinReply
     * @param _outQuadTLinReply New value to be copied in member outQuadTLinReply
     */
    eProsima_user_DllExport void outQuadTLinReply(
            const RBIC1::OutQuadTLinReply& _outQuadTLinReply);

    /*!
     * @brief This function moves the value in member outQuadTLinReply
     * @param _outQuadTLinReply New value to be moved in member outQuadTLinReply
     */
    eProsima_user_DllExport void outQuadTLinReply(
            RBIC1::OutQuadTLinReply&& _outQuadTLinReply);

    /*!
     * @brief This function returns a constant reference to member outQuadTLinReply
     * @return Constant reference to member outQuadTLinReply
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const RBIC1::OutQuadTLinReply& outQuadTLinReply() const;

    /*!
     * @brief This function returns a reference to member outQuadTLinReply
     * @return Reference to member outQuadTLinReply
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport RBIC1::OutQuadTLinReply& outQuadTLinReply();


    /*!
     * @brief This function copies the value in member outLinTQuadReply
     * @param _outLinTQuadReply New value to be copied in member outLinTQuadReply
     */
    eProsima_user_DllExport void outLinTQuadReply(
            const RBIC1::OutLinTQuadReply& _outLinTQuadReply);

    /*!
     * @brief This function moves the value in member outLinTQuadReply
     * @param _outLinTQuadReply New value to be moved in member outLinTQuadReply
     */
    eProsima_user_DllExport void outLinTQuadReply(
            RBIC1::OutLinTQuadReply&& _outLinTQuadReply);

    /*!
     * @brief This function returns a constant reference to member outLinTQuadReply
     * @return Constant reference to member outLinTQuadReply
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const RBIC1::OutLinTQuadReply& outLinTQuadReply() const;

    /*!
     * @brief This function returns a reference to member outLinTQuadReply
     * @return Reference to member outLinTQuadReply
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport RBIC1::OutLinTQuadReply& outLinTQuadReply();


    /*!
     * @brief This function copies the value in member outQuadTQuadReply
     * @param _outQuadTQuadReply New value to be copied in member outQuadTQuadReply
     */
    eProsima_user_DllExport void outQuadTQuadReply(
            const RBIC1::OutQuadTQuadReply& _outQuadTQuadReply);

    /*!
     * @brief This function moves the value in member outQuadTQuadReply
     * @param _outQuadTQuadReply New value to be moved in member outQuadTQuadReply
     */
    eProsima_user_DllExport void outQuadTQuadReply(
            RBIC1::OutQuadTQuadReply&& _outQuadTQuadReply);

    /*!
     * @brief This function returns a constant reference to member outQuadTQuadReply
     * @return Constant reference to member outQuadTQuadReply
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const RBIC1::OutQuadTQuadReply& outQuadTQuadReply() const;

    /*!
     * @brief This function returns a reference to member outQuadTQuadReply
     * @return Reference to member outQuadTQuadReply
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport RBIC1::OutQuadTQuadReply& outQuadTQuadReply();


    /*!
     * @brief This function copies the value in member zmd31050Cal1Reply
     * @param _zmd31050Cal1Reply New value to be copied in member zmd31050Cal1Reply
     */
    eProsima_user_DllExport void zmd31050Cal1Reply(
            const RBIC1::ZMD31050Cal1Reply& _zmd31050Cal1Reply);

    /*!
     * @brief This function moves the value in member zmd31050Cal1Reply
     * @param _zmd31050Cal1Reply New value to be moved in member zmd31050Cal1Reply
     */
    eProsima_user_DllExport void zmd31050Cal1Reply(
            RBIC1::ZMD31050Cal1Reply&& _zmd31050Cal1Reply);

    /*!
     * @brief This function returns a constant reference to member zmd31050Cal1Reply
     * @return Constant reference to member zmd31050Cal1Reply
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const RBIC1::ZMD31050Cal1Reply& zmd31050Cal1Reply() const;

    /*!
     * @brief This function returns a reference to member zmd31050Cal1Reply
     * @return Reference to member zmd31050Cal1Reply
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport RBIC1::ZMD31050Cal1Reply& zmd31050Cal1Reply();


    /*!
     * @brief This function copies the value in member zmd31050Sim1Reply
     * @param _zmd31050Sim1Reply New value to be copied in member zmd31050Sim1Reply
     */
    eProsima_user_DllExport void zmd31050Sim1Reply(
            const RBIC1::ZMD31050Sim1Reply& _zmd31050Sim1Reply);

    /*!
     * @brief This function moves the value in member zmd31050Sim1Reply
     * @param _zmd31050Sim1Reply New value to be moved in member zmd31050Sim1Reply
     */
    eProsima_user_DllExport void zmd31050Sim1Reply(
            RBIC1::ZMD31050Sim1Reply&& _zmd31050Sim1Reply);

    /*!
     * @brief This function returns a constant reference to member zmd31050Sim1Reply
     * @return Constant reference to member zmd31050Sim1Reply
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const RBIC1::ZMD31050Sim1Reply& zmd31050Sim1Reply() const;

    /*!
     * @brief This function returns a reference to member zmd31050Sim1Reply
     * @return Reference to member zmd31050Sim1Reply
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport RBIC1::ZMD31050Sim1Reply& zmd31050Sim1Reply();


    /*!
     * @brief This function copies the value in member dllVersionReply
     * @param _dllVersionReply New value to be copied in member dllVersionReply
     */
    eProsima_user_DllExport void dllVersionReply(
            const RBIC1::DLLVersionReply& _dllVersionReply);

    /*!
     * @brief This function moves the value in member dllVersionReply
     * @param _dllVersionReply New value to be moved in member dllVersionReply
     */
    eProsima_user_DllExport void dllVersionReply(
            RBIC1::DLLVersionReply&& _dllVersionReply);

    /*!
     * @brief This function returns a constant reference to member dllVersionReply
     * @return Constant reference to member dllVersionReply
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const RBIC1::DLLVersionReply& dllVersionReply() const;

    /*!
     * @brief This function returns a reference to member dllVersionReply
     * @return Reference to member dllVersionReply
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport RBIC1::DLLVersionReply& dllVersionReply();


    /*!
     * @brief This function copies the value in member getMessageReply
     * @param _getMessageReply New value to be copied in member getMessageReply
     */
    eProsima_user_DllExport void getMessageReply(
            const RBIC1::GetMessageReply& _getMessageReply);

    /*!
     * @brief This function moves the value in member getMessageReply
     * @param _getMessageReply New value to be moved in member getMessageReply
     */
    eProsima_user_DllExport void getMessageReply(
            RBIC1::GetMessageReply&& _getMessageReply);

    /*!
     * @brief This function returns a constant reference to member getMessageReply
     * @return Constant reference to member getMessageReply
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const RBIC1::GetMessageReply& getMessageReply() const;

    /*!
     * @brief This function returns a reference to member getMessageReply
     * @return Reference to member getMessageReply
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport RBIC1::GetMessageReply& getMessageReply();

private:

    RBIC1::MessageType m__d;

    RBIC1::OutLinReply m_outLinReply;
    RBIC1::TLinReply m_tLinReply;
    RBIC1::OutQuadReply m_outQuadReply;
    RBIC1::OutThirdReply m_outThirdReply;
    RBIC1::TQuadReply m_tQuadReply;
    RBIC1::OutLinTLinReply m_outLinTLinReply;
    RBIC1::OutQuadTLinReply m_outQuadTLinReply;
    RBIC1::OutLinTQuadReply m_outLinTQuadReply;
    RBIC1::OutQuadTQuadReply m_outQuadTQuadReply;
    RBIC1::ZMD31050Cal1Reply m_zmd31050Cal1Reply;
    RBIC1::ZMD31050Sim1Reply m_zmd31050Sim1Reply;
    RBIC1::DLLVersionReply m_dllVersionReply;
    RBIC1::GetMessageReply m_getMessageReply;
};


/*!
 * @brief This class represents the structure GenericRequest defined by the user in the IDL file.
 * @ingroup RBIC1
 */
class GenericRequest
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport GenericRequest();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~GenericRequest();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RBIC1::GenericRequest that will be copied.
     */
    eProsima_user_DllExport GenericRequest(
            const GenericRequest& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RBIC1::GenericRequest that will be copied.
     */
    eProsima_user_DllExport GenericRequest(
            GenericRequest&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RBIC1::GenericRequest that will be copied.
     */
    eProsima_user_DllExport GenericRequest& operator =(
            const GenericRequest& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RBIC1::GenericRequest that will be copied.
     */
    eProsima_user_DllExport GenericRequest& operator =(
            GenericRequest&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::GenericRequest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const GenericRequest& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::GenericRequest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const GenericRequest& x) const;

    /*!
     * @brief This function sets a value in member requestId
     * @param _requestId New value for member requestId
     */
    eProsima_user_DllExport void requestId(
            uint32_t _requestId);

    /*!
     * @brief This function returns the value of member requestId
     * @return Value of member requestId
     */
    eProsima_user_DllExport uint32_t requestId() const;

    /*!
     * @brief This function returns a reference to member requestId
     * @return Reference to member requestId
     */
    eProsima_user_DllExport uint32_t& requestId();


    /*!
     * @brief This function copies the value in member request
     * @param _request New value to be copied in member request
     */
    eProsima_user_DllExport void request(
            const RBIC1::RequestUnion& _request);

    /*!
     * @brief This function moves the value in member request
     * @param _request New value to be moved in member request
     */
    eProsima_user_DllExport void request(
            RBIC1::RequestUnion&& _request);

    /*!
     * @brief This function returns a constant reference to member request
     * @return Constant reference to member request
     */
    eProsima_user_DllExport const RBIC1::RequestUnion& request() const;

    /*!
     * @brief This function returns a reference to member request
     * @return Reference to member request
     */
    eProsima_user_DllExport RBIC1::RequestUnion& request();

private:

    uint32_t m_requestId{0};
    RBIC1::RequestUnion m_request;

};


/*!
 * @brief This class represents the structure GenericReply defined by the user in the IDL file.
 * @ingroup RBIC1
 */
class GenericReply
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport GenericReply();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~GenericReply();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RBIC1::GenericReply that will be copied.
     */
    eProsima_user_DllExport GenericReply(
            const GenericReply& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RBIC1::GenericReply that will be copied.
     */
    eProsima_user_DllExport GenericReply(
            GenericReply&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RBIC1::GenericReply that will be copied.
     */
    eProsima_user_DllExport GenericReply& operator =(
            const GenericReply& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RBIC1::GenericReply that will be copied.
     */
    eProsima_user_DllExport GenericReply& operator =(
            GenericReply&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::GenericReply object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const GenericReply& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RBIC1::GenericReply object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const GenericReply& x) const;

    /*!
     * @brief This function sets a value in member requestId
     * @param _requestId New value for member requestId
     */
    eProsima_user_DllExport void requestId(
            uint32_t _requestId);

    /*!
     * @brief This function returns the value of member requestId
     * @return Value of member requestId
     */
    eProsima_user_DllExport uint32_t requestId() const;

    /*!
     * @brief This function returns a reference to member requestId
     * @return Reference to member requestId
     */
    eProsima_user_DllExport uint32_t& requestId();


    /*!
     * @brief This function copies the value in member reply
     * @param _reply New value to be copied in member reply
     */
    eProsima_user_DllExport void reply(
            const RBIC1::ReplyUnion& _reply);

    /*!
     * @brief This function moves the value in member reply
     * @param _reply New value to be moved in member reply
     */
    eProsima_user_DllExport void reply(
            RBIC1::ReplyUnion&& _reply);

    /*!
     * @brief This function returns a constant reference to member reply
     * @return Constant reference to member reply
     */
    eProsima_user_DllExport const RBIC1::ReplyUnion& reply() const;

    /*!
     * @brief This function returns a reference to member reply
     * @return Reference to member reply
     */
    eProsima_user_DllExport RBIC1::ReplyUnion& reply();

private:

    uint32_t m_requestId{0};
    RBIC1::ReplyUnion m_reply;

};

} // namespace RBIC1

#endif // _FAST_DDS_GENERATED_RBIC1_RBIC1_H_



